"use strict";(self.webpackChunk_grafana_ui=self.webpackChunk_grafana_ui||[]).push([[7762],{"./src/utils/storybook/DashboardStoryCanvas.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{s:function(){return DashboardStoryCanvas}});var _emotion_css__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@emotion/css/dist/emotion-css.esm.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react/index.js"),_themes__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/themes/ThemeContext.tsx"),DashboardStoryCanvas=function(param){var children=param.children,theme=(0,_themes__WEBPACK_IMPORTED_MODULE_2__.$j)(),style=(0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.AH)({width:"100%",height:"100%",padding:"32px",background:theme.colors.background.canvas,overflow:"auto"});return react__WEBPACK_IMPORTED_MODULE_1__.createElement("div",{className:style},children)};DashboardStoryCanvas.displayName="DashboardStoryCanvas";try{DashboardStoryCanvas.displayName="DashboardStoryCanvas",DashboardStoryCanvas.__docgenInfo={description:"",displayName:"DashboardStoryCanvas",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/utils/storybook/DashboardStoryCanvas.tsx#DashboardStoryCanvas"]={docgenInfo:DashboardStoryCanvas.__docgenInfo,name:"DashboardStoryCanvas",path:"src/utils/storybook/DashboardStoryCanvas.tsx#DashboardStoryCanvas"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/ToolbarButton/ToolbarButtonRow.story.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:function(){return Basic},default:function(){return ToolbarButtonRow_story}});var react=__webpack_require__("../../node_modules/react/index.js"),DashboardStoryCanvas=__webpack_require__("./src/utils/storybook/DashboardStoryCanvas.tsx"),ToolbarButton=__webpack_require__("./src/components/ToolbarButton/ToolbarButton.tsx"),ToolbarButtonRow=__webpack_require__("./src/components/ToolbarButton/ToolbarButtonRow.tsx"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),lib=__webpack_require__("../../node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("../../node_modules/@storybook/blocks/dist/index.mjs");function _createMdxContent(props){const _components={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,lib.R)(),...props.components};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(_components.h1,{id:"toolbarbuttonrow",children:"ToolbarButtonRow"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["A container for multiple ",(0,jsx_runtime.jsx)(_components.code,{children:"ToolbarButton"}),"s. Provides automatic overflow behaviour when the buttons no longer fit in the container."]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usage",children:"Usage"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["This example shows how to use several buttons in a ",(0,jsx_runtime.jsx)(_components.code,{children:"ToolbarButtonRow"}),"."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'<ToolbarButtonRow>\n  <ToolbarButton variant="default" iconOnly={false} isOpen={false}>\n    Last 6 hours\n  </ToolbarButton>\n  <ButtonGroup>\n    <ToolbarButton icon="search-minus" variant="default" />\n    <ToolbarButton icon="search-plus" variant="default" />\n  </ButtonGroup>\n  <ToolbarButton icon="sync" isOpen={false} variant="primary" />\n</ToolbarButtonRow>\n'})}),"\n",(0,jsx_runtime.jsx)(dist.ov,{of:ToolbarButtonRow.U})]})}var meta={title:"Buttons/ToolbarButton/ToolbarButtonRow",component:ToolbarButtonRow.U,parameters:{docs:{page:function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}},controls:{exclude:["className"]}}},Basic=function(args){return react.createElement(DashboardStoryCanvas.s,null,react.createElement(ToolbarButtonRow.U,args,react.createElement(ToolbarButton.I,null,"Just text"),react.createElement(ToolbarButton.I,{icon:"sync",tooltip:"Sync"}),react.createElement(ToolbarButton.I,{imgSrc:"./grafana_icon.svg"},"With imgSrc"),react.createElement(ToolbarButton.I,null,"Just text"),react.createElement(ToolbarButton.I,{icon:"sync",tooltip:"Sync"}),react.createElement(ToolbarButton.I,{imgSrc:"./grafana_icon.svg"},"With imgSrc")))},ToolbarButtonRow_story=meta;Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:'args => {\n  return <DashboardStoryCanvas>\n      <ToolbarButtonRow {...args}>\n        <ToolbarButton>Just text</ToolbarButton>\n        <ToolbarButton icon="sync" tooltip="Sync" />\n        <ToolbarButton imgSrc="./grafana_icon.svg">With imgSrc</ToolbarButton>\n        <ToolbarButton>Just text</ToolbarButton>\n        <ToolbarButton icon="sync" tooltip="Sync" />\n        <ToolbarButton imgSrc="./grafana_icon.svg">With imgSrc</ToolbarButton>\n      </ToolbarButtonRow>\n    </DashboardStoryCanvas>;\n}',...Basic.parameters?.docs?.source}}}}}]);