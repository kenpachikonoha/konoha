{"version":3,"file":"module.js","mappings":"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","sources":["webpack://parca/external amd \"@emotion/css\"","webpack://parca/external amd \"@grafana/data\"","webpack://parca/external amd \"@grafana/runtime\"","webpack://parca/external amd \"@grafana/ui\"","webpack://parca/external amd \"lodash\"","webpack://parca/external amd \"react\"","webpack://parca/external amd \"rxjs\"","webpack://parca/webpack/bootstrap","webpack://parca/webpack/runtime/compat get default export","webpack://parca/webpack/runtime/define property getters","webpack://parca/webpack/runtime/hasOwnProperty shorthand","webpack://parca/webpack/runtime/make namespace object","webpack://parca/../../../../../node_modules/react-use/esm/useEffectOnce.js","webpack://parca/../../../../../node_modules/react-use/esm/useMount.js","webpack://parca/./QueryEditor/Stack.tsx","webpack://parca/./QueryEditor/EditorRow.tsx","webpack://parca/./QueryEditor/EditorRows.tsx","webpack://parca/./lang/index.ts","webpack://parca/./lang/lang.ts","webpack://parca/./QueryEditor/autocomplete.ts","webpack://parca/./QueryEditor/LabelsEditor.tsx","webpack://parca/../../../../../node_modules/react-use/esm/useLatest.js","webpack://parca/../../../../../node_modules/react-use/esm/useToggle.js","webpack://parca/./QueryEditor/QueryOptions.tsx","webpack://parca/./QueryEditor/QueryEditor.tsx","webpack://parca/./dataquery.gen.ts","webpack://parca/./datasource.ts","webpack://parca/./module.ts","webpack://parca/./ConfigEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__89__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { useEffect } from 'react';\nvar useEffectOnce = function (effect) {\n    useEffect(effect, []);\n};\nexport default useEffectOnce;\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n","import { css } from '@emotion/css';\nimport React, { CSSProperties } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface StackProps {\n  direction?: CSSProperties['flexDirection'];\n  alignItems?: CSSProperties['alignItems'];\n  wrap?: boolean;\n  gap?: number;\n  flexGrow?: CSSProperties['flexGrow'];\n  children: React.ReactNode;\n}\n\nexport function Stack(props: StackProps) {\n  const styles = useStyles2(getStyles, props);\n  return <div className={styles.root}>{props.children}</div>;\n}\n\nconst getStyles = (theme: GrafanaTheme2, props: StackProps) => ({\n  root: css({\n    display: 'flex',\n    flexDirection: props.direction ?? 'row',\n    flexWrap: props.wrap ?? true ? 'wrap' : undefined,\n    alignItems: props.alignItems,\n    gap: theme.spacing(props.gap ?? 2),\n    flexGrow: props.flexGrow,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowProps {\n  children: React.ReactNode;\n  stackProps?: Partial<React.ComponentProps<typeof Stack>>;\n}\n\nexport const EditorRow = ({ children, stackProps }: EditorRowProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={2} {...stackProps}>\n        {children}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowsProps {\n  children: React.ReactNode;\n}\n\nexport const EditorRows = ({ children }: EditorRowsProps) => {\n  return (\n    <Stack gap={0.5} direction=\"column\">\n      {children}\n    </Stack>\n  );\n};\n","import { language, languageConfiguration } from './lang';\n\nexport const languageDefinition = {\n  id: 'parca',\n  extensions: ['.parca'],\n  aliases: ['parca'],\n  mimetypes: [],\n  def: {\n    language,\n    languageConfiguration,\n  },\n};\n","import type { languages } from 'monaco-editor';\n\nexport const languageConfiguration: languages.LanguageConfiguration = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g,\n  brackets: [['{', '}']],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  folding: {},\n};\n\nexport const language: languages.IMonarchLanguage = {\n  ignoreCase: false,\n  defaultToken: '',\n  tokenPostfix: '.fireql',\n\n  keywords: [],\n  operators: [],\n\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n\n  tokenizer: {\n    root: [\n      // labels\n      [/[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/, 'tag'],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/\"/, 'string', '@string_double'],\n      [/'/, 'string', '@string_single'],\n\n      // whitespace\n      { include: '@whitespace' },\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, '@brackets'],\n      [/[<>](?!@symbols)/, '@brackets'],\n      [\n        /@symbols/,\n        {\n          cases: {\n            '@operators': 'delimiter',\n            '@default': '',\n          },\n        },\n      ],\n\n      // numbers\n      [/\\d+/, 'number'],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n      [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n      [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n      [/\\d(@integersuffix)/, 'number'],\n    ],\n\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, 'string', '@pop'],\n    ],\n\n    string_single: [\n      [/[^\\\\']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/'/, 'string', '@pop'],\n    ],\n\n    clauses: [\n      [/[^(,)]/, 'tag'],\n      [/\\)/, 'identifier', '@pop'],\n    ],\n\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n  },\n};\n","import { monacoTypes, Monaco } from '@grafana/ui';\n\n/**\n * Class that implements CompletionItemProvider interface and allows us to provide suggestion for the Monaco\n * autocomplete system.\n *\n * At this moment we just pass it all the labels/values we get from Fire backend later on we may do something a bit\n * smarter if there will be lots of labels.\n */\nexport class CompletionProvider implements monacoTypes.languages.CompletionItemProvider {\n  triggerCharacters = ['{', ',', '[', '(', '=', '~', ' ', '\"'];\n\n  private labels: { [label: string]: string[] } = {};\n\n  constructor(\n    private datasource: {\n      getLabelNames: () => Promise<string[]>;\n      getLabelValues: (label: string) => Promise<string[]>;\n    },\n    private monaco: Monaco,\n    private editor: monacoTypes.editor.IStandaloneCodeEditor\n  ) {}\n\n  async init() {\n    const names = await this.datasource.getLabelNames();\n    this.labels = names.reduce<{ [label: string]: string[] }>((acc, name) => {\n      acc[name] = [];\n      return acc;\n    }, {});\n  }\n\n  provideCompletionItems(\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> {\n    // if the model-id does not match, then this call is from a different editor-instance,\n    // not \"our instance\", so return nothing\n    if (this.editor.getModel()?.id !== model.id) {\n      return { suggestions: [] };\n    }\n\n    const { range, offset } = getRangeAndOffset(this.monaco, model, position);\n    const situation = getSituation(model.getValue(), offset);\n    // Cannot be async/await cause of the ProviderResult return type\n    return this.getCompletions(situation).then((completionItems) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = completionItems.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = completionItems.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, this.monaco!),\n        label: item.label,\n        insertText: item.insertText,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range,\n      }));\n      return { suggestions };\n    });\n  }\n\n  /**\n   * Get suggestion based on the situation we are in like whether we should suggest label names or values.\n   * @param situation\n   * @private\n   */\n  private async getCompletions(situation: Situation): Promise<Completion[]> {\n    if (!Object.keys(this.labels).length) {\n      return [];\n    }\n    switch (situation.type) {\n      // Not really sure what would make sense to suggest in this case so just leave it\n      case 'UNKNOWN': {\n        return [];\n      }\n      case 'EMPTY': {\n        return Object.keys(this.labels).map((key) => {\n          return {\n            label: key,\n            insertText: `{${key}=\"`,\n            type: 'LABEL_NAME',\n          };\n        });\n      }\n      case 'IN_LABEL_NAME':\n        return Object.keys(this.labels).map((key) => {\n          return {\n            label: key,\n            insertText: key,\n            type: 'LABEL_NAME',\n          };\n        });\n      case 'IN_LABEL_VALUE':\n        let values = [];\n        if (this.labels[situation.labelName].length) {\n          values = this.labels[situation.labelName];\n        } else {\n          values = await this.datasource.getLabelValues(situation.labelName);\n          this.labels[situation.labelName] = values;\n        }\n\n        return values.map((val) => {\n          return {\n            label: val,\n            insertText: situation.betweenQuotes ? val : `\"${val}\"`,\n            type: 'LABEL_VALUE',\n          };\n        });\n      default:\n        throw new Error(`Unexpected situation ${situation}`);\n    }\n  }\n}\n\n/**\n * Get item kind which is used for icon next to the suggestion.\n * @param type\n * @param monaco\n */\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    default:\n      throw new Error(`Unexpected CompletionType: ${type}`);\n  }\n}\n\nexport type CompletionType = 'LABEL_NAME' | 'LABEL_VALUE';\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n};\n\nexport type Label = {\n  name: string;\n  value: string;\n};\n\nexport type Situation =\n  | {\n      type: 'UNKNOWN';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'IN_LABEL_NAME';\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_LABEL_VALUE';\n      labelName: string;\n      betweenQuotes: boolean;\n      otherLabels: Label[];\n    };\n\nconst labelNameRegex = /[a-zA-Z_][a-zA-Z0-9_]*/;\nconst labelValueRegex = /[^\"]*/; // anything except a double quote\nconst labelPairsRegex = new RegExp(`(${labelNameRegex.source})=\"(${labelValueRegex.source})\"`, 'g');\nconst inLabelValueRegex = new RegExp(`(${labelNameRegex.source})=(\"?)${labelValueRegex.source}$`);\nconst inLabelNameRegex = new RegExp(/[{,]\\s*[a-zA-Z0-9_]*$/);\n\n/**\n * Figure out where is the cursor and what kind of suggestions are appropriate.\n * As currently Fire handles just a simple {foo=\"bar\", baz=\"zyx\"} kind of values we can do with simple regex to figure\n * out where we are with the cursor.\n * @param text\n * @param offset\n */\nfunction getSituation(text: string, offset: number): Situation {\n  if (text === '') {\n    return {\n      type: 'EMPTY',\n    };\n  }\n\n  // Get all the labels so far in the query, so we can do some more filtering.\n  const matches = text.matchAll(labelPairsRegex);\n  const existingLabels = Array.from(matches).reduce<Label[]>((acc, match) => {\n    const [_, name, value] = match[1];\n    acc.push({ name, value });\n    return acc;\n  }, []);\n\n  // Check if we are editing a label value right now. If so also get name of the label\n  const matchLabelValue = text.substring(0, offset).match(inLabelValueRegex);\n  if (matchLabelValue) {\n    return {\n      type: 'IN_LABEL_VALUE',\n      labelName: matchLabelValue[1],\n      betweenQuotes: !!matchLabelValue[2],\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Check if we are editing a label name\n  const matchLabelName = text.substring(0, offset).match(inLabelNameRegex);\n  if (matchLabelName) {\n    return {\n      type: 'IN_LABEL_NAME',\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Will happen only if user writes something that isn't really a label selector\n  return {\n    type: 'UNKNOWN',\n  };\n}\n\nfunction getRangeAndOffset(monaco: Monaco, model: monacoTypes.editor.ITextModel, position: monacoTypes.Position) {\n  const word = model.getWordAtPosition(position);\n  const range =\n    word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n\n  // documentation says `position` will be \"adjusted\" in `getOffsetAt` so we clone it here just for sure.\n  const positionClone = {\n    column: position.column,\n    lineNumber: position.lineNumber,\n  };\n\n  const offset = model.getOffsetAt(positionClone);\n  return { offset, range };\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef } from 'react';\nimport { useLatest } from 'react-use';\n\nimport { CodeEditor, Monaco, useStyles2, monacoTypes } from '@grafana/ui';\n\nimport { ParcaDataSource } from '../datasource';\nimport { languageDefinition } from '../lang';\n\nimport { CompletionProvider } from './autocomplete';\n\ninterface Props {\n  value: string;\n  datasource: ParcaDataSource;\n  onChange: (val: string) => void;\n  onRunQuery: (value: string) => void;\n}\n\nexport function LabelsEditor(props: Props) {\n  const setupAutocompleteFn = useAutocomplete(props.datasource);\n  const styles = useStyles2(getStyles);\n\n  const onRunQueryRef = useLatest(props.onRunQuery);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className={styles.wrapper}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <CodeEditor\n        value={props.value}\n        language={langId}\n        onBlur={props.onChange}\n        containerStyles={styles.queryField}\n        monacoOptions={{\n          folding: false,\n          fontSize: 14,\n          lineNumbers: 'off',\n          overviewRulerLanes: 0,\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            verticalScrollbarSize: 8, // used as \"padding-right\"\n            horizontal: 'hidden',\n            horizontalScrollbarSize: 0,\n          },\n          scrollBeyondLastLine: false,\n          wordWrap: 'on',\n          padding: {\n            top: 5,\n            bottom: 6,\n          },\n        }}\n        onBeforeEditorMount={ensureParcaQL}\n        onEditorDidMount={(editor, monaco) => {\n          setupAutocompleteFn(editor, monaco);\n\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n            onRunQueryRef.current(editor.getValue());\n          });\n        }}\n      />\n    </div>\n  );\n}\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\n/**\n * Hook that returns function that will set up monaco autocomplete for the label selector\n * @param datasource\n */\nfunction useAutocomplete(datasource: ParcaDataSource) {\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  // This should be run in monaco onEditorDidMount\n  return async (editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n    const provider = new CompletionProvider(datasource, monaco, editor);\n    await provider.init();\n    const { dispose } = monaco.languages.registerCompletionItemProvider(langId, provider);\n    autocompleteDisposeFun.current = dispose;\n  };\n}\n\n// we must only run the setup code once\nlet parcaqlSetupDone = false;\nconst langId = 'parca';\n\nfunction ensureParcaQL(monaco: Monaco) {\n  if (parcaqlSetupDone === false) {\n    parcaqlSetupDone = true;\n    const { aliases, extensions, mimetypes, def } = languageDefinition;\n    monaco.languages.register({ id: langId, aliases, extensions, mimetypes });\n    monaco.languages.setMonarchTokensProvider(langId, def.language);\n    monaco.languages.setLanguageConfiguration(langId, def.languageConfiguration);\n  }\n}\n\nconst getStyles = () => {\n  return {\n    queryField: css`\n      flex: 1;\n      // Not exactly sure but without this the editor doe not shrink after resizing (so you can make it bigger but not\n      // smaller). At the same time this does not actually make the editor 100px because it has flex 1 so I assume\n      // this should sort of act as a flex-basis (but flex-basis does not work for this). So yeah CSS magic.\n      width: 100px;\n    `,\n    wrapper: css`\n      display: flex;\n      flex: 1;\n      border: 1px solid rgba(36, 41, 46, 0.3);\n      border-radius: 2px;\n    `,\n  };\n};\n","import { useRef } from 'react';\nvar useLatest = function (value) {\n    var ref = useRef(value);\n    ref.current = value;\n    return ref;\n};\nexport default useLatest;\n","import { useReducer } from 'react';\nvar toggleReducer = function (state, nextValue) {\n    return typeof nextValue === 'boolean' ? nextValue : !state;\n};\nvar useToggle = function (initialValue) {\n    return useReducer(toggleReducer, initialValue);\n};\nexport default useToggle;\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2, RadioButtonGroup, Field, clearButtonStyles, Button } from '@grafana/ui';\n\nimport { Query } from '../types';\n\nimport { Stack } from './Stack';\n\nexport interface Props {\n  query: Query;\n  onQueryTypeChange: (val: Query['queryType']) => void;\n  app?: CoreApp;\n}\n\nconst rangeOptions: Array<{ value: Query['queryType']; label: string; description: string }> = [\n  { value: 'metrics', label: 'Metric', description: 'Return aggregated metrics' },\n  { value: 'profile', label: 'Profile', description: 'Return profile' },\n  { value: 'both', label: 'Both', description: 'Return both metric and profile data' },\n];\n\nfunction getOptions(app?: CoreApp) {\n  if (app === CoreApp.Explore) {\n    return rangeOptions;\n  }\n  return rangeOptions.filter((option) => option.value !== 'both');\n}\n\n/**\n * Base on QueryOptionGroup component from grafana/ui but that is not available yet.\n */\nexport function QueryOptions({ query, onQueryTypeChange, app }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n  const options = getOptions(app);\n  const buttonStyles = useStyles2(clearButtonStyles);\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <Button className={cx(styles.header, buttonStyles)} onClick={toggleOpen} title=\"Click to edit options\">\n        <div className={styles.toggle}>\n          <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n        </div>\n        <h6 className={styles.title}>Options</h6>\n        {!isOpen && (\n          <div className={styles.description}>\n            <span>Type: {query.queryType}</span>\n          </div>\n        )}\n      </Button>\n      {isOpen && (\n        <div className={styles.body}>\n          <Field label={'Query Type'}>\n            <RadioButtonGroup options={options} value={query.queryType} onChange={onQueryTypeChange} />\n          </Field>\n        </div>\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    header: css({\n      display: 'flex',\n      cursor: 'pointer',\n      alignItems: 'baseline',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    toggle: css({\n      color: theme.colors.text.secondary,\n      marginRight: `${theme.spacing(1)}`,\n    }),\n  };\n};\n","import { defaults } from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { useMount } from 'react-use';\n\nimport { CoreApp, QueryEditorProps } from '@grafana/data';\nimport { ButtonCascader, CascaderOption } from '@grafana/ui';\n\nimport { defaultParcaDataQuery, defaultParcaQueryType, ParcaDataQuery as Parca } from '../dataquery.gen';\nimport { ParcaDataSource } from '../datasource';\nimport { ParcaDataSourceOptions, ProfileTypeMessage, Query } from '../types';\n\nimport { EditorRow } from './EditorRow';\nimport { EditorRows } from './EditorRows';\nimport { LabelsEditor } from './LabelsEditor';\nimport { QueryOptions } from './QueryOptions';\n\nexport type Props = QueryEditorProps<ParcaDataSource, Query, ParcaDataSourceOptions>;\n\nexport const defaultQuery: Partial<Parca> = {\n  ...defaultParcaDataQuery,\n  queryType: defaultParcaQueryType,\n};\n\nexport function QueryEditor(props: Props) {\n  const [profileTypes, setProfileTypes] = useState<ProfileTypeMessage[]>([]);\n\n  function onProfileTypeChange(value: string[], selectedOptions: CascaderOption[]) {\n    if (selectedOptions.length === 0) {\n      return;\n    }\n    const id = selectedOptions[selectedOptions.length - 1].value;\n    if (typeof id !== 'string') {\n      throw new Error('id is not string');\n    }\n    props.onChange({ ...props.query, profileTypeId: id });\n  }\n\n  function onLabelSelectorChange(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n  }\n\n  function handleRunQuery(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n    props.onRunQuery();\n  }\n\n  useMount(async () => {\n    const profileTypes = await props.datasource.getProfileTypes();\n    setProfileTypes(profileTypes);\n  });\n\n  // Turn profileTypes into cascader options\n  const cascaderOptions = useMemo(() => {\n    let mainTypes = new Map<string, CascaderOption>();\n    // Classify profile types by name then sample type.\n    for (let profileType of profileTypes) {\n      if (!mainTypes.has(profileType.name)) {\n        mainTypes.set(profileType.name, {\n          label: profileType.name,\n          value: profileType.ID,\n          children: [],\n        });\n      }\n      mainTypes.get(profileType.name)?.children?.push({\n        label: profileType.sample_type,\n        value: profileType.ID,\n      });\n    }\n    return Array.from(mainTypes.values());\n  }, [profileTypes]);\n\n  const selectedProfileName = useMemo(() => {\n    if (!profileTypes) {\n      return 'Loading';\n    }\n    const profile = profileTypes.find((type) => type.ID === props.query.profileTypeId);\n    if (!profile) {\n      return 'Select a profile type';\n    }\n\n    return profile.name + ' - ' + profile.sample_type;\n  }, [props.query.profileTypeId, profileTypes]);\n\n  let query = normalizeQuery(props.query, props.app);\n\n  return (\n    <EditorRows>\n      <EditorRow stackProps={{ wrap: false, gap: 1 }}>\n        <ButtonCascader onChange={onProfileTypeChange} options={cascaderOptions} buttonProps={{ variant: 'secondary' }}>\n          {selectedProfileName}\n        </ButtonCascader>\n        <LabelsEditor\n          value={query.labelSelector}\n          onChange={onLabelSelectorChange}\n          datasource={props.datasource}\n          onRunQuery={handleRunQuery}\n        />\n      </EditorRow>\n      <EditorRow>\n        <QueryOptions\n          query={query}\n          onQueryTypeChange={(val) => {\n            props.onChange({ ...query, queryType: val });\n          }}\n          app={props.app}\n        />\n      </EditorRow>\n    </EditorRows>\n  );\n}\n\nfunction normalizeQuery(query: Query, app?: CoreApp) {\n  let normalized = defaults(query, defaultQuery);\n  if (app !== CoreApp.Explore && normalized.queryType === 'both') {\n    // In dashboards and other places, we can't show both types of graphs at the same time.\n    // This will also be a default when having 'both' query and adding it from explore to dashboard\n    normalized.queryType = 'profile';\n  }\n  return normalized;\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport type ParcaQueryType = ('metrics' | 'profile' | 'both');\n\nexport const defaultParcaQueryType: ParcaQueryType = 'both';\n\nexport interface ParcaDataQuery extends common.DataQuery {\n  /**\n   * Specifies the query label selectors.\n   */\n  labelSelector: string;\n  /**\n   * Specifies the type of profile to query.\n   */\n  profileTypeId: string;\n}\n\nexport const defaultParcaDataQuery: Partial<ParcaDataQuery> = {\n  labelSelector: '{}',\n};\n","import { Observable, of } from 'rxjs';\n\nimport { DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { ParcaDataSourceOptions, Query, ProfileTypeMessage } from './types';\n\nexport class ParcaDataSource extends DataSourceWithBackend<Query, ParcaDataSourceOptions> {\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<ParcaDataSourceOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<Query>): Observable<DataQueryResponse> {\n    if (!request.targets.every((q) => q.profileTypeId)) {\n      // When changing data source in explore, firs query can be sent without filled in profileTypeId\n      return of({ data: [] });\n    }\n\n    return super.query(request);\n  }\n\n  applyTemplateVariables(query: Query, scopedVars: ScopedVars): Query {\n    return {\n      ...query,\n      labelSelector: this.templateSrv.replace(query.labelSelector ?? '', scopedVars),\n    };\n  }\n\n  async getProfileTypes(): Promise<ProfileTypeMessage[]> {\n    return await super.getResource('profileTypes');\n  }\n\n  async getLabelNames(): Promise<string[]> {\n    return await super.getResource('labelNames');\n  }\n\n  async getLabelValues(labelName: string): Promise<string[]> {\n    return await super.getResource('labelValues', { label: labelName });\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor/QueryEditor';\nimport { ParcaDataSource } from './datasource';\nimport { Query, ParcaDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<ParcaDataSource, Query, ParcaDataSourceOptions>(ParcaDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataSourceHttpSettings } from '@grafana/ui';\n\nimport { ParcaDataSourceOptions } from './types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<ParcaDataSourceOptions> {}\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:7070'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n      />\n    </>\n  );\n};\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__89__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__959__","__WEBPACK_EXTERNAL_MODULE__269__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","fn","effect","useEffect","Stack","props","styles","useStyles2","getStyles","div","className","root","children","theme","css","display","flexDirection","direction","flexWrap","wrap","alignItems","gap","spacing","flexGrow","EditorRow","stackProps","padding","backgroundColor","colors","background","secondary","borderRadius","shape","radius","default","EditorRows","languageDefinition","id","extensions","aliases","mimetypes","def","language","ignoreCase","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","integersuffix","floatsuffix","tokenizer","include","cases","string_double","string_single","clauses","whitespace","languageConfiguration","wordPattern","brackets","autoClosingPairs","open","close","surroundingPairs","folding","CompletionProvider","init","names","datasource","getLabelNames","labels","reduce","acc","name","provideCompletionItems","model","position","this","editor","getModel","suggestions","range","offset","monaco","word","getWordAtPosition","Range","lift","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","fromPositions","positionClone","column","getOffsetAt","getRangeAndOffset","situation","text","type","matches","matchAll","labelPairsRegex","existingLabels","Array","from","match","_","push","matchLabelValue","substring","inLabelValueRegex","labelName","betweenQuotes","otherLabels","inLabelNameRegex","getSituation","getValue","getCompletions","then","completionItems","maxIndexDigits","length","toString","map","item","index","kind","getMonacoCompletionItemKind","label","insertText","sortText","padStart","keys","values","getLabelValues","val","Error","constructor","triggerCharacters","languages","CompletionItemKind","Enum","EnumMember","labelNameRegex","labelValueRegex","RegExp","source","LabelsEditor","setupAutocompleteFn","autocompleteDisposeFun","useRef","current","provider","dispose","registerCompletionItemProvider","langId","useAutocomplete","onRunQueryRef","onRunQuery","ref","containerRef","wrapper","CodeEditor","onBlur","onChange","containerStyles","queryField","monacoOptions","fontSize","lineNumbers","overviewRulerLanes","renderLineHighlight","scrollbar","vertical","verticalScrollbarSize","horizontal","horizontalScrollbarSize","scrollBeyondLastLine","wordWrap","top","bottom","onBeforeEditorMount","ensureParcaQL","onEditorDidMount","updateElementHeight","containerDiv","pixelHeight","getContentHeight","style","height","EDITOR_HEIGHT_OFFSET","width","pixelWidth","clientWidth","layout","onDidContentSizeChange","addCommand","KeyMod","Shift","KeyCode","Enter","parcaqlSetupDone","register","setMonarchTokensProvider","setLanguageConfiguration","toggleReducer","state","nextValue","rangeOptions","description","QueryOptions","query","onQueryTypeChange","app","isOpen","toggleOpen","initialValue","useReducer","options","CoreApp","Explore","filter","option","getOptions","buttonStyles","clearButtonStyles","Button","cx","header","onClick","title","toggle","Icon","h6","span","queryType","body","Field","RadioButtonGroup","switchLabel","color","cursor","typography","bodySmall","primary","emphasize","overflow","fontWeight","fontWeightMedium","margin","paddingLeft","paddingTop","marginRight","defaultQuery","labelSelector","defaultParcaDataQuery","ParcaDataSource","DataSourceWithBackend","request","targets","every","q","profileTypeId","super","of","data","applyTemplateVariables","scopedVars","templateSrv","replace","getProfileTypes","instanceSettings","getTemplateSrv","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","secureSocksDSProxyEnabled","config","setQueryEditor","profileTypes","setProfileTypes","useState","useMount","cascaderOptions","useMemo","mainTypes","Map","profileType","has","set","ID","sample_type","selectedProfileName","profile","find","normalized","defaults","normalizeQuery","ButtonCascader","selectedOptions","buttonProps","variant"],"sourceRoot":""}