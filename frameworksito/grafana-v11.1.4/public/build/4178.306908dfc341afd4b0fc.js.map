{"version":3,"file":"4178.306908dfc341afd4b0fc.js","mappings":"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CE,SAAU,oBACV,YAAa,0CACf,EACA,CACE,SAAU,eACV,YAAa,6BACf,EACA,CACE,SAAU,kCACV,YAAa,mDACf,EACA,CACE,SAAU,0BACV,YAAa,wFACf,EACA,CACE,SAAU,kCACV,YAAa,oCACf,EACA,CACE,SAAU,iCACV,YAAa,uEACf,EACA,CACE,SAAU,8CACV,YAAa,uFACf,EACA,CACE,SAAU,0BACV,YAAa,iDACf,EACA,CACE,SAAU,kBACV,YAAa,4EACf,EACA,CACE,SAAU,mBACV,YAAa,mDACf,EACA,CACE,SAAU,kBACV,YAAa,mBACf,EACA,CACE,SAAU,0CACV,YAAa,mDACf,EACA,CACE,SAAU,kCACV,YAAa,uDACf,CACF,EAEaC,GAAmC,CAC9C,CACE,SAAU,mCACV,YACE,8GACJ,EACA,CACE,SAAU,uBACV,YAAa,uDACf,EACA,CACE,SAAU,uCACV,YACE,wHACJ,EACA,CACE,SAAU,4BACV,YAAa,+EACf,EACA,CACE,SAAU,iCACV,YAAa,4EACf,EACA,CACE,SAAU,2BACV,YAAa,uDACf,EACA,CACE,SAAU,oCACV,YAAa,0FACf,EACA,CACE,SAAU,wBACV,YAAa,8DACf,EACA,CACE,SAAU,mCACV,YACE,kIACJ,EACA,CACE,SAAU,2CACV,YAAa,kEACf,EACA,CACE,SAAU,wDACV,YAAa,iDACf,EACA,CACE,SAAU,8CACV,YAAa,qEACf,EACA,CACE,SAAU,4BACV,YAAa,mEACf,EACA,CACE,SAAU,4BACV,YAAa,8EACf,EACA,CACE,SAAU,qCACV,YAAa,iDACf,CACF,EAEaC,GAAqC,CAChD,CACE,SAAU,2DACV,YACE,4KACJ,EACA,CACE,SAAU,gDACV,YAAa,6DACf,EACA,CACE,SAAU,2DACV,YAAa,6FACf,EACA,CACE,SAAU,oCACV,YAAa,6BACf,CACF,EAEaC,GAAiC,CAC5C,CACE,SAAU,yBACV,YAAa,sDACf,EACA,CACE,SAAU,kBACV,YAAa,4DACf,EACA,CACE,SAAU,0BACV,YAAa,kGACf,EACA,CACE,SAAU,kBACV,YAAa,uDACf,EA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","sources":["webpack://grafana/./node_modules/@grafana/experimental/dist/esm/QueryEditor/EditorHeader.js","webpack://grafana/./node_modules/@grafana/experimental/dist/esm/QueryEditor/FlexItem.js","webpack://grafana/./packages/grafana-prometheus/src/gcopypaste/app/core/utils/query.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/QueryPattern.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/QueryPatternsModal.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/hooks/useFlag.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/types.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/QueryEditorModeToggle.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/QueryHeaderSwitch.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/state.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationInfoButton.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationHeader.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationParamEditor.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationEditor.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationList.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationsEditorRow.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/QueryBuilderHints.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/NestedQuery.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/promQail/QuerySuggestionItem.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/promQail/types.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/promQail/QuerySuggestionContainer.tsx","webpack://grafana/./node_modules/@grafana/experimental/dist/esm/llms/vector.js","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/promQail/prompts.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/promQail/state/state.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/promQail/state/templates.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/promQail/state/helpers.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/promQail/PromQail.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/promQail/QueryAssistantButton.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryBuilder.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/QueryPreview.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryBuilderContainer.tsx","webpack://grafana/./packages/grafana-prometheus/src/components/PromExemplarField.tsx","webpack://grafana/./packages/grafana-prometheus/src/components/PromExploreExtraField.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/QueryOptionGroup.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryLegendEditor.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryBuilderOptions.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryCodeEditorAutocompleteInfo.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryEditorSelector.tsx","webpack://grafana/./packages/grafana-prometheus/src/components/PromQueryEditorForAlerting.tsx","webpack://grafana/./packages/grafana-prometheus/src/components/PromQueryEditorByApp.tsx","webpack://grafana/./packages/grafana-prometheus/src/components/PromCheatSheet.tsx","webpack://grafana/./packages/grafana-prometheus/src/configuration/AlertingSettingsOverhaul.tsx","webpack://grafana/./packages/grafana-prometheus/src/configuration/ExemplarSetting.tsx","webpack://grafana/./packages/grafana-prometheus/src/configuration/ExemplarsSettings.tsx","webpack://grafana/./packages/grafana-prometheus/src/configuration/PromFlavorVersions.ts","webpack://grafana/./packages/grafana-prometheus/src/configuration/PromSettings.tsx","webpack://grafana/./node_modules/@grafana/azure-sdk/dist/esm/clouds.js","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentials.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsConfig.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureAuthSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/DataSourceHttpSettingsOverhaulPackage.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ConfigEditorPackage.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/module.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\nimport { useStyles2 } from '@grafana/ui';\n\nconst EditorHeader = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return /* @__PURE__ */ React.createElement(\"div\", { className: styles.root }, children);\n};\nconst getStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    gap: theme.spacing(3),\n    minHeight: theme.spacing(4)\n  })\n});\n\nexport { EditorHeader };\n//# sourceMappingURL=EditorHeader.js.map\n","import React from 'react';\n\nconst FlexItem = ({ grow, shrink }) => {\n  return /* @__PURE__ */ React.createElement(\"div\", { style: { display: \"block\", flexGrow: grow, flexShrink: shrink } });\n};\n\nexport { FlexItem };\n//# sourceMappingURL=FlexItem.js.map\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/core/utils/query.ts\nimport { DataQuery } from '@grafana/data';\n\nexport const getNextRefIdChar = (queries: DataQuery[]): string => {\n  for (let num = 0; ; num++) {\n    const refId = getRefId(num);\n    if (!queries.some((query) => query.refId === refId)) {\n      return refId;\n    }\n  }\n};\n\nfunction getRefId(num: number): string {\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  if (num < letters.length) {\n    return letters[num];\n  } else {\n    return getRefId(Math.floor(num / letters.length) - 1) + letters[num % letters.length];\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/QueryPattern.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\n\nimport promqlGrammar from '../promql';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { RawQuery } from './shared/RawQuery';\nimport { PromQueryPattern } from './types';\n\ntype Props = {\n  pattern: PromQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean | string;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: PromQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          aria-label={`${pattern.name} raw query`}\n          query={promQueryModeller.renderQuery({\n            labels: [],\n            operations: pattern.operations,\n            binaryQueries: pattern.binaryQueries,\n          })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            aria-label=\"use this query button\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to apply this query pattern\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either apply this query pattern or create a new query'\n                  : 'this query pattern will be applied to your current query'\n              }.`}\n            </div>\n            <Button size=\"sm\" aria-label=\"back button\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              aria-label=\"apply query starter button\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Apply query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                aria-label=\"create new query button\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      width: '49.5%',\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    rawQueryContainer: css({\n      flexGrow: 1,\n    }),\n    rawQuery: css({\n      backgroundColor: theme.colors.background.primary,\n      padding: theme.spacing(1),\n      marginTop: theme.spacing(1),\n    }),\n    spacing: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/QueryPatternsModal.tsx\nimport { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\n\nimport { getNextRefIdChar } from '../gcopypaste/app/core/utils/query';\nimport { PromQuery } from '../types';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { QueryPattern } from './QueryPattern';\nimport { buildVisualQueryFromString } from './parsing';\nimport { PromQueryPattern, PromQueryPatternType } from './types';\n\ntype Props = {\n  isOpen: boolean;\n  query: PromQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: PromQuery) => void;\n  onAddQuery?: (query: PromQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(() => {\n    const visualQuery = buildVisualQueryFromString(query.expr ?? '');\n    // has anything entered in the query, metric, labels, operations, or binary queries\n    const hasOperations = visualQuery.query.operations.length > 0,\n      hasMetric = visualQuery.query.metric,\n      hasLabels = visualQuery.query.labels.length > 0,\n      hasBinaryQueries = visualQuery.query.binaryQueries ? visualQuery.query.binaryQueries.length > 0 : false;\n\n    return hasOperations || hasMetric || hasLabels || hasBinaryQueries;\n  }, [query.expr]);\n\n  const onPatternSelect = (pattern: PromQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_prom_kickstart_your_query_selected', {\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    visualQuery.query.binaryQueries = pattern.binaryQueries;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefIdChar(queries ?? [query]),\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal aria-label=\"Kick start your query modal\" isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(PromQueryPatternType).map((patternType) => {\n        return (\n          <Collapse\n            aria-label={`open and close ${patternType} query starter card`}\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={openTabs.includes(patternType)}\n            collapsible={true}\n            onToggle={() =>\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              )\n            }\n          >\n            <div className={styles.cardsContainer}>\n              {promQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button aria-label=\"close kick start your query modal\" variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css({\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between',\n    }),\n    spacing: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/hooks/useFlag.ts\nimport { useCallback, useState } from 'react';\n\nimport store from '../../gcopypaste/app/core/store';\n\nexport const promQueryEditorExplainKey = 'PrometheusQueryEditorExplainDefault';\n\nexport type QueryEditorFlags = typeof promQueryEditorExplainKey;\n\nfunction getFlagValue(key: QueryEditorFlags, defaultValue = false): boolean {\n  const val = store.get(key);\n  return val === undefined ? defaultValue : Boolean(parseInt(val, 10));\n}\n\nfunction setFlagValue(key: QueryEditorFlags, value: boolean) {\n  store.set(key, value ? '1' : '0');\n}\n\ntype UseFlagHookReturnType = { flag: boolean; setFlag: (val: boolean) => void };\n\n/**\n *\n * Use and store value of explain switch in local storage.\n * Needs to be a hook with local state to trigger re-renders.\n */\nexport function useFlag(key: QueryEditorFlags, defaultValue = false): UseFlagHookReturnType {\n  const [flag, updateFlag] = useState(getFlagValue(key, defaultValue));\n  const setter = useCallback(\n    (value: boolean) => {\n      setFlagValue(key, value);\n      updateFlag(value);\n    },\n    [key]\n  );\n\n  return { flag, setFlag: setter };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/types.ts\n/**\n * Shared types that can be reused by Loki and other data sources\n */\nimport { ComponentType } from 'react';\n\nimport { DataSourceApi, RegistryItem, SelectableValue, TimeRange } from '@grafana/data';\n\nexport interface QueryBuilderLabelFilter {\n  label: string;\n  op: string;\n  value: string;\n}\n\nexport interface QueryBuilderOperation {\n  id: string;\n  params: QueryBuilderOperationParamValue[];\n}\n\nexport interface QueryWithOperations {\n  operations: QueryBuilderOperation[];\n}\n\nexport interface QueryBuilderOperationDef<T = any> extends RegistryItem {\n  documentation?: string;\n  params: QueryBuilderOperationParamDef[];\n  defaultParams: QueryBuilderOperationParamValue[];\n  category: string;\n  hideFromList?: boolean;\n  alternativesKey?: string;\n  /** Can be used to control operation placement when adding a new operations, lower are placed first */\n  orderRank?: number;\n  renderer: QueryBuilderOperationRenderer;\n  addOperationHandler: QueryBuilderAddOperationHandler<T>;\n  paramChangedHandler?: QueryBuilderOnParamChangedHandler;\n  explainHandler?: QueryBuilderExplainOperationHandler;\n  changeTypeHandler?: (op: QueryBuilderOperation, newDef: QueryBuilderOperationDef<T>) => QueryBuilderOperation;\n}\n\nexport type QueryBuilderAddOperationHandler<T> = (\n  def: QueryBuilderOperationDef,\n  query: T,\n  modeller: VisualQueryModeller\n) => T;\n\nexport type QueryBuilderExplainOperationHandler = (op: QueryBuilderOperation, def?: QueryBuilderOperationDef) => string;\n\nexport type QueryBuilderOnParamChangedHandler = (\n  index: number,\n  operation: QueryBuilderOperation,\n  operationDef: QueryBuilderOperationDef\n) => QueryBuilderOperation;\n\nexport type QueryBuilderOperationRenderer = (\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) => string;\n\nexport type QueryBuilderOperationParamValue = string | number | boolean;\n\nexport interface QueryBuilderOperationParamDef {\n  name: string;\n  type: 'string' | 'number' | 'boolean';\n  options?: string[] | number[] | Array<SelectableValue<string>>;\n  hideName?: boolean;\n  restParam?: boolean;\n  optional?: boolean;\n  placeholder?: string;\n  description?: string;\n  minWidth?: number;\n  editor?: ComponentType<QueryBuilderOperationParamEditorProps>;\n  runQueryOnEnter?: boolean;\n}\n\nexport interface QueryBuilderOperationEditorProps {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\nexport interface QueryBuilderOperationParamEditorProps {\n  value?: QueryBuilderOperationParamValue;\n  paramDef: QueryBuilderOperationParamDef;\n  /** Parameter index */\n  index: number;\n  operation: QueryBuilderOperation;\n  operationId: string;\n  query: any;\n  datasource: DataSourceApi;\n  timeRange?: TimeRange;\n  onChange: (index: number, value: QueryBuilderOperationParamValue) => void;\n  onRunQuery: () => void;\n}\n\nexport enum QueryEditorMode {\n  Code = 'code',\n  Builder = 'builder',\n}\n\nexport interface VisualQueryModeller {\n  getOperationsForCategory(category: string): QueryBuilderOperationDef[];\n\n  getAlternativeOperations(key: string): QueryBuilderOperationDef[];\n\n  getCategories(): string[];\n\n  getOperationDef(id: string): QueryBuilderOperationDef | undefined;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle.tsx\nimport React from 'react';\n\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { QueryEditorMode } from './types';\n\nexport interface Props {\n  mode: QueryEditorMode;\n  onChange: (mode: QueryEditorMode) => void;\n}\n\nconst editorModes = [\n  { label: 'Builder', value: QueryEditorMode.Builder },\n  { label: 'Code', value: QueryEditorMode.Code },\n];\n\nexport function QueryEditorModeToggle({ mode, onChange }: Props) {\n  return (\n    <div data-testid={'QueryEditorModeToggle'}>\n      <RadioButtonGroup options={editorModes} size=\"sm\" value={mode} onChange={onChange} />\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch.tsx\nimport { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { HTMLProps, useRef } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Switch, useStyles2, Stack } from '@grafana/ui';\n\nexport interface Props extends Omit<HTMLProps<HTMLInputElement>, 'value' | 'ref'> {\n  value?: boolean;\n  label: string;\n}\n\nexport function QueryHeaderSwitch({ label, ...inputProps }: Props) {\n  const dashedLabel = label.replace(' ', '-');\n  const switchIdRef = useRef(uniqueId(`switch-${dashedLabel}`));\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={1}>\n      <label htmlFor={switchIdRef.current} className={styles.switchLabel}>\n        {label}\n      </label>\n      <Switch {...inputProps} id={switchIdRef.current} />\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/state.ts\nimport { CoreApp } from '@grafana/data';\n\nimport store from '../gcopypaste/app/core/store';\nimport { LegendFormatMode, PromQuery } from '../types';\n\nimport { QueryEditorMode } from './shared/types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\n\nexport function changeEditorMode(query: PromQuery, editorMode: QueryEditorMode, onChange: (query: PromQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nfunction getDefaultEditorMode(expr: string, defaultEditor: QueryEditorMode = QueryEditorMode.Builder): QueryEditorMode {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value: QueryEditorMode = store.get(queryEditorModeDefaultLocalStorageKey);\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n      return value;\n    default:\n      return defaultEditor;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(\n  query: PromQuery & { expr?: string },\n  app: CoreApp | undefined,\n  defaultEditor?: QueryEditorMode\n): PromQuery {\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr, defaultEditor) };\n  }\n\n  // default query expr is now empty string, set in getDefaultQuery\n  // While expr is required in the types, it is not always defined at runtime, so we need to check for undefined and default to an empty string to prevent runtime errors\n  if (!query.expr) {\n    result = { ...result, expr: '', legendFormat: LegendFormatMode.Auto };\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = { ...result, range: true };\n\n    // In explore we default to both instant & range\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  // Unified Alerting does not support \"both\" for query type – fall back to \"range\".\n  const isBothInstantAndRange = query.instant && query.range;\n  if (app === CoreApp.UnifiedAlerting && isBothInstantAndRange) {\n    result = { ...result, instant: false, range: true };\n  }\n\n  return result;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationInfoButton.tsx\nimport { css } from '@emotion/css';\nimport {\n  autoUpdate,\n  flip,\n  offset,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useInteractions,\n} from '@floating-ui/react';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, renderMarkdown } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Portal, useStyles2 } from '@grafana/ui';\n\nimport { QueryBuilderOperation, QueryBuilderOperationDef } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n}\n\nexport const OperationInfoButton = React.memo<Props>(({ def, operation }) => {\n  const styles = useStyles2(getStyles);\n  const [show, setShow] = useState(false);\n\n  // the order of middleware is important!\n  const middleware = [\n    offset(16),\n    flip({\n      fallbackAxisSideDirection: 'end',\n      // see https://floating-ui.com/docs/flip#combining-with-shift\n      crossAxis: false,\n      boundary: document.body,\n    }),\n    shift(),\n  ];\n\n  const { context, refs, floatingStyles } = useFloating({\n    open: show,\n    placement: 'top',\n    onOpenChange: setShow,\n    middleware,\n    whileElementsMounted: autoUpdate,\n  });\n\n  const click = useClick(context);\n  const dismiss = useDismiss(context);\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, click]);\n\n  return (\n    <>\n      <Button\n        title=\"Click to show description\"\n        ref={refs.setReference}\n        icon=\"info-circle\"\n        size=\"sm\"\n        variant=\"secondary\"\n        fill=\"text\"\n        {...getReferenceProps()}\n      />\n      {show && (\n        <Portal>\n          <div ref={refs.setFloating} style={floatingStyles} {...getFloatingProps()} className={styles.docBox}>\n            <div className={styles.docBoxHeader}>\n              <span>{def.renderer(operation, def, '<expr>')}</span>\n              <FlexItem grow={1} />\n              <Button\n                icon=\"times\"\n                onClick={() => setShow(false)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n            <div\n              className={styles.docBoxBody}\n              dangerouslySetInnerHTML={{ __html: getOperationDocs(def, operation) }}\n            ></div>\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n});\n\nOperationInfoButton.displayName = 'OperationDocs';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    docBox: css({\n      overflow: 'hidden',\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.strong}`,\n      boxShadow: theme.shadows.z3,\n      maxWidth: '600px',\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.radius.default,\n      zIndex: theme.zIndex.tooltip,\n    }),\n    docBoxHeader: css({\n      fontSize: theme.typography.h5.fontSize,\n      fontFamily: theme.typography.fontFamilyMonospace,\n      paddingBottom: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    docBoxBody: css({\n      // The markdown paragraph has a marginBottom this removes it\n      marginBottom: theme.spacing(-1),\n      color: theme.colors.text.secondary,\n    }),\n  };\n};\n\nfunction getOperationDocs(def: QueryBuilderOperationDef, op: QueryBuilderOperation): string {\n  return renderMarkdown(def.explainHandler ? def.explainHandler(op, def) : def.documentation ?? 'no docs');\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationHeader.tsx\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { DraggableProvided } from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Select, useStyles2 } from '@grafana/ui';\n\nimport { OperationInfoButton } from './OperationInfoButton';\nimport { QueryBuilderOperation, QueryBuilderOperationDef, VisualQueryModeller } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n  index: number;\n  queryModeller: VisualQueryModeller;\n  dragHandleProps?: DraggableProvided['dragHandleProps'];\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\ninterface State {\n  isOpen?: boolean;\n  alternatives?: Array<SelectableValue<QueryBuilderOperationDef>>;\n}\n\nexport const OperationHeader = React.memo<Props>(\n  ({ operation, def, index, onChange, onRemove, queryModeller, dragHandleProps }) => {\n    const styles = useStyles2(getStyles);\n    const [state, setState] = useState<State>({});\n\n    const onToggleSwitcher = () => {\n      if (state.isOpen) {\n        setState({ ...state, isOpen: false });\n      } else {\n        const alternatives = queryModeller\n          .getAlternativeOperations(def.alternativesKey!)\n          .map((alt) => ({ label: alt.name, value: alt }));\n        setState({ isOpen: true, alternatives });\n      }\n    };\n\n    return (\n      <div className={styles.header}>\n        {!state.isOpen && (\n          <>\n            <div {...dragHandleProps}>{def.name ?? def.id}</div>\n            <FlexItem grow={1} />\n            <div className={`${styles.operationHeaderButtons} operation-header-show-on-hover`}>\n              <Button\n                icon=\"angle-down\"\n                size=\"sm\"\n                onClick={onToggleSwitcher}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Click to view alternative operations\"\n              />\n              <OperationInfoButton def={def} operation={operation} />\n              <Button\n                icon=\"times\"\n                size=\"sm\"\n                onClick={() => onRemove(index)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n          </>\n        )}\n        {state.isOpen && (\n          <div className={styles.selectWrapper}>\n            <Select\n              autoFocus\n              openMenuOnFocus\n              placeholder=\"Replace with\"\n              options={state.alternatives}\n              isOpen={true}\n              onCloseMenu={onToggleSwitcher}\n              onChange={(value) => {\n                if (value.value) {\n                  // Operation should exist if it is selectable\n                  const newDef = queryModeller.getOperationDef(value.value.id)!;\n\n                  // copy default params, and override with all current params\n                  const newParams = [...newDef.defaultParams];\n                  for (let i = 0; i < Math.min(operation.params.length, newParams.length); i++) {\n                    if (newDef.params[i].type === def.params[i].type) {\n                      newParams[i] = operation.params[i];\n                    }\n                  }\n\n                  const changedOp = { ...operation, params: newParams, id: value.value.id };\n                  onChange(index, def.changeTypeHandler ? def.changeTypeHandler(changedOp, newDef) : changedOp);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nOperationHeader.displayName = 'OperationHeader';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css({\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    operationHeaderButtons: css({\n      opacity: 1,\n    }),\n    selectWrapper: css({\n      paddingRight: theme.spacing(2),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationParamEditor.tsx\nimport { css } from '@emotion/css';\nimport React, { ComponentType } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { AutoSizeInput, Button, Checkbox, Select, useStyles2, Stack } from '@grafana/ui';\n\nimport { getOperationParamId } from '../operationUtils';\n\nimport { QueryBuilderOperationParamDef, QueryBuilderOperationParamEditorProps } from './types';\n\nexport function getOperationParamEditor(\n  paramDef: QueryBuilderOperationParamDef\n): ComponentType<QueryBuilderOperationParamEditorProps> {\n  if (paramDef.editor) {\n    return paramDef.editor;\n  }\n\n  if (paramDef.options) {\n    return SelectInputParamEditor;\n  }\n\n  switch (paramDef.type) {\n    case 'boolean':\n      return BoolInputParamEditor;\n    case 'number':\n    case 'string':\n    default:\n      return SimpleInputParamEditor;\n  }\n}\n\nfunction SimpleInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <AutoSizeInput\n      id={getOperationParamId(props.operationId, props.index)}\n      defaultValue={props.value?.toString()}\n      minWidth={props.paramDef.minWidth}\n      placeholder={props.paramDef.placeholder}\n      title={props.paramDef.description}\n      maxWidth={(props.paramDef.minWidth || 20) * 3}\n      onCommitChange={(evt) => {\n        props.onChange(props.index, evt.currentTarget.value);\n        if (props.paramDef.runQueryOnEnter && evt.type === 'keydown') {\n          props.onRunQuery();\n        }\n      }}\n    />\n  );\n}\n\nfunction BoolInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <Checkbox\n      id={getOperationParamId(props.operationId, props.index)}\n      value={Boolean(props.value)}\n      onChange={(evt) => props.onChange(props.index, evt.currentTarget.checked)}\n    />\n  );\n}\n\nfunction SelectInputParamEditor({\n  paramDef,\n  value,\n  index,\n  operationId,\n  onChange,\n}: QueryBuilderOperationParamEditorProps) {\n  const styles = useStyles2(getStyles);\n  let selectOptions = paramDef.options as SelectableValue[];\n\n  if (!selectOptions[0]?.label) {\n    selectOptions = paramDef.options!.map((option) => ({\n      label: option.toString(),\n      value: option,\n    }));\n  }\n\n  let valueOption = selectOptions.find((x) => x.value === value) ?? toOption(value as string);\n\n  // If we have optional options param and don't have value, we want to render button with which we add optional options.\n  // This makes it easier to understand what needs to be selected and what is optional.\n  if (!value && paramDef.optional) {\n    return (\n      <div className={styles.optionalParam}>\n        <Button\n          size=\"sm\"\n          variant=\"secondary\"\n          title={`Add ${paramDef.name}`}\n          icon=\"plus\"\n          onClick={() => onChange(index, selectOptions[0].value)}\n        >\n          {paramDef.name}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n      <Select\n        id={getOperationParamId(operationId, index)}\n        value={valueOption}\n        options={selectOptions}\n        placeholder={paramDef.placeholder}\n        allowCustomValue={true}\n        onChange={(value) => onChange(index, value.value!)}\n        width={paramDef.minWidth || 'auto'}\n      />\n      {paramDef.optional && (\n        <Button\n          data-testid={`operations.${index}.remove-param`}\n          size=\"sm\"\n          fill=\"text\"\n          icon=\"times\"\n          variant=\"secondary\"\n          title={`Remove ${paramDef.name}`}\n          onClick={() => onChange(index, '')}\n        />\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    optionalParam: css({\n      marginTop: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationEditor.tsx\nimport { css, cx } from '@emotion/css';\nimport React, { useEffect, useId, useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { DataSourceApi, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { Button, Icon, Stack, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { getOperationParamId } from '../operationUtils';\n\nimport { OperationHeader } from './OperationHeader';\nimport { getOperationParamEditor } from './OperationParamEditor';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  QueryBuilderOperationParamValue,\n  VisualQueryModeller,\n} from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  flash?: boolean;\n  highlight?: boolean;\n  timeRange?: TimeRange;\n}\n\nexport function OperationEditor({\n  operation,\n  index,\n  onRemove,\n  onChange,\n  onRunQuery,\n  queryModeller,\n  query,\n  datasource,\n  flash,\n  highlight,\n  timeRange,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const def = queryModeller.getOperationDef(operation.id);\n  const shouldFlash = useFlash(flash);\n  const id = useId();\n\n  if (!def) {\n    return <span>Operation {operation.id} not found</span>;\n  }\n\n  const onParamValueChanged = (paramIdx: number, value: QueryBuilderOperationParamValue) => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params] };\n    update.params[paramIdx] = value;\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const onAddRestParam = () => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params, ''] };\n    callParamChangedThenOnChange(def, update, index, operation.params.length, onChange);\n  };\n\n  const onRemoveRestParam = (paramIdx: number) => {\n    const update: QueryBuilderOperation = {\n      ...operation,\n      params: [...operation.params.slice(0, paramIdx), ...operation.params.slice(paramIdx + 1)],\n    };\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const operationElements: React.ReactNode[] = [];\n\n  for (let paramIndex = 0; paramIndex < operation.params.length; paramIndex++) {\n    const paramDef = def.params[Math.min(def.params.length - 1, paramIndex)];\n    const Editor = getOperationParamEditor(paramDef);\n\n    operationElements.push(\n      <div className={styles.paramRow} key={`${paramIndex}-1`}>\n        {!paramDef.hideName && (\n          <div className={styles.paramName}>\n            <label htmlFor={getOperationParamId(id, paramIndex)}>{paramDef.name}</label>\n            {paramDef.description && (\n              <Tooltip placement=\"top\" content={paramDef.description} theme=\"info\">\n                <Icon name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n              </Tooltip>\n            )}\n          </div>\n        )}\n        <div className={styles.paramValue}>\n          <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n            <Editor\n              index={paramIndex}\n              paramDef={paramDef}\n              value={operation.params[paramIndex]}\n              operation={operation}\n              operationId={id}\n              onChange={onParamValueChanged}\n              onRunQuery={onRunQuery}\n              query={query}\n              datasource={datasource}\n              timeRange={timeRange}\n            />\n            {paramDef.restParam && (operation.params.length > def.params.length || paramDef.optional) && (\n              <Button\n                data-testid={`operations.${index}.remove-rest-param`}\n                size=\"sm\"\n                fill=\"text\"\n                icon=\"times\"\n                variant=\"secondary\"\n                title={`Remove ${paramDef.name}`}\n                onClick={() => onRemoveRestParam(paramIndex)}\n              />\n            )}\n          </Stack>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle adding button for rest params\n  let restParam: React.ReactNode | undefined;\n  if (def.params.length > 0) {\n    const lastParamDef = def.params[def.params.length - 1];\n    if (lastParamDef.restParam) {\n      restParam = renderAddRestParamButton(lastParamDef, onAddRestParam, index, operation.params.length, styles);\n    }\n  }\n\n  return (\n    <Draggable draggableId={`operation-${index}`} index={index}>\n      {(provided) => (\n        <div\n          className={cx(styles.card, (shouldFlash || highlight) && styles.cardHighlight)}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          data-testid={`operations.${index}.wrapper`}\n        >\n          <OperationHeader\n            operation={operation}\n            dragHandleProps={provided.dragHandleProps}\n            def={def}\n            index={index}\n            onChange={onChange}\n            onRemove={onRemove}\n            queryModeller={queryModeller}\n          />\n          <div className={styles.body}>{operationElements}</div>\n          {restParam}\n          {index < query.operations.length - 1 && (\n            <div className={styles.arrow}>\n              <div className={styles.arrowLine} />\n              <div className={styles.arrowArrow} />\n            </div>\n          )}\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\n/**\n * When flash is switched on makes sure it is switched of right away, so we just flash the highlight and then fade\n * out.\n * @param flash\n */\nfunction useFlash(flash?: boolean) {\n  const [keepFlash, setKeepFlash] = useState(true);\n  useEffect(() => {\n    let t: ReturnType<typeof setTimeout>;\n    if (flash) {\n      t = setTimeout(() => {\n        setKeepFlash(false);\n      }, 1000);\n    } else {\n      setKeepFlash(true);\n    }\n\n    return () => clearTimeout(t);\n  }, [flash]);\n\n  return keepFlash && flash;\n}\n\nfunction renderAddRestParamButton(\n  paramDef: QueryBuilderOperationParamDef,\n  onAddRestParam: () => void,\n  operationIndex: number,\n  paramIndex: number,\n  styles: OperationEditorStyles\n) {\n  return (\n    <div className={styles.restParam} key={`${paramIndex}-2`}>\n      <Button\n        size=\"sm\"\n        icon=\"plus\"\n        title={`Add ${paramDef.name}`.trimEnd()}\n        variant=\"secondary\"\n        onClick={onAddRestParam}\n        data-testid={`operations.${operationIndex}.add-rest-param`}\n      >\n        {paramDef.name}\n      </Button>\n    </div>\n  );\n}\n\nfunction callParamChangedThenOnChange(\n  def: QueryBuilderOperationDef,\n  operation: QueryBuilderOperation,\n  operationIndex: number,\n  paramIndex: number,\n  onChange: (index: number, update: QueryBuilderOperation) => void\n) {\n  if (def.paramChangedHandler) {\n    onChange(operationIndex, def.paramChangedHandler(paramIndex, operation, def));\n  } else {\n    onChange(operationIndex, operation);\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardWrapper: css({\n      alignItems: 'stretch',\n    }),\n    error: css({\n      marginBottom: theme.spacing(1),\n    }),\n    card: css({\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.medium}`,\n      cursor: 'grab',\n      borderRadius: theme.shape.radius.default,\n      marginBottom: theme.spacing(1),\n      position: 'relative',\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: 'all 0.5s ease-in 0s',\n      },\n      height: '100%',\n    }),\n    cardError: css({\n      boxShadow: `0px 0px 4px 0px ${theme.colors.warning.main}`,\n      border: `1px solid ${theme.colors.warning.main}`,\n    }),\n    cardHighlight: css({\n      boxShadow: `0px 0px 4px 0px ${theme.colors.primary.border}`,\n      border: `1px solid ${theme.colors.primary.border}`,\n    }),\n    infoIcon: css({\n      marginLeft: theme.spacing(0.5),\n      color: theme.colors.text.secondary,\n      ':hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    body: css({\n      margin: theme.spacing(1, 1, 0.5, 1),\n      display: 'table',\n    }),\n    paramRow: css({\n      label: 'paramRow',\n      display: 'table-row',\n      verticalAlign: 'middle',\n    }),\n    paramName: css({\n      display: 'table-cell',\n      padding: theme.spacing(0, 1, 0, 0),\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      verticalAlign: 'middle',\n      height: '32px',\n    }),\n    paramValue: css({\n      label: 'paramValue',\n      display: 'table-cell',\n      verticalAlign: 'middle',\n    }),\n    restParam: css({\n      padding: theme.spacing(0, 1, 1, 1),\n    }),\n    arrow: css({\n      position: 'absolute',\n      top: '0',\n      right: '-18px',\n      display: 'flex',\n    }),\n    arrowLine: css({\n      height: '2px',\n      width: '8px',\n      backgroundColor: theme.colors.border.strong,\n      position: 'relative',\n      top: '14px',\n    }),\n    arrowArrow: css({\n      width: 0,\n      height: 0,\n      borderTop: `5px solid transparent`,\n      borderBottom: `5px solid transparent`,\n      borderLeft: `7px solid ${theme.colors.border.strong}`,\n      position: 'relative',\n      top: '10px',\n    }),\n  };\n};\n\ntype OperationEditorStyles = ReturnType<typeof getStyles>;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationList.tsx\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { useMountedState, usePrevious } from 'react-use';\n\nimport { DataSourceApi, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { Button, Cascader, CascaderOption, useStyles2, Stack } from '@grafana/ui';\n\nimport { OperationEditor } from './OperationEditor';\nimport { QueryBuilderOperation, QueryWithOperations, VisualQueryModeller } from './types';\n\nexport interface Props<T extends QueryWithOperations> {\n  query: T;\n  datasource: DataSourceApi;\n  onChange: (query: T) => void;\n  onRunQuery: () => void;\n  queryModeller: VisualQueryModeller;\n  explainMode?: boolean;\n  highlightedOp?: QueryBuilderOperation;\n  timeRange?: TimeRange;\n}\n\nexport function OperationList<T extends QueryWithOperations>({\n  query,\n  datasource,\n  queryModeller,\n  onChange,\n  onRunQuery,\n  highlightedOp,\n  timeRange,\n}: Props<T>) {\n  const styles = useStyles2(getStyles);\n  const { operations } = query;\n\n  const opsToHighlight = useOperationsHighlight(operations);\n\n  const [cascaderOpen, setCascaderOpen] = useState(false);\n\n  const onOperationChange = (index: number, update: QueryBuilderOperation) => {\n    const updatedList = [...operations];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...operations.slice(0, index), ...operations.slice(index + 1)];\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const addOptions: CascaderOption[] = queryModeller.getCategories().map((category) => {\n    return {\n      value: category,\n      label: category,\n      items: queryModeller.getOperationsForCategory(category).map((operation) => ({\n        value: operation.id,\n        label: operation.name,\n        isLeaf: true,\n      })),\n    };\n  });\n\n  const onAddOperation = (value: string) => {\n    const operationDef = queryModeller.getOperationDef(value);\n    if (!operationDef) {\n      return;\n    }\n    onChange(operationDef.addOperationHandler(operationDef, query, queryModeller));\n    setCascaderOpen(false);\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedList = [...operations];\n    const element = updatedList[result.source.index];\n    updatedList.splice(result.source.index, 1);\n    updatedList.splice(result.destination.index, 0, element);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onCascaderBlur = () => {\n    setCascaderOpen(false);\n  };\n\n  return (\n    <Stack gap={1} direction=\"column\">\n      <Stack gap={1}>\n        {operations.length > 0 && (\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"sortable-field-mappings\" direction=\"horizontal\">\n              {(provided) => (\n                <div className={styles.operationList} ref={provided.innerRef} {...provided.droppableProps}>\n                  {operations.map((op, index) => {\n                    return (\n                      <OperationEditor\n                        key={op.id + JSON.stringify(op.params) + index}\n                        queryModeller={queryModeller}\n                        index={index}\n                        operation={op}\n                        query={query}\n                        datasource={datasource}\n                        onChange={onOperationChange}\n                        onRemove={onRemove}\n                        onRunQuery={onRunQuery}\n                        flash={opsToHighlight[index]}\n                        highlight={highlightedOp === op}\n                        timeRange={timeRange}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        )}\n        <div className={styles.addButton}>\n          {cascaderOpen ? (\n            <Cascader\n              options={addOptions}\n              onSelect={onAddOperation}\n              onBlur={onCascaderBlur}\n              autoFocus={true}\n              alwaysOpen={true}\n              hideActiveLevelLabel={true}\n              placeholder={'Search'}\n            />\n          ) : (\n            <Button icon={'plus'} variant={'secondary'} onClick={() => setCascaderOpen(true)} title={'Add operation'}>\n              Operations\n            </Button>\n          )}\n        </div>\n      </Stack>\n    </Stack>\n  );\n}\n\n/**\n * Returns indexes of operations that should be highlighted. We check the diff of operations added but at the same time\n * we want to highlight operations only after the initial render, so we check for mounted state and calculate the diff\n * only after.\n * @param operations\n */\nfunction useOperationsHighlight(operations: QueryBuilderOperation[]) {\n  const isMounted = useMountedState();\n  const prevOperations = usePrevious(operations);\n\n  if (!isMounted()) {\n    return operations.map(() => false);\n  }\n\n  if (!prevOperations) {\n    return operations.map(() => true);\n  }\n\n  let newOps: boolean[] = [];\n\n  if (prevOperations.length - 1 === operations.length && operations.every((op) => prevOperations.includes(op))) {\n    // In case we remove one op and does not change any ops then don't highlight anything.\n    return operations.map(() => false);\n  }\n  if (prevOperations.length + 1 === operations.length && prevOperations.every((op) => operations.includes(op))) {\n    // If we add a single op just find it and highlight just that.\n    const newOp = operations.find((op) => !prevOperations.includes(op));\n    newOps = operations.map((op) => {\n      return op === newOp;\n    });\n  } else {\n    // Default diff of all ops.\n    newOps = operations.map((op, index) => {\n      return !isSameOp(op.id, prevOperations[index]?.id);\n    });\n  }\n  return newOps;\n}\n\nfunction isSameOp(op1?: string, op2?: string) {\n  return op1 === op2 || `__${op1}_by` === op2 || op1 === `__${op2}_by`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    heading: css({\n      label: 'heading',\n      fontSize: 12,\n      fontWeight: theme.typography.fontWeightMedium,\n      marginBottom: 0,\n    }),\n    operationList: css({\n      label: 'operationList',\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: theme.spacing(2),\n    }),\n    addButton: css({\n      label: 'addButton',\n      width: 126,\n      paddingBottom: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack } from '@grafana/ui';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport function OperationsEditorRow({ children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={1}>{children}</Stack>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1, 1, 0, 1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryBuilderHints.tsx\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, PanelData, QueryHint } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\n\nimport { LokiAndPromQueryModellerBase, PromLokiVisualQuery } from './LokiAndPromQueryModellerBase';\n\nexport interface Props<T extends PromLokiVisualQuery> {\n  query: T;\n  datasource: PrometheusDatasource;\n  queryModeller: LokiAndPromQueryModellerBase;\n  buildVisualQueryFromString: (expr: string) => { query: T };\n  onChange: (update: T) => void;\n  data?: PanelData;\n}\n\nexport const QueryBuilderHints = <T extends PromLokiVisualQuery>({\n  datasource,\n  query: visualQuery,\n  onChange,\n  data,\n  queryModeller,\n  buildVisualQueryFromString,\n}: Props<T>) => {\n  const [hints, setHints] = useState<QueryHint[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n    // For now show only actionable hints\n    const hints = datasource.getQueryHints(query, data?.series || []).filter((hint) => hint.fix?.action);\n    setHints(hints);\n  }, [datasource, visualQuery, data, queryModeller]);\n\n  return (\n    <>\n      {hints.length > 0 && (\n        <div className={styles.container}>\n          {hints.map((hint) => {\n            return (\n              <Tooltip content={`${hint.label} ${hint.fix?.label}`} key={hint.type}>\n                <Button\n                  onClick={() => {\n                    reportInteraction('grafana_query_builder_hints_clicked', {\n                      hint: hint.type,\n                      datasourceType: datasource.type,\n                    });\n\n                    if (hint?.fix?.action) {\n                      const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n                      const newQuery = datasource.modifyQuery(query, hint.fix.action);\n                      const newVisualQuery = buildVisualQueryFromString(newQuery.expr);\n                      return onChange(newVisualQuery.query);\n                    }\n                  }}\n                  fill=\"outline\"\n                  size=\"sm\"\n                  className={styles.hint}\n                >\n                  hint: {hint.fix?.title || hint.fix?.action?.type.toLowerCase().replace('_', ' ')}\n                </Button>\n              </Tooltip>\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nQueryBuilderHints.displayName = 'QueryBuilderHints';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      alignItems: 'start',\n    }),\n    hint: css({\n      marginRight: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/NestedQuery.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { PromVisualQueryBinary } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\n\nexport interface NestedQueryProps {\n  nestedQuery: PromVisualQueryBinary;\n  datasource: PrometheusDatasource;\n  index: number;\n  onChange: (index: number, update: PromVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport const NestedQuery = React.memo<NestedQueryProps>((props) => {\n  const { nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.header}>\n        <div className={styles.name}>Operator</div>\n        <Select\n          width=\"auto\"\n          options={operators}\n          value={toOption(nestedQuery.operator)}\n          onChange={(value) => {\n            onChange(index, {\n              ...nestedQuery,\n              operator: value.value!,\n            });\n          }}\n        />\n        <div className={styles.name}>Vector matches</div>\n        <div className={styles.vectorMatchWrapper}>\n          <Select<PromVisualQueryBinary['vectorMatchesType']>\n            width=\"auto\"\n            value={nestedQuery.vectorMatchesType || 'on'}\n            allowCustomValue\n            options={[\n              { value: 'on', label: 'on' },\n              { value: 'ignoring', label: 'ignoring' },\n            ]}\n            onChange={(val) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatchesType: val.value,\n              });\n            }}\n          />\n          <AutoSizeInput\n            className={styles.vectorMatchInput}\n            minWidth={20}\n            defaultValue={nestedQuery.vectorMatches}\n            onCommitChange={(evt) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatches: evt.currentTarget.value,\n                vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n              });\n            }}\n          />\n        </div>\n        <FlexItem grow={1} />\n        <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} tooltip=\"Remove match\" />\n      </div>\n      <div className={styles.body}>\n        <EditorRows>\n          <PromQueryBuilder\n            showExplain={showExplain}\n            query={nestedQuery.query}\n            datasource={datasource}\n            onRunQuery={onRunQuery}\n            onChange={(update) => {\n              onChange(index, { ...nestedQuery, query: update });\n            }}\n          />\n        </EditorRows>\n      </div>\n    </div>\n  );\n});\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/NestedQueryList.tsx\nimport React from 'react';\n\nimport { Stack } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromVisualQuery, PromVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface NestedQueryListProps {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (query: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport function NestedQueryList(props: NestedQueryListProps) {\n  const { query, datasource, onChange, onRunQuery, showExplain } = props;\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: PromVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/QuerySuggestionItem.tsx\nimport { cx } from '@emotion/css';\nimport React, { FormEvent, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, RadioButtonList, Spinner, TextArea, Toggletip, useTheme2 } from '@grafana/ui';\n\nimport { buildVisualQueryFromString } from '../../parsing';\nimport { PromVisualQuery } from '../../types';\n\nimport { getStyles } from './PromQail';\nimport { QuerySuggestion } from './types';\n\nexport type Props = {\n  querySuggestion: QuerySuggestion;\n  order: number;\n  queryExplain: (idx: number) => void;\n  historical: boolean;\n  onChange: (query: PromVisualQuery) => void;\n  closeDrawer: () => void;\n  last: boolean;\n  prompt: string;\n  allSuggestions: string | undefined;\n};\n\nconst suggestionOptions: SelectableValue[] = [\n  { label: 'Yes', value: 'yes' },\n  { label: 'No', value: 'no' },\n];\nconst explationOptions: SelectableValue[] = [\n  { label: 'Too vague', value: 'too vague' },\n  { label: 'Too technical', value: 'too technical' },\n  { label: 'Inaccurate', value: 'inaccurate' },\n  { label: 'Other', value: 'other' },\n];\n\nexport function QuerySuggestionItem(props: Props) {\n  const { querySuggestion, order, queryExplain, historical, onChange, closeDrawer, last, allSuggestions, prompt } =\n    props;\n  const [showExp, updShowExp] = useState<boolean>(false);\n\n  const [gaveExplanationFeedback, updateGaveExplanationFeedback] = useState<boolean>(false);\n  const [gaveSuggestionFeedback, updateGaveSuggestionFeedback] = useState<boolean>(false);\n\n  const [suggestionFeedback, setSuggestionFeedback] = useState({\n    radioInput: '',\n    text: '',\n  });\n\n  const [explanationFeedback, setExplanationFeedback] = useState({\n    radioInput: '',\n    text: '',\n  });\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const { query, explanation } = querySuggestion;\n\n  const feedbackToggleTip = (type: string) => {\n    const updateRadioFeedback = (value: string) => {\n      if (type === 'explanation') {\n        setExplanationFeedback({\n          ...explanationFeedback,\n          radioInput: value,\n        });\n      } else {\n        setSuggestionFeedback({\n          ...suggestionFeedback,\n          radioInput: value,\n        });\n      }\n    };\n\n    const updateTextFeedback = (e: FormEvent<HTMLTextAreaElement>) => {\n      if (type === 'explanation') {\n        setExplanationFeedback({\n          ...explanationFeedback,\n          text: e.currentTarget.value,\n        });\n      } else {\n        setSuggestionFeedback({\n          ...suggestionFeedback,\n          text: e.currentTarget.value,\n        });\n      }\n    };\n\n    const disabledButton = () =>\n      type === 'explanation' ? !explanationFeedback.radioInput : !suggestionFeedback.radioInput;\n\n    const questionOne =\n      type === 'explanation' ? 'Why was the explanation not helpful?' : 'Were the query suggestions helpful?';\n\n    return (\n      <div className={styles.suggestionFeedback}>\n        <div>\n          <div className={styles.feedbackQuestion}>\n            <h6>{questionOne}</h6>\n            <i>(Required)</i>\n          </div>\n          <RadioButtonList\n            name=\"default\"\n            options={type === 'explanation' ? explationOptions : suggestionOptions}\n            value={type === 'explanation' ? explanationFeedback.radioInput : suggestionFeedback.radioInput}\n            onChange={updateRadioFeedback}\n          />\n        </div>\n        <div className={cx(type === 'explanation' && styles.explationTextInput)}>\n          {type !== 'explanation' && (\n            <div className={styles.feedbackQuestion}>\n              <h6>How can we improve the query suggestions?</h6>\n            </div>\n          )}\n          <TextArea\n            type=\"text\"\n            aria-label=\"Promqail suggestion text\"\n            placeholder=\"Enter your feedback\"\n            value={type === 'explanation' ? explanationFeedback.text : suggestionFeedback.text}\n            onChange={updateTextFeedback}\n            cols={100}\n          />\n        </div>\n\n        <div className={styles.submitFeedback}>\n          <Button\n            variant=\"primary\"\n            size=\"sm\"\n            disabled={disabledButton()}\n            onClick={() => {\n              // submit the rudderstack event\n              if (type === 'explanation') {\n                explanationFeedbackEvent(\n                  explanationFeedback.radioInput,\n                  explanationFeedback.text,\n                  querySuggestion,\n                  historical,\n                  prompt\n                );\n                updateGaveExplanationFeedback(true);\n              } else {\n                suggestionFeedbackEvent(\n                  suggestionFeedback.radioInput,\n                  suggestionFeedback.text,\n                  allSuggestions ?? '',\n                  historical,\n                  prompt\n                );\n                updateGaveSuggestionFeedback(true);\n              }\n            }}\n          >\n            Submit\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={styles.querySuggestion}>\n        <div title={query} className={cx(styles.codeText, styles.longCode)}>\n          {`${order}.  ${query}`}\n        </div>\n        <div className={styles.useButton}>\n          <Button\n            variant=\"primary\"\n            size=\"sm\"\n            onClick={() => {\n              reportInteraction('grafana_prometheus_promqail_use_query_button_clicked', {\n                query: querySuggestion.query,\n              });\n              const pvq = buildVisualQueryFromString(querySuggestion.query);\n              // check for errors!\n              onChange(pvq.query);\n              closeDrawer();\n            }}\n          >\n            Use\n          </Button>\n        </div>\n      </div>\n      <div>\n        <Button\n          fill=\"text\"\n          variant=\"secondary\"\n          icon={showExp ? 'angle-up' : 'angle-down'}\n          onClick={() => {\n            updShowExp(!showExp);\n            queryExplain(order - 1);\n          }}\n          className={cx(styles.bodySmall)}\n          size=\"sm\"\n        >\n          Explainer\n        </Button>\n        {!showExp && order !== 5 && <div className={styles.textPadding}></div>}\n\n        {showExp && !querySuggestion.explanation && (\n          <div className={styles.center}>\n            <Spinner />\n          </div>\n        )}\n        {showExp && querySuggestion.explanation && (\n          <>\n            <div className={cx(styles.bodySmall, styles.explainPadding)}>\n              <div className={styles.textPadding}>This query is trying to answer the question:</div>\n              <div className={styles.textPadding}>{explanation}</div>\n              <div className={styles.textPadding}>\n                Learn more with this{' '}\n                <a\n                  className={styles.doc}\n                  href={'https://prometheus.io/docs/prometheus/latest/querying/examples/#query-examples'}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Prometheus doc\n                </a>\n              </div>\n\n              <div className={cx(styles.rightButtons, styles.secondaryText)}>\n                Was this explanation helpful?\n                <div className={styles.floatRight}>\n                  {!gaveExplanationFeedback ? (\n                    <>\n                      <Button\n                        fill=\"outline\"\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        className={styles.leftButton}\n                        onClick={() => {\n                          explanationFeedbackEvent('Yes', '', querySuggestion, historical, prompt);\n                          updateGaveExplanationFeedback(true);\n                        }}\n                      >\n                        Yes\n                      </Button>\n                      <Toggletip\n                        aria-label=\"Suggestion feedback\"\n                        content={feedbackToggleTip('explanation')}\n                        placement=\"bottom-end\"\n                        closeButton={true}\n                      >\n                        <Button fill=\"outline\" variant=\"secondary\" size=\"sm\">\n                          No\n                        </Button>\n                      </Toggletip>\n                    </>\n                  ) : (\n                    'Thank you for your feedback!'\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {!last && <hr />}\n          </>\n        )}\n        {last && (\n          <div className={cx(styles.feedbackStyle)}>\n            {!gaveSuggestionFeedback ? (\n              <Toggletip\n                aria-label=\"Suggestion feedback\"\n                content={feedbackToggleTip('suggestion')}\n                placement=\"bottom-end\"\n                closeButton={true}\n              >\n                <Button fill=\"outline\" variant=\"secondary\" size=\"sm\">\n                  Give feedback on suggestions\n                </Button>\n              </Toggletip>\n            ) : (\n              // do this weird thing because the toggle tip doesn't allow an extra close function\n              <Button fill=\"outline\" variant=\"secondary\" size=\"sm\" disabled={true}>\n                Thank you for your feedback!\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction explanationFeedbackEvent(\n  radioInputFeedback: string,\n  textFeedback: string,\n  querySuggestion: QuerySuggestion,\n  historical: boolean,\n  prompt: string\n) {\n  const event = 'grafana_prometheus_promqail_explanation_feedback';\n\n  reportInteraction(event, {\n    helpful: radioInputFeedback,\n    textFeedback: textFeedback,\n    suggestionType: historical ? 'historical' : 'AI',\n    query: querySuggestion.query,\n    explanation: querySuggestion.explanation,\n    prompt: prompt,\n  });\n}\n\nfunction suggestionFeedbackEvent(\n  radioInputFeedback: string,\n  textFeedback: string,\n  allSuggestions: string,\n  historical: boolean,\n  prompt: string\n) {\n  const event = 'grafana_prometheus_promqail_suggestion_feedback';\n\n  reportInteraction(event, {\n    helpful: radioInputFeedback,\n    textFeedback: textFeedback,\n    suggestionType: historical ? 'historical' : 'AI',\n    allSuggestions: allSuggestions,\n    prompt: prompt,\n  });\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/types.ts\nexport type QuerySuggestion = {\n  query: string;\n  explanation: string;\n};\n\nexport enum SuggestionType {\n  Historical = 'historical',\n  AI = 'AI',\n}\n\nexport type Interaction = {\n  prompt: string;\n  suggestionType: SuggestionType;\n  suggestions: QuerySuggestion[];\n  isLoading: boolean;\n  explanationIsLoading: boolean;\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/QuerySuggestionContainer.tsx\nimport { cx } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { PromVisualQuery } from '../../types';\n\nimport { getStyles, queryAssistanttestIds } from './PromQail';\nimport { QuerySuggestionItem } from './QuerySuggestionItem';\nimport { QuerySuggestion, SuggestionType } from './types';\n\nexport type Props = {\n  querySuggestions: QuerySuggestion[];\n  suggestionType: SuggestionType;\n  closeDrawer: () => void;\n  nextInteraction: () => void;\n  queryExplain: (idx: number) => void;\n  onChange: (query: PromVisualQuery) => void;\n  prompt: string;\n};\n\nexport function QuerySuggestionContainer(props: Props) {\n  const { suggestionType, querySuggestions, closeDrawer, nextInteraction, queryExplain, onChange, prompt } = props;\n\n  const [hasNextInteraction, updateHasNextInteraction] = useState<boolean>(false);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  let text, secondaryText, refineText;\n\n  if (suggestionType === SuggestionType.Historical) {\n    text = `Here are ${querySuggestions.length} query suggestions:`;\n    refineText = 'I want to write a prompt';\n  } else if (suggestionType === SuggestionType.AI) {\n    text = text = 'Here is your query suggestion:';\n    secondaryText =\n      'This query is based off of natural language descriptions of the most commonly used PromQL queries.';\n    refineText = 'Refine prompt';\n  }\n\n  return (\n    <>\n      {suggestionType === SuggestionType.Historical ? (\n        <div className={styles.bottomMargin}>{text}</div>\n      ) : (\n        <>\n          <div className={styles.textPadding}>{text}</div>\n          <div className={cx(styles.secondaryText, styles.bottomMargin)}>{secondaryText}</div>\n        </>\n      )}\n\n      <div className={styles.infoContainerWrapper}>\n        <div className={styles.infoContainer}>\n          {querySuggestions.map((qs: QuerySuggestion, idx: number) => {\n            return (\n              <QuerySuggestionItem\n                historical={suggestionType === SuggestionType.Historical}\n                querySuggestion={qs}\n                key={idx}\n                order={idx + 1}\n                queryExplain={queryExplain}\n                onChange={onChange}\n                closeDrawer={closeDrawer}\n                last={idx === querySuggestions.length - 1}\n                // for feedback rudderstack events\n                allSuggestions={querySuggestions.reduce((acc: string, qs: QuerySuggestion) => {\n                  return acc + '$$' + qs.query;\n                }, '')}\n                prompt={prompt ?? ''}\n              />\n            );\n          })}\n        </div>\n      </div>\n      {!hasNextInteraction && (\n        <div className={styles.nextInteractionHeight}>\n          <div className={cx(styles.afterButtons, styles.textPadding)}>\n            <Button\n              onClick={() => {\n                updateHasNextInteraction(true);\n                nextInteraction();\n              }}\n              data-testid={queryAssistanttestIds.refinePrompt}\n              fill=\"outline\"\n              variant=\"secondary\"\n              size=\"md\"\n            >\n              {refineText}\n            </Button>\n          </div>\n          <div className={cx(styles.textPadding, styles.floatRight)}>\n            <Button fill=\"outline\" variant=\"secondary\" size=\"md\" onClick={closeDrawer}>\n              Cancel\n            </Button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","import { getBackendSrv, logDebug } from '@grafana/runtime';\nimport { LLM_PLUGIN_ROUTE, setLLMPluginVersion } from './constants.js';\n\nasync function search(request) {\n  const response = await getBackendSrv().post(\n    \"/api/plugins/grafana-llm-app/resources/vector/search\",\n    request,\n    {\n      headers: { \"Content-Type\": \"application/json\" }\n    }\n  );\n  return response.results;\n}\nlet loggedWarning = false;\nconst health = async () => {\n  try {\n    const settings = await getBackendSrv().get(`${LLM_PLUGIN_ROUTE}/settings`, void 0, void 0, {\n      showSuccessAlert: false,\n      showErrorAlert: false\n    });\n    if (!settings.enabled) {\n      return { enabled: false, ok: false, error: \"The Grafana LLM plugin is not enabled.\" };\n    }\n  } catch (e) {\n    logDebug(String(e));\n    logDebug(\n      \"Failed to check if the vector service is enabled. This is expected if the Grafana LLM plugin is not installed, and the above error can be ignored.\"\n    );\n    loggedWarning = true;\n    return { enabled: false, ok: false, error: \"The Grafana LLM plugin is not installed.\" };\n  }\n  let response;\n  try {\n    response = await getBackendSrv().get(`${LLM_PLUGIN_ROUTE}/health`, void 0, void 0, {\n      showSuccessAlert: false,\n      showErrorAlert: false\n    });\n  } catch (e) {\n    if (!loggedWarning) {\n      logDebug(String(e));\n      logDebug(\n        \"Failed to check if vector service is enabled. This is expected if the Grafana LLM plugin is not installed, and the above error can be ignored.\"\n      );\n      loggedWarning = true;\n    }\n    return { enabled: false, ok: false, error: \"The Grafana LLM plugin is not installed.\" };\n  }\n  const { details } = response;\n  if ((details == null ? void 0 : details.version) !== void 0) {\n    setLLMPluginVersion(details.version);\n  }\n  if ((details == null ? void 0 : details.vector) === void 0) {\n    return { enabled: false, ok: false, error: \"The Grafana LLM plugin is outdated; please update it.\" };\n  }\n  return typeof details.vector === \"boolean\" ? { enabled: details.vector, ok: details.vector } : details.vector;\n};\nconst enabled = async () => {\n  const healthDetails = await health();\n  return healthDetails.enabled && healthDetails.ok;\n};\n\nexport { enabled, health, search };\n//# sourceMappingURL=vector.js.map\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/prompts.ts\nexport const ExplainSystemPrompt = `You are an expert in Prometheus, the event monitoring and alerting application.\n\nYou are given relevant PromQL documentation, a type and description for a Prometheus metric, and a PromQL query on that metric. Using the provided information for reference, please explain what the output of a given query is in 1 sentences. Do not walk through what the functions do separately, make your answer concise. \n\nInput will be in the form:\n\n\nPromQL Documentation:\n<PromQL documentation>\n\nPromQL Metrics Metadata:\n<metric_name>(<metric type of the metric queried>): <description of what the metric means>\n\nPromQL Expression: \n<PromQL query>\n\nExamples of input and output\n----------\nPromQL Documentation:\nA counter is a cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart. For example, you can use a counter to represent the number of requests served, tasks completed, or errors.\ntopk (largest k elements by sample value)\nsum (calculate sum over dimensions)\nrate(v range-vector) calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. \n\nPromQL Metrics Metadata:\ntraces_exporter_sent_spans(counter): Number of spans successfully sent to destination.\n\nPromQL Expression:\ntopk(3, sum by(cluster) (rate(traces_exporter_sent_spans{exporter=\"otlp\"}[5m])))\n\nThis query is trying to answer the question:\nWhat is the top 3 clusters that have successfully sent the most number of spans to the destination?\n`;\n\nexport type ExplainUserPromptParams = {\n  documentation: string;\n  metricName: string;\n  metricType: string;\n  metricMetadata: string;\n  query: string;\n};\n\nexport function GetExplainUserPrompt({\n  documentation,\n  metricName,\n  metricType,\n  metricMetadata,\n  query,\n}: ExplainUserPromptParams): string {\n  if (documentation === '') {\n    documentation = 'No documentation provided.';\n  }\n  if (metricMetadata === '') {\n    metricMetadata = 'No description provided.';\n  }\n  return `\n        PromQL Documentation: \n        ${documentation}\n\n        PromQL Metrics Metadata:\n        ${metricName}(${metricType}): ${metricMetadata}\n\n        PromQL Expression: \n        ${query}\n\n        This query is trying to answer the question:\n    `;\n}\n\nexport const SuggestSystemPrompt = `You are a Prometheus Query Language (PromQL) expert assistant inside Grafana.\nWhen the user asks a question, respond with a valid PromQL query and only the query.\n\nTo help you answer the question, you will receive:\n- List of potentially relevant PromQL templates with descriptions, ranked by semantic search score\n- Prometheus metric\n- Metric type\n- Available Prometheus metric labels\n- User question\n\nPolicy:\n- Do not invent labels names, you can only use the available labels\n- For rate queries, use the $__rate_interval variable`;\n\n// rewrite with a type\nexport type SuggestUserPromptParams = {\n  promql: string;\n  question: string;\n  metricType: string;\n  labels: string;\n  templates: string;\n};\n\nexport function GetSuggestUserPrompt({\n  promql,\n  question,\n  metricType,\n  labels,\n  templates,\n}: SuggestUserPromptParams): string {\n  if (templates === '') {\n    templates = 'No templates provided.';\n  } else {\n    templates = templates.replace(/\\n/g, '\\n  ');\n  }\n  return `Relevant PromQL templates:\n  ${templates}\n  \n  Prometheus metric: ${promql}\n  Metric type: ${metricType}\n  Available Prometheus metric labels: ${labels}\n  User question: ${question}\n  \n  \\`\\`\\`promql`;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/state/state.ts\nimport { PromVisualQuery } from '../../../types';\nimport { Interaction, SuggestionType } from '../types';\n\n/**\n * Initial state for PromQAIL\n * @param query the prometheus query with metric and possible labels\n */\nexport function initialState(query?: PromVisualQuery, showStartingMessage?: boolean): PromQailState {\n  return {\n    query: query ?? {\n      metric: '',\n      labels: [],\n      operations: [],\n    },\n    showExplainer: false,\n    showStartingMessage: showStartingMessage ?? true,\n    indicateCheckbox: false,\n    askForQueryHelp: false,\n    interactions: [],\n  };\n}\n\n/**\n * The PromQAIL state object\n */\nexport interface PromQailState {\n  query: PromVisualQuery;\n  showExplainer: boolean;\n  showStartingMessage: boolean;\n  indicateCheckbox: boolean;\n  askForQueryHelp: boolean;\n  interactions: Interaction[];\n}\n\nexport function createInteraction(suggestionType: SuggestionType, isLoading?: boolean): Interaction {\n  return {\n    suggestionType: suggestionType,\n    prompt: '',\n    suggestions: [],\n    isLoading: isLoading ?? false,\n    explanationIsLoading: false,\n  };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/state/templates.ts\nimport { QuerySuggestion } from '../types';\n\ninterface TemplateData {\n  template: string;\n  description: string;\n}\n\nexport const generalTemplates: TemplateData[] = [\n  {\n    template: 'metric_a{}',\n    description: 'Get the data for \"metric_a\"',\n  },\n  {\n    template: 'avg by(c) (metric_a{})',\n    description: 'Average of all series in \"metric_a\" grouped by the label \"c\"',\n  },\n  {\n    template: 'count by(d) (metric_a{})',\n    description: 'Number of series in the metric \"metric_a\" grouped by the label \"d\"',\n  },\n  {\n    template: 'sum by(g) (sum_over_time(metric_a{}[1h]))',\n    description:\n      'For each series in the metric \"metric_a\", sum all values over 1 hour, then group those series by label \"g\" and sum.',\n  },\n  {\n    template: 'count(metric_a{})',\n    description: 'Count of series in the metric \"metric_a\"',\n  },\n  {\n    template: '(metric_a{})',\n    description: 'Get the data for \"metric_a\"',\n  },\n  {\n    template: 'count_over_time(metric_a{}[1h])',\n    description: 'Number of series of metric_a in a 1 hour interval',\n  },\n  {\n    template: 'changes(metric_a{}[1m])',\n    description: 'Number of times the values of each series in metric_a have changed in 1 minute periods',\n  },\n  {\n    template: 'count(count by(g) (metric_a{}))',\n    description: 'Total number of series in metric_a',\n  },\n  {\n    template: 'last_over_time(metric_a{}[1h])',\n    description: 'For each series in metric_a, get the last value in the 1 hour period.',\n  },\n  {\n    template: 'sum by(g) (count_over_time(metric_a{}[1h]))',\n    description: 'Grouped sum over the label \"g\" of the number of series of metric_a in a 1 hour period',\n  },\n  {\n    template: 'count(metric_a{} == 99)',\n    description: 'Number of series of metric_a that have value 99',\n  },\n  {\n    template: 'min(metric_a{})',\n    description: 'At each timestamp, find the minimum of all series of the metric \"metric_a\"',\n  },\n  {\n    template: 'metric_a{} != 99',\n    description: 'Series of metric_a which do not have the value 99',\n  },\n  {\n    template: 'metric_a{} - 99',\n    description: 'metric_a minus 99',\n  },\n  {\n    template: 'quantile_over_time(0.99,metric_a{}[1h])',\n    description: 'The 99th quantile of values of metric_a in 1 hour',\n  },\n  {\n    template: 'count_values(\"aaaa\",metric_a{})',\n    description: 'Count number of label values for a label named \"aaaa\"',\n  },\n];\n\nexport const counterTemplates: TemplateData[] = [\n  {\n    template: 'sum by(d) (rate(metric_a{}[1h]))',\n    description:\n      'Sum of the rate of increase or decrease of the metric \"metric_a\" per 1 hour period, grouped by the label \"d\"',\n  },\n  {\n    template: 'rate(metric_a{}[1m])',\n    description: 'Rate of change of the metric \"metric_a\" over 1 minute',\n  },\n  {\n    template: 'sum by(a) (increase(metric_a{}[5m]))',\n    description:\n      'Taking the metric \"metric_a\" find the increase in 5 minute periods of each series and aggregate sum over the label \"a\"',\n  },\n  {\n    template: 'sum(rate(metric_a{}[1m]))',\n    description: 'Total rate of change of all series of metric \"metric_a\" in 1 minute intervals',\n  },\n  {\n    template: 'sum(increase(metric_a{}[10m]))',\n    description: 'Total increase for each series of metric \"metric_a\" in 10 minute intervals',\n  },\n  {\n    template: 'increase(metric_a{}[1h])',\n    description: 'Increase in all series of \"metric_a\" in 1 hour period',\n  },\n  {\n    template: 'sum by(d) (irate(metric_a{}[1h]))',\n    description: 'Sum of detailed rate of change of the metric \"metric_a\" over 1 hour grouped by label \"d\"',\n  },\n  {\n    template: 'irate(metric_a{}[1h])',\n    description: 'Detailed rate of change of the metric \"metric_a\" over 1 hour',\n  },\n  {\n    template: 'avg by(d) (rate(metric_a{}[1h]))',\n    description:\n      'Taking the rate of change of the metric \"metric_a\" in a 1 hour period, group by the label \"d\" and find the average of each group',\n  },\n  {\n    template: 'topk(5,sum by(g) (rate(metric_a{}[1h])))',\n    description: 'Top 5 of the summed groups \"g\" of the rate of change of metric_a',\n  },\n  {\n    template: 'sum(rate(metric_a{}[1h])) / sum(rate(metric_a{}[1h]))',\n    description: 'Relative sums of metric_a with different labels',\n  },\n  {\n    template: 'histogram_quantile(99,rate(metric_a{}[1h]))',\n    description: '99th percentile of the rate of change of metric_a in 1 hour periods',\n  },\n  {\n    template: 'avg(rate(metric_a{}[1m]))',\n    description: 'Average of the rate of all series of metric_a in 1 minute periods',\n  },\n  {\n    template: 'rate(metric_a{}[5m]) > 99',\n    description: 'Show series of metric_a only if their rate over 5 minutes is greater than 99',\n  },\n  {\n    template: 'count by(g) (rate(metric_a{}[1h]))',\n    description: 'Count of series of metric_a over all labels \"g\"',\n  },\n];\n\nexport const histogramTemplates: TemplateData[] = [\n  {\n    template: 'histogram_quantile(99,sum by(le) (rate(metric_a{}[1h])))',\n    description:\n      'Calculate the rate at which the metric \"metric_a\" is increasing or decreasing, summed over each bucket label \"le\", and then calculates the 99th percentile of those rates.',\n  },\n  {\n    template: 'histogram_quantile(99,sum by(g) (metric_a{}))',\n    description: '99th percentile of the sum of metric_a grouped by label \"g\"',\n  },\n  {\n    template: 'histogram_quantile(99,sum by(g) (irate(metric_a{}[1h])))',\n    description: '99th percentile of the grouped by \"g\" sum of the rate of each series in metric_a in an hour',\n  },\n  {\n    template: 'histogram_quantile(99,metric_a{})',\n    description: '99th percentile of metric_a',\n  },\n];\n\nexport const gaugeTemplates: TemplateData[] = [\n  {\n    template: 'sum by(c) (metric_a{})',\n    description: 'Sum the metric \"metric_a\" by each value in label \"c\"',\n  },\n  {\n    template: 'sum(metric_a{})',\n    description: 'Total sum of all the series of the metric named \"metric_a\"',\n  },\n  {\n    template: 'max by(dd) (metric_a{})',\n    description: 'Grouping the series the metric \"metric_a\" by the label \"dd\", get the maximum value of each group',\n  },\n  {\n    template: 'max(metric_a{})',\n    description: 'Maximum value of all series of the metric \"metric_a\" ',\n  },\n  {\n    template: 'avg(metric_a{})',\n    description: 'Average value of all the series of metric \"metric_a\"',\n  },\n  {\n    template: 'metric_a{} > 99',\n    description: 'Show only the series of metric \"metric_a\" which currently have value greater than 99',\n  },\n  {\n    template: 'metric_a{} / 99',\n    description: 'Values for \"metric_a\" all divided by 99',\n  },\n  {\n    template: 'metric_a{} == 99',\n    description: 'Show series of metric_a that have value 99',\n  },\n  {\n    template: 'sum_over_time(metric_a{}[1h])',\n    description: 'Sum each series of metric_a over 1 hour',\n  },\n  {\n    template: 'avg_over_time(metric_a{}[1h])',\n    description: 'Average of each series of metric_a in a 1 hour period',\n  },\n  {\n    template: 'sum(sum_over_time(metric_a{}[1h]))',\n    description: 'Sum of all values in all series in a 1 hour period',\n  },\n  {\n    template: 'delta(metric_a{}[1m])',\n    description: 'Span or delta (maximum - minimum) of values of the metric \"metric_a\" in a 1 minute period. ',\n  },\n  {\n    template: 'avg by(g) (avg_over_time(metric_a{}[1h]))',\n    description:\n      'For 1 hour, take each series and find the average, then group by label \"g\" and find the average of each group',\n  },\n  {\n    template: 'max_over_time(metric_a{}[1h])',\n    description: 'Maximum values of each series in metric \"metric_a\" in a 1 hour period',\n  },\n  {\n    template: 'metric_a{} * 99',\n    description: 'Values of metric_a multiplied by 99',\n  },\n  {\n    template: 'metric_a{} < 99',\n    description: 'Series of metric_a that have values less than 99',\n  },\n  {\n    template: 'max by() (max_over_time(metric_a{}[1h]))',\n    description: 'Find maximum value of all series in 1 hour periods',\n  },\n  {\n    template: 'topk(99,metric_a{})',\n    description: 'First 5 series of metric_a that have the highest values',\n  },\n  {\n    template: 'min by(g) (metric_a{})',\n    description: 'Minimum values of the series of metric_a grouped by label \"g\"',\n  },\n  {\n    template: 'topk(10,sum by(g) (metric_a{}))',\n    description: \"Top 10 of the series of metric_a grouped and summed by the label 'g'\",\n  },\n  {\n    template: 'avg(avg_over_time(metric_a{}[1h]))',\n    description: 'Average of all values inside a 1 hour period',\n  },\n  {\n    template: 'quantile by(h) (0.95,metric_a{})',\n    description: 'Calculate 95th percentile of metric_a when aggregated by the label \"h\"',\n  },\n  {\n    template: 'avg by(g) (metric_a{} > 99)',\n    description:\n      'Taking all series of metric_a with value greater than 99, group by label \"g\" and find the average of each group',\n  },\n  {\n    template: 'sum(metric_a{}) / 99',\n    description: 'Sum of all series of metric_a divided by 99',\n  },\n  {\n    template: 'count(sum by(g) (metric_a{}))',\n    description: 'Number of series of metric_a grouped by the label \"g\"',\n  },\n  {\n    template: 'max(max_over_time(metric_a{}[1h]))',\n    description: 'Find the max value of all series of metric_a in a 1 hour period',\n  },\n];\n\nfunction processTemplate(templateData: TemplateData, metric: string, labels: string): QuerySuggestion {\n  return {\n    query: templateData.template.replace('metric_a', metric).replace('{}', labels),\n    explanation: templateData.description.replace('metric_a', metric),\n  };\n}\n\nexport function getTemplateSuggestions(metricName: string, metricType: string, labels: string): QuerySuggestion[] {\n  let templateSuggestions: QuerySuggestion[] = [];\n  switch (metricType) {\n    case 'counter':\n      templateSuggestions = templateSuggestions.concat(\n        counterTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 2)\n      );\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 3)\n      );\n      break;\n    case 'gauge':\n      templateSuggestions = templateSuggestions.concat(\n        gaugeTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 2)\n      );\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 3)\n      );\n      break;\n    case 'histogram':\n      templateSuggestions = templateSuggestions.concat(\n        histogramTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 2)\n      );\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 3)\n      );\n      break;\n    default:\n      templateSuggestions = templateSuggestions.concat(\n        generalTemplates\n          .map((t) => processTemplate(t, metricName, labels))\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 5)\n      );\n      break;\n  }\n  return templateSuggestions;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/state/helpers.ts\nimport { AnyAction } from 'redux';\n\nimport { llms } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { PrometheusDatasource } from '../../../../datasource';\nimport { getMetadataHelp, getMetadataType } from '../../../../language_provider';\nimport { promQueryModeller } from '../../../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../../../parsing';\nimport { PromVisualQuery } from '../../../types';\nimport { updateInteraction } from '../PromQail';\nimport {\n  ExplainSystemPrompt,\n  GetExplainUserPrompt,\n  SuggestSystemPrompt,\n  GetSuggestUserPrompt,\n  SuggestUserPromptParams,\n} from '../prompts';\nimport { Interaction, QuerySuggestion, SuggestionType } from '../types';\n\nimport { createInteraction } from './state';\nimport { getTemplateSuggestions } from './templates';\n\nconst OPENAI_MODEL_NAME = 'gpt-3.5-turbo-1106';\nconst promQLTemplatesCollection = 'grafana.promql.templates';\n\ninterface TemplateSearchResult {\n  description: string | null;\n  metric_type: string | null;\n  promql: string | null;\n}\n\nexport function getExplainMessage(\n  query: string,\n  metric: string,\n  datasource: PrometheusDatasource\n): llms.openai.Message[] {\n  let metricMetadata = '';\n  let metricType = '';\n\n  const pvq = buildVisualQueryFromString(query);\n\n  if (datasource.languageProvider.metricsMetadata) {\n    metricType = getMetadataType(metric, datasource.languageProvider.metricsMetadata) ?? '';\n    metricMetadata = getMetadataHelp(metric, datasource.languageProvider.metricsMetadata) ?? '';\n  }\n\n  const documentationBody = pvq.query.operations\n    .map((op) => {\n      const def = promQueryModeller.getOperationDef(op.id);\n      if (!def) {\n        return '';\n      }\n      const title = def.renderer(op, def, '<expr>');\n      const body = def.explainHandler ? def.explainHandler(op, def) : def.documentation;\n\n      if (!body) {\n        return '';\n      }\n      return `### ${title}:\\n${body}`;\n    })\n    .filter((item) => item !== '')\n    .join('\\n');\n\n  return [\n    { role: 'system', content: ExplainSystemPrompt },\n    {\n      role: 'user',\n      content: GetExplainUserPrompt({\n        documentation: documentationBody,\n        metricName: metric,\n        metricType: metricType,\n        metricMetadata: metricMetadata,\n        query: query,\n      }),\n    },\n  ];\n}\n\nfunction getSuggestMessages({\n  promql,\n  question,\n  metricType,\n  labels,\n  templates,\n}: SuggestUserPromptParams): llms.openai.Message[] {\n  return [\n    { role: 'system', content: SuggestSystemPrompt },\n    { role: 'user', content: GetSuggestUserPrompt({ promql, question, metricType, labels, templates }) },\n  ];\n}\n\n/**\n * Calls the API and adds suggestions to the interaction\n *\n * @param dispatch\n * @param idx\n * @param interaction\n * @returns\n */\nexport async function promQailExplain(\n  dispatch: React.Dispatch<AnyAction>,\n  idx: number,\n  query: PromVisualQuery,\n  interaction: Interaction,\n  suggIdx: number,\n  datasource: PrometheusDatasource\n) {\n  const suggestedQuery = interaction.suggestions[suggIdx].query;\n\n  const promptMessages = getExplainMessage(suggestedQuery, query.metric, datasource);\n  const interactionToUpdate = interaction;\n\n  return llms.openai\n    .streamChatCompletions({\n      model: OPENAI_MODEL_NAME,\n      messages: promptMessages,\n      temperature: 0,\n    })\n    .pipe(llms.openai.accumulateContent())\n    .subscribe((response) => {\n      const updatedSuggestions = interactionToUpdate.suggestions.map((sg: QuerySuggestion, sidx: number) => {\n        if (suggIdx === sidx) {\n          return {\n            query: interactionToUpdate.suggestions[suggIdx].query,\n            explanation: response,\n          };\n        }\n\n        return sg;\n      });\n\n      const payload = {\n        idx,\n        interaction: {\n          ...interactionToUpdate,\n          suggestions: updatedSuggestions,\n          explanationIsLoading: false,\n        },\n      };\n      dispatch(updateInteraction(payload));\n    });\n}\n\n/**\n * Check if sublist is fully contained in the superlist\n *\n * @param sublist\n * @param superlist\n * @returns true if fully contained, else false\n */\nfunction isContainedIn(sublist: string[], superlist: string[]): boolean {\n  for (const item of sublist) {\n    if (!superlist.includes(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Guess the type of a metric, based on its name and its relation to other metrics available\n *\n * @param metric     - name of metric whose type to guess\n * @param allMetrics - list of all available metrics\n * @returns          - the guess of the type (string): counter,gauge,summary,histogram,'histogram,summary'\n */\nexport function guessMetricType(metric: string, allMetrics: string[]): string {\n  const synthetic_metrics = new Set<string>([\n    'up',\n    'scrape_duration_seconds',\n    'scrape_samples_post_metric_relabeling',\n    'scrape_series_added',\n    'scrape_samples_scraped',\n    'ALERTS',\n    'ALERTS_FOR_STATE',\n  ]);\n\n  if (synthetic_metrics.has(metric)) {\n    // these are all known to be counters\n    return 'counter';\n  }\n  if (metric.startsWith(':')) {\n    // probably recording rule\n    return 'gauge';\n  }\n  if (metric.endsWith('_info')) {\n    // typically series of 1s only, the labels are the useful part. TODO: add 'info' type\n    return 'counter';\n  }\n\n  if (metric.endsWith('_created') || metric.endsWith('_total')) {\n    // prometheus naming style recommends counters to have these suffixes.\n    return 'counter';\n  }\n\n  const underscoreIndex = metric.lastIndexOf('_');\n  if (underscoreIndex < 0) {\n    // No underscores in the name at all, very little info to go on. Guess\n    return 'gauge';\n  }\n\n  // See if the suffix is histogram-y or summary-y\n  const [root, suffix] = [metric.slice(0, underscoreIndex), metric.slice(underscoreIndex + 1)];\n\n  if (['bucket', 'count', 'sum'].includes(suffix)) {\n    // Might be histogram + summary\n    let familyMetrics = [`${root}_bucket`, `${root}_count`, `${root}_sum`, root];\n    if (isContainedIn(familyMetrics, allMetrics)) {\n      return 'histogram,summary';\n    }\n\n    // Might be a histogram, if so all these metrics should exist too:\n    familyMetrics = [`${root}_bucket`, `${root}_count`, `${root}_sum`];\n    if (isContainedIn(familyMetrics, allMetrics)) {\n      return 'histogram';\n    }\n\n    // Or might be a summary\n    familyMetrics = [`${root}_sum`, `${root}_count`, root];\n    if (isContainedIn(familyMetrics, allMetrics)) {\n      return 'summary';\n    }\n\n    // Otherwise it's probably just a counter!\n    return 'counter';\n  }\n\n  // One case above doesn't catch: summary or histogram,summary where the non-suffixed metric is chosen\n  const familyMetrics = [`${metric}_sum`, `${metric}_count`, metric];\n  if (isContainedIn(familyMetrics, allMetrics)) {\n    if (allMetrics.includes(`${metric}_bucket`)) {\n      return 'histogram,summary';\n    } else {\n      return 'summary';\n    }\n  }\n\n  // All else fails, guess gauge\n  return 'gauge';\n}\n\n/**\n * Generate a suitable filter structure for the VectorDB call\n * @param types: list of metric types to include in the result\n * @returns the structure to pass to the vectorDB call.\n */\nfunction generateMetricTypeFilters(types: string[]) {\n  return types.map((type) => ({\n    metric_type: {\n      $eq: type,\n    },\n  }));\n}\n\n/**\n * Taking in a metric name, try to guess its corresponding metric _family_ name\n * @param metric name\n * @returns metric family name\n */\nfunction guessMetricFamily(metric: string): string {\n  if (metric.endsWith('_bucket') || metric.endsWith('_count') || metric.endsWith('_sum')) {\n    return metric.slice(0, metric.lastIndexOf('_'));\n  }\n  return metric;\n}\n\n/**\n * Check if the LLM plugin is enabled.\n * Used in the PromQueryBuilder to enable/disable the button based on openai and vector db checks\n * @returns true if the LLM plugin is enabled.\n */\nexport async function isLLMPluginEnabled(): Promise<boolean> {\n  // Check if the LLM plugin is enabled.\n  // If not, we won't be able to make requests, so return early.\n  const openaiEnabled = llms.openai.health().then((response) => response.ok);\n  const vectorEnabled = llms.vector.health().then((response) => response.ok);\n  // combine 2 promises\n  return Promise.all([openaiEnabled, vectorEnabled]).then((results) => {\n    return results.every((result) => result);\n  });\n}\n\n/**\n * Calls the API and adds suggestions to the interaction\n *\n * @param dispatch\n * @param idx\n * @param interaction\n * @returns\n */\nexport async function promQailSuggest(\n  dispatch: React.Dispatch<AnyAction>,\n  idx: number,\n  query: PromVisualQuery,\n  labelNames: string[],\n  datasource: PrometheusDatasource,\n  interaction?: Interaction\n) {\n  const interactionToUpdate = interaction ? interaction : createInteraction(SuggestionType.Historical);\n\n  // Decide metric type\n  let metricType = '';\n  // Makes sure we loaded the metadata for metrics. Usually this is done in the start() method of the\n  // provider but we only need the metadata here.\n  if (!datasource.languageProvider.metricsMetadata) {\n    await datasource.languageProvider.loadMetricsMetadata();\n  }\n  if (datasource.languageProvider.metricsMetadata) {\n    // `datasource.languageProvider.metricsMetadata` is a list of metric family names (with desired type)\n    // from the datasource metadata endoint, but unfortunately the expanded _sum, _count, _bucket raw\n    // metric names are also generated and populating this list (all of type counter). We want the metric\n    // family type, so need to guess the metric family name from the chosen metric name, and test if that\n    // metric family has a type specified.\n    const metricFamilyGuess = guessMetricFamily(query.metric);\n    metricType = getMetadataType(metricFamilyGuess, datasource.languageProvider.metricsMetadata) ?? '';\n  }\n  if (metricType === '') {\n    // fallback to heuristic guess\n    metricType = guessMetricType(query.metric, datasource.languageProvider.metrics);\n  }\n\n  if (interactionToUpdate.suggestionType === SuggestionType.Historical) {\n    return new Promise<void>((resolve) => {\n      return setTimeout(() => {\n        const suggestions = getTemplateSuggestions(\n          query.metric,\n          metricType,\n          promQueryModeller.renderLabels(query.labels)\n        );\n\n        const payload = {\n          idx,\n          interaction: { ...interactionToUpdate, suggestions: suggestions, isLoading: false },\n        };\n        dispatch(updateInteraction(payload));\n        resolve();\n      }, 1000);\n    });\n  } else {\n    type SuggestionBody = {\n      metric: string;\n      labels: string;\n      prompt?: string;\n    };\n\n    // get all available labels\n    const metricLabels = await datasource.languageProvider.fetchLabelsWithMatch(query.metric);\n\n    let feedTheAI: SuggestionBody = {\n      metric: query.metric,\n      // drop __name__ label because it's not useful\n      labels: Object.keys(metricLabels)\n        .filter((label) => label !== '__name__')\n        .join(','),\n    };\n\n    // @ts-ignore llms types issue\n    let results: Array<llms.vector.SearchResult<TemplateSearchResult>> = [];\n    if (interaction?.suggestionType === SuggestionType.AI) {\n      feedTheAI = { ...feedTheAI, prompt: interaction.prompt };\n\n      // @ts-ignore llms types issue\n      results = await llms.vector.search<TemplateSearchResult>({\n        query: interaction.prompt,\n        collection: promQLTemplatesCollection,\n        topK: 5,\n        filter: {\n          $or: generateMetricTypeFilters(metricType.split(',').concat(['*'])),\n        },\n      });\n      reportInteraction('grafana_prometheus_promqail_vector_results', {\n        metric: query.metric,\n        prompt: interaction.prompt,\n        results: results,\n      });\n      // TODO: handle errors from vector search\n    }\n\n    const resultsString = results\n      .map((r) => {\n        return `${r.payload.promql} | ${r.payload.description} (score=${(r.score * 100).toFixed(1)})`;\n      })\n      .join('\\n');\n\n    const promptMessages = getSuggestMessages({\n      promql: query.metric,\n      question: interaction ? interaction.prompt : '',\n      metricType: metricType,\n      labels: labelNames.join(', '),\n      templates: resultsString,\n    });\n\n    return llms.openai\n      .streamChatCompletions({\n        model: OPENAI_MODEL_NAME,\n        messages: promptMessages,\n        temperature: 0.5,\n      })\n      .pipe(llms.openai.accumulateContent())\n      .subscribe((response) => {\n        const payload = {\n          idx,\n          interaction: {\n            ...interactionToUpdate,\n            suggestions: [\n              {\n                query: response,\n                explanation: '',\n              },\n            ],\n            isLoading: false,\n          },\n        };\n        dispatch(updateInteraction(payload));\n      });\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/PromQail.tsx\nimport { css, cx } from '@emotion/css';\nimport { PayloadAction, createSlice } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, Checkbox, Input, Spinner, useTheme2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../../datasource';\nimport store from '../../../gcopypaste/app/core/store';\nimport { PromVisualQuery } from '../../types';\n\nimport { QuerySuggestionContainer } from './QuerySuggestionContainer';\n// @ts-ignore until we can get these added for icons\nimport AI_Logo_color from './resources/AI_Logo_color.svg';\nimport { promQailExplain, promQailSuggest } from './state/helpers';\nimport { createInteraction, initialState } from './state/state';\nimport { Interaction, SuggestionType } from './types';\n\nexport type PromQailProps = {\n  query: PromVisualQuery;\n  closeDrawer: () => void;\n  onChange: (query: PromVisualQuery) => void;\n  datasource: PrometheusDatasource;\n};\n\nconst SKIP_STARTING_MESSAGE = 'SKIP_STARTING_MESSAGE';\n\nexport const PromQail = (props: PromQailProps) => {\n  const { query, closeDrawer, onChange, datasource } = props;\n  const skipStartingMessage = store.getBool(SKIP_STARTING_MESSAGE, false);\n\n  const [state, dispatch] = useReducer(stateSlice.reducer, initialState(query, !skipStartingMessage));\n\n  const [labelNames, setLabelNames] = useState<string[]>([]);\n\n  const suggestions = state.interactions.reduce((acc, int) => acc + int.suggestions.length, 0);\n\n  const responsesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    if (responsesEndRef) {\n      // @ts-ignore for React.MutableRefObject\n      responsesEndRef?.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  useEffect(() => {\n    // only scroll when an interaction has been added or the suggestions have been updated\n    scrollToBottom();\n  }, [state.interactions.length, suggestions]);\n\n  useEffect(() => {\n    const fetchLabels = async () => {\n      let labelsIndex: Record<string, string[]> = await datasource.languageProvider.fetchLabelsWithMatch(query.metric);\n      setLabelNames(Object.keys(labelsIndex));\n    };\n    fetchLabels();\n  }, [query, datasource]);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <div className={styles.containerPadding}>\n      {/* Query Advisor */}\n      {/* header */}\n      <div className={styles.header}>\n        <h3>Query advisor</h3>\n        <Button icon=\"times\" fill=\"text\" variant=\"secondary\" onClick={closeDrawer} />\n      </div>\n      {/* Starting message */}\n      <div>\n        <div className={styles.iconSection}>\n          <img src={AI_Logo_color} alt=\"AI logo color\" /> Assistant\n        </div>\n        {state.showStartingMessage ? (\n          <>\n            <div className={styles.dataList}>\n              <ol>\n                <li className={styles.textPadding}>\n                  Query Advisor suggests queries based on a metric and requests you type in.\n                </li>\n                <li className={styles.textPadding}>\n                  Query Advisor sends Prometheus metrics, labels and metadata to the LLM provider you&#39;ve configured.\n                  Be sure to align its usage with your company&#39;s internal policies.\n                </li>\n                <li className={styles.textPadding}>\n                  An AI-suggested query may not fully answer your question. Always take a moment to understand a query\n                  before you use it.\n                </li>\n              </ol>\n            </div>\n            <Alert\n              title={''}\n              severity={'info'}\n              key={'promqail-llm-app'}\n              className={cx(styles.textPadding, styles.noMargin)}\n            >\n              Query Advisor is currently in Private Preview. Feedback is appreciated and can be provided on explanations\n              and suggestions.\n            </Alert>\n\n            {/* don't show this message again, store in localstorage */}\n            <div className={styles.textPadding}>\n              <Checkbox\n                checked={state.indicateCheckbox}\n                value={state.indicateCheckbox}\n                onChange={() => {\n                  const val = store.getBool(SKIP_STARTING_MESSAGE, false);\n                  store.set(SKIP_STARTING_MESSAGE, !val);\n                  dispatch(indicateCheckbox(!val));\n                }}\n                label=\"Don't show this message again\"\n              />\n            </div>\n            <div className={styles.rightButtonsWrapper}>\n              <div className={styles.rightButtons}>\n                <Button className={styles.leftButton} fill=\"outline\" variant=\"secondary\" onClick={closeDrawer}>\n                  Cancel\n                </Button>\n                <Button\n                  fill=\"solid\"\n                  variant=\"primary\"\n                  onClick={() => dispatch(showStartingMessage(false))}\n                  data-testid={queryAssistanttestIds.securityInfoButton}\n                >\n                  Continue\n                </Button>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className={styles.bodySmall}>\n            {/* MAKE THIS TABLE RESPONSIVE */}\n            {/* FIT SUPER LONG METRICS AND LABELS IN HERE */}\n            <div className={styles.textPadding}>Here is the metric you have selected:</div>\n            <div className={styles.infoContainerWrapper}>\n              <div className={styles.infoContainer}>\n                <table className={styles.metricTable}>\n                  <tbody>\n                    <tr>\n                      <td className={styles.metricTableName}>metric</td>\n                      <td className={styles.metricTableValue}>{state.query.metric}</td>\n                      <td>\n                        <Button\n                          fill=\"outline\"\n                          variant=\"secondary\"\n                          onClick={closeDrawer}\n                          className={styles.metricTableButton}\n                          size={'sm'}\n                        >\n                          Choose new metric\n                        </Button>\n                      </td>\n                    </tr>\n                    {state.query.labels.map((label, idx) => {\n                      const text = idx === 0 ? 'labels' : '';\n                      return (\n                        <tr key={`${label.label}-${idx}`}>\n                          <td>{text}</td>\n                          <td className={styles.metricTableValue}>{`${label.label}${label.op}${label.value}`}</td>\n                          <td> </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            {/* Ask if you know what you want to query? */}\n            {!state.askForQueryHelp && state.interactions.length === 0 && (\n              <>\n                <div className={styles.queryQuestion}>Do you know what you want to query?</div>\n                <div className={styles.rightButtonsWrapper}>\n                  <div className={styles.rightButtons}>\n                    <Button\n                      className={styles.leftButton}\n                      fill=\"solid\"\n                      variant=\"secondary\"\n                      data-testid={queryAssistanttestIds.clickForHistorical}\n                      onClick={() => {\n                        const isLoading = true;\n                        const suggestionType = SuggestionType.Historical;\n                        dispatch(addInteraction({ suggestionType, isLoading }));\n                        reportInteraction('grafana_prometheus_promqail_know_what_you_want_to_query', {\n                          promVisualQuery: query,\n                          doYouKnow: 'no',\n                        });\n                        promQailSuggest(dispatch, 0, query, labelNames, datasource);\n                      }}\n                    >\n                      No\n                    </Button>\n                    <Button\n                      fill=\"solid\"\n                      variant=\"primary\"\n                      data-testid={queryAssistanttestIds.clickForAi}\n                      onClick={() => {\n                        reportInteraction('grafana_prometheus_promqail_know_what_you_want_to_query', {\n                          promVisualQuery: query,\n                          doYouKnow: 'yes',\n                        });\n                        const isLoading = false;\n                        const suggestionType = SuggestionType.AI;\n                        dispatch(addInteraction({ suggestionType, isLoading }));\n                      }}\n                    >\n                      Yes\n                    </Button>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {state.interactions.map((interaction: Interaction, idx: number) => {\n              return (\n                <div key={idx}>\n                  {interaction.suggestionType === SuggestionType.AI ? (\n                    <>\n                      <div className={styles.textPadding}>What kind of data do you want to see with your metric?</div>\n                      <div className={cx(styles.secondaryText, styles.bottomMargin)}>\n                        <div>You do not need to enter in a metric or a label again in the prompt.</div>\n                        <div>Example: I want to monitor request latency, not errors.</div>\n                      </div>\n                      <div className={styles.inputPadding}>\n                        <Input\n                          value={interaction.prompt}\n                          spellCheck={false}\n                          placeholder=\"Enter prompt\"\n                          disabled={interaction.suggestions.length > 0}\n                          onChange={(e) => {\n                            const prompt = e.currentTarget.value;\n\n                            const payload = {\n                              idx: idx,\n                              interaction: { ...interaction, prompt },\n                            };\n\n                            dispatch(updateInteraction(payload));\n                          }}\n                        />\n                      </div>\n                      {interaction.suggestions.length === 0 ? (\n                        interaction.isLoading ? (\n                          <>\n                            <div className={styles.loadingMessageContainer}>\n                              Waiting for OpenAI <Spinner className={styles.floatRight} />\n                            </div>\n                          </>\n                        ) : (\n                          <>\n                            <div className={styles.rightButtonsWrapper}>\n                              <div className={styles.rightButtons}>\n                                <Button\n                                  className={styles.leftButton}\n                                  fill=\"outline\"\n                                  variant=\"secondary\"\n                                  onClick={closeDrawer}\n                                >\n                                  Cancel\n                                </Button>\n                                <Button\n                                  className={styles.leftButton}\n                                  fill=\"outline\"\n                                  variant=\"secondary\"\n                                  onClick={() => {\n                                    // JUST SUGGEST QUERIES AND SHOW THE LIST\n                                    const newInteraction: Interaction = {\n                                      ...interaction,\n                                      suggestionType: SuggestionType.Historical,\n                                      isLoading: true,\n                                    };\n\n                                    const payload = {\n                                      idx: idx,\n                                      interaction: newInteraction,\n                                    };\n\n                                    reportInteraction('grafana_prometheus_promqail_suggest_query_instead', {\n                                      promVisualQuery: query,\n                                    });\n\n                                    dispatch(updateInteraction(payload));\n                                    promQailSuggest(dispatch, idx, query, labelNames, datasource, newInteraction);\n                                  }}\n                                >\n                                  Suggest queries instead\n                                </Button>\n                                <Button\n                                  fill=\"solid\"\n                                  variant=\"primary\"\n                                  data-testid={queryAssistanttestIds.submitPrompt + idx}\n                                  onClick={() => {\n                                    const newInteraction: Interaction = {\n                                      ...interaction,\n                                      isLoading: true,\n                                    };\n\n                                    const payload = {\n                                      idx: idx,\n                                      interaction: newInteraction,\n                                    };\n\n                                    reportInteraction('grafana_prometheus_promqail_prompt_submitted', {\n                                      promVisualQuery: query,\n                                      prompt: interaction.prompt,\n                                    });\n\n                                    dispatch(updateInteraction(payload));\n                                    // add the suggestions in the API call\n                                    promQailSuggest(dispatch, idx, query, labelNames, datasource, interaction);\n                                  }}\n                                >\n                                  Submit\n                                </Button>\n                              </div>\n                            </div>\n                          </>\n                        )\n                      ) : (\n                        // LIST OF SUGGESTED QUERIES FROM AI\n                        <QuerySuggestionContainer\n                          suggestionType={SuggestionType.AI}\n                          querySuggestions={interaction.suggestions}\n                          closeDrawer={closeDrawer}\n                          nextInteraction={() => {\n                            const isLoading = false;\n                            const suggestionType = SuggestionType.AI;\n                            dispatch(addInteraction({ suggestionType, isLoading }));\n                          }}\n                          queryExplain={(suggIdx: number) =>\n                            interaction.suggestions[suggIdx].explanation === ''\n                              ? promQailExplain(dispatch, idx, query, interaction, suggIdx, datasource)\n                              : interaction.suggestions[suggIdx].explanation\n                          }\n                          onChange={onChange}\n                          prompt={interaction.prompt ?? ''}\n                        />\n                      )}\n                    </>\n                  ) : // HISTORICAL SUGGESTIONS\n                  interaction.isLoading ? (\n                    <>\n                      <div className={styles.loadingMessageContainer}>\n                        Waiting for OpenAI <Spinner className={styles.floatRight} />\n                      </div>\n                    </>\n                  ) : (\n                    // LIST OF SUGGESTED QUERIES FROM HISTORICAL DATA\n                    <QuerySuggestionContainer\n                      suggestionType={SuggestionType.Historical}\n                      querySuggestions={interaction.suggestions}\n                      closeDrawer={closeDrawer}\n                      nextInteraction={() => {\n                        const isLoading = false;\n                        const suggestionType = SuggestionType.AI;\n                        dispatch(addInteraction({ suggestionType, isLoading }));\n                      }}\n                      queryExplain={(suggIdx: number) =>\n                        interaction.suggestions[suggIdx].explanation === ''\n                          ? promQailExplain(dispatch, idx, query, interaction, suggIdx, datasource)\n                          : interaction.suggestions[suggIdx].explanation\n                      }\n                      onChange={onChange}\n                      prompt={interaction.prompt ?? ''}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n      <div ref={responsesEndRef} />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    sectionPadding: css({\n      padding: '20px',\n    }),\n    header: css({\n      display: 'flex',\n\n      button: {\n        marginLeft: 'auto',\n      },\n    }),\n    iconSection: css({\n      padding: '0 0 10px 0',\n      color: `${theme.colors.text.secondary}`,\n\n      img: {\n        paddingRight: '4px',\n      },\n    }),\n    rightButtonsWrapper: css({\n      display: 'flex',\n    }),\n    rightButtons: css({\n      marginLeft: 'auto',\n    }),\n    leftButton: css({\n      marginRight: '10px',\n    }),\n    dataList: css({\n      padding: '0px 28px 0px 28px',\n    }),\n    textPadding: css({\n      paddingBottom: '12px',\n    }),\n    containerPadding: css({\n      padding: '28px',\n    }),\n    infoContainer: css({\n      border: `${theme.colors.border.strong}`,\n      padding: '16px',\n      backgroundColor: `${theme.colors.background.secondary}`,\n      borderRadius: `8px`,\n      borderBottomLeftRadius: 0,\n    }),\n    infoContainerWrapper: css({\n      paddingBottom: '24px',\n    }),\n    metricTable: css({\n      width: '100%',\n    }),\n    metricTableName: css({\n      width: '15%',\n    }),\n    metricTableValue: css({\n      fontFamily: `${theme.typography.fontFamilyMonospace}`,\n      fontSize: `${theme.typography.bodySmall.fontSize}`,\n      overflow: 'scroll',\n      textWrap: 'nowrap',\n      maxWidth: '150px',\n      width: '60%',\n      maskImage: `linear-gradient(to right, rgba(0, 0, 0, 1) 90%, rgba(0, 0, 0, 0))`,\n    }),\n    metricTableButton: css({\n      float: 'right',\n    }),\n    queryQuestion: css({\n      textAlign: 'end',\n      padding: '8px 0',\n    }),\n    secondaryText: css({\n      color: `${theme.colors.text.secondary}`,\n    }),\n    loadingMessageContainer: css({\n      border: `${theme.colors.border.strong}`,\n      padding: `16px`,\n      backgroundColor: `${theme.colors.background.secondary}`,\n      marginBottom: `20px`,\n      borderRadius: `8px`,\n      color: `${theme.colors.text.secondary}`,\n      fontStyle: 'italic',\n    }),\n    floatRight: css({\n      float: 'right',\n    }),\n    codeText: css({\n      fontFamily: `${theme.typography.fontFamilyMonospace}`,\n      fontSize: `${theme.typography.bodySmall.fontSize}`,\n    }),\n    bodySmall: css({\n      fontSize: `${theme.typography.bodySmall.fontSize}`,\n    }),\n    explainPadding: css({\n      paddingLeft: '26px',\n    }),\n    bottomMargin: css({\n      marginBottom: '20px',\n    }),\n    topPadding: css({\n      paddingTop: '22px',\n    }),\n    doc: css({\n      textDecoration: 'underline',\n    }),\n    afterButtons: css({\n      display: 'flex',\n      justifyContent: 'flex-end',\n    }),\n    feedbackStyle: css({\n      margin: 0,\n      textAlign: 'right',\n      paddingTop: '22px',\n      paddingBottom: '22px',\n    }),\n    nextInteractionHeight: css({\n      height: '88px',\n    }),\n    center: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    }),\n    inputPadding: css({\n      paddingBottom: '24px',\n    }),\n    querySuggestion: css({\n      display: 'flex',\n      flexWrap: 'nowrap',\n    }),\n    longCode: css({\n      width: '90%',\n      textWrap: 'nowrap',\n      overflow: 'scroll',\n      maskImage: `linear-gradient(to right, rgba(0, 0, 0, 1) 90%, rgba(0, 0, 0, 0))`,\n\n      div: {\n        display: 'inline-block',\n      },\n    }),\n    useButton: css({\n      marginLeft: 'auto',\n    }),\n    suggestionFeedback: css({\n      textAlign: 'left',\n    }),\n    feedbackQuestion: css({\n      display: 'flex',\n      padding: '8px 0px',\n      h6: { marginBottom: 0 },\n      i: {\n        marginTop: '1px',\n      },\n    }),\n    explationTextInput: css({\n      paddingLeft: '24px',\n    }),\n    submitFeedback: css({\n      padding: '16px 0',\n    }),\n    noMargin: css({\n      margin: 0,\n    }),\n    enableButtonTooltip: css({\n      padding: 8,\n    }),\n    enableButtonTooltipText: css({\n      color: `${theme.colors.text.secondary}`,\n      ul: {\n        marginLeft: 16,\n      },\n    }),\n    link: css({\n      color: `${theme.colors.text.link} !important`,\n    }),\n  };\n};\n\nexport const queryAssistanttestIds = {\n  promQail: 'prom-qail',\n  securityInfoButton: 'security-info-button',\n  clickForHistorical: 'click-for-historical',\n  clickForAi: 'click-for-ai',\n  submitPrompt: 'submit-prompt',\n  refinePrompt: 'refine-prompt',\n};\n\nconst stateSlice = createSlice({\n  name: 'metrics-modal-state',\n  initialState: initialState(),\n  reducers: {\n    showExplainer: (state, action: PayloadAction<boolean>) => {\n      state.showExplainer = action.payload;\n    },\n    showStartingMessage: (state, action: PayloadAction<boolean>) => {\n      state.showStartingMessage = action.payload;\n    },\n    indicateCheckbox: (state, action: PayloadAction<boolean>) => {\n      state.indicateCheckbox = action.payload;\n    },\n    askForQueryHelp: (state, action: PayloadAction<boolean>) => {\n      state.askForQueryHelp = action.payload;\n    },\n    /*\n     * start working on a collection of interactions\n     * {\n     *  askForhelp y n\n     *  prompt question\n     *  queries querySuggestions\n     * }\n     *\n     */\n    addInteraction: (state, action: PayloadAction<{ suggestionType: SuggestionType; isLoading: boolean }>) => {\n      // AI or Historical?\n      const interaction = createInteraction(action.payload.suggestionType, action.payload.isLoading);\n      const interactions = state.interactions;\n      state.interactions = interactions.concat([interaction]);\n    },\n    updateInteraction: (state, action: PayloadAction<{ idx: number; interaction: Interaction }>) => {\n      // update the interaction by index\n      // will most likely be the last interaction but we might update previous by giving them cues of helpful or not\n      const index = action.payload.idx;\n      const updInteraction = action.payload.interaction;\n\n      state.interactions = state.interactions.map((interaction: Interaction, idx: number) => {\n        if (idx === index) {\n          return updInteraction;\n        }\n\n        return interaction;\n      });\n    },\n  },\n});\n\n// actions to update the state\nexport const { showStartingMessage, indicateCheckbox, addInteraction, updateInteraction } = stateSlice.actions;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/promQail/QueryAssistantButton.tsx\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Tooltip, useTheme2 } from '@grafana/ui';\n\nimport { getStyles } from './PromQail';\nimport AI_Logo_color from './resources/AI_Logo_color.svg';\n\nexport type Props = {\n  llmAppEnabled: boolean;\n  metric: string;\n  setShowDrawer: (show: boolean) => void;\n};\n\nexport function QueryAssistantButton(props: Props) {\n  const { llmAppEnabled, metric, setShowDrawer } = props;\n\n  const llmAppDisabled = !llmAppEnabled;\n  const noMetricSelected = !metric;\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const button = () => {\n    return (\n      <Button\n        variant={'secondary'}\n        onClick={() => {\n          reportInteraction('grafana_prometheus_promqail_ai_button_clicked', {\n            metric: metric,\n          });\n          setShowDrawer(true);\n        }}\n        disabled={!metric || !llmAppEnabled}\n        data-testid={selectors.components.DataSource.Prometheus.queryEditor.builder.queryAdvisor}\n      >\n        <img height={16} src={AI_Logo_color} alt=\"AI logo black and white\" />\n        {'\\u00A0'}Get query suggestions\n      </Button>\n    );\n  };\n\n  const selectMetricMessage = (\n    <Tooltip content={'First, select a metric.'} placement={'bottom-end'}>\n      {button()}\n    </Tooltip>\n  );\n\n  const llmAppMessage = (\n    <Tooltip\n      interactive={true}\n      placement={'auto-end'}\n      content={\n        <div className={styles.enableButtonTooltip}>\n          <h6>Query Advisor is disabled</h6>\n          <div className={styles.enableButtonTooltipText}>To enable Query Advisor you must:</div>\n          <div className={styles.enableButtonTooltipText}>\n            <ul>\n              <li>\n                <a\n                  href={'https://grafana.com/docs/grafana-cloud/alerting-and-irm/machine-learning/llm-plugin/'}\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                  className={styles.link}\n                >\n                  Install and enable the LLM plugin\n                </a>\n              </li>\n              <li>Select a metric</li>\n            </ul>\n          </div>\n        </div>\n      }\n    >\n      {button()}\n    </Tooltip>\n  );\n\n  if (llmAppDisabled) {\n    return llmAppMessage;\n  } else if (noMetricSelected) {\n    return selectMetricMessage;\n  } else {\n    return button();\n  }\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilder.tsx\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { DataSourceApi, PanelData } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorRow } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Drawer } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport promqlGrammar from '../../promql';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationList } from '../shared/OperationList';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { OperationsEditorRow } from '../shared/OperationsEditorRow';\nimport { QueryBuilderHints } from '../shared/QueryBuilderHints';\nimport { RawQuery } from '../shared/RawQuery';\nimport { QueryBuilderOperation } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { MetricsLabelsSection } from './MetricsLabelsSection';\nimport { NestedQueryList } from './NestedQueryList';\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './PromQueryBuilderExplained';\nimport { PromQail } from './promQail/PromQail';\nimport { QueryAssistantButton } from './promQail/QueryAssistantButton';\nimport { isLLMPluginEnabled } from './promQail/state/helpers';\n\nexport interface PromQueryBuilderProps {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport const PromQueryBuilder = React.memo<PromQueryBuilderProps>((props) => {\n  const { datasource, query, onChange, onRunQuery, data, showExplain } = props;\n  const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>();\n  const [showDrawer, setShowDrawer] = useState<boolean>(false);\n  const [llmAppEnabled, updateLlmAppEnabled] = useState<boolean>(false);\n  const { prometheusPromQAIL } = config.featureToggles; // AI/ML + Prometheus\n\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  const initHints = datasource.getInitHints();\n\n  useEffect(() => {\n    async function checkLlms() {\n      const check = await isLLMPluginEnabled();\n      updateLlmAppEnabled(check);\n    }\n\n    if (prometheusPromQAIL) {\n      checkLlms();\n    }\n  }, [prometheusPromQAIL]);\n\n  return (\n    <>\n      {prometheusPromQAIL && showDrawer && (\n        <Drawer closeOnMaskClick={false} onClose={() => setShowDrawer(false)}>\n          <PromQail\n            query={query}\n            closeDrawer={() => setShowDrawer(false)}\n            onChange={onChange}\n            datasource={datasource}\n          />\n        </Drawer>\n      )}\n      <EditorRow>\n        <MetricsLabelsSection query={query} onChange={onChange} datasource={datasource} />\n      </EditorRow>\n      {initHints.length ? (\n        <div className=\"query-row-break\">\n          <div className=\"prom-query-field-info text-warning\">\n            {initHints[0].label}{' '}\n            {initHints[0].fix ? (\n              <button type=\"button\" className={'text-warning'}>\n                {initHints[0].fix.label}\n              </button>\n            ) : null}\n          </div>\n        </div>\n      ) : null}\n      {showExplain && (\n        <OperationExplainedBox\n          stepNumber={1}\n          title={<RawQuery query={`${query.metric} ${promQueryModeller.renderLabels(query.labels)}`} lang={lang} />}\n        >\n          {EXPLAIN_LABEL_FILTER_CONTENT}\n        </OperationExplainedBox>\n      )}\n      <OperationsEditorRow>\n        <OperationList<PromVisualQuery>\n          queryModeller={promQueryModeller}\n          // eslint-ignore\n          datasource={datasource as DataSourceApi}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          highlightedOp={highlightedOp}\n        />\n        {prometheusPromQAIL && (\n          <div\n            className={css({\n              padding: '0 0 0 6px',\n            })}\n          >\n            <QueryAssistantButton llmAppEnabled={llmAppEnabled} metric={query.metric} setShowDrawer={setShowDrawer} />\n          </div>\n        )}\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.builder.hints}>\n          <QueryBuilderHints<PromVisualQuery>\n            datasource={datasource}\n            query={query}\n            onChange={onChange}\n            data={data}\n            queryModeller={promQueryModeller}\n            buildVisualQueryFromString={buildVisualQueryFromString}\n          />\n        </div>\n      </OperationsEditorRow>\n      {showExplain && (\n        <OperationListExplained<PromVisualQuery>\n          lang={lang}\n          query={query}\n          stepNumber={2}\n          queryModeller={promQueryModeller}\n          onMouseEnter={(op) => setHighlightedOp(op)}\n          onMouseLeave={() => setHighlightedOp(undefined)}\n        />\n      )}\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      )}\n    </>\n  );\n});\n\nPromQueryBuilder.displayName = 'PromQueryBuilder';\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/QueryPreview.tsx\nimport React from 'react';\n\nimport { EditorFieldGroup, EditorRow } from '@grafana/experimental';\n\nimport promqlGrammar from '../../promql';\nimport { RawQuery } from '../shared/RawQuery';\n\nexport interface QueryPreviewProps {\n  query: string;\n}\n\nexport function QueryPreview({ query }: QueryPreviewProps) {\n  if (!query) {\n    return null;\n  }\n\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <RawQuery query={query} lang={{ grammar: promqlGrammar, name: 'promql' }} />\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderContainer.tsx\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { PanelData } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\nimport { getSettings, MetricsModalSettings } from './metrics-modal/state/state';\n\nexport interface PromQueryBuilderContainerProps {\n  query: PromQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: PromVisualQuery;\n  expr: string;\n}\n\nconst prometheusMetricEncyclopedia = config.featureToggles.prometheusMetricEncyclopedia;\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props: PromQueryBuilderContainerProps) {\n  const { query, onChange, onRunQuery, datasource, data, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, { expr: query.expr });\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n\n    if (prometheusMetricEncyclopedia) {\n      dispatch(\n        setMetricsModalSettings({\n          useBackend: query.useBackend ?? false,\n          disableTextWrap: query.disableTextWrap ?? false,\n          fullMetaSearch: query.fullMetaSearch ?? false,\n          includeNullMetadata: query.includeNullMetadata ?? true,\n        })\n      );\n    }\n  }, [query]);\n\n  useEffect(() => {\n    datasource.languageProvider.start(data?.timeRange);\n  }, [data?.timeRange, datasource.languageProvider]);\n\n  const onVisQueryChange = (visQuery: PromVisualQuery) => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n\n    if (prometheusMetricEncyclopedia) {\n      const metricsModalSettings = getSettings(visQuery);\n      onChange({ ...props.query, expr: expr, ...metricsModalSettings });\n    } else {\n      onChange({ ...props.query, expr: expr });\n    }\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <PromQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        data={data}\n        showExplain={showExplain}\n      />\n      {<QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst initialState: State = {\n  expr: '',\n};\n\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: PromVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload ?? '');\n\n        state.visQuery = parseResult.query;\n      }\n    },\n    setMetricsModalSettings: (state, action: PayloadAction<MetricsModalSettings>) => {\n      if (state.visQuery && prometheusMetricEncyclopedia) {\n        state.visQuery.useBackend = action.payload.useBackend;\n        state.visQuery.disableTextWrap = action.payload.disableTextWrap;\n        state.visQuery.fullMetaSearch = action.payload.fullMetaSearch;\n        state.visQuery.includeNullMetadata = action.payload.includeNullMetadata;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged, setMetricsModalSettings } = stateSlice.actions;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromExemplarField.tsx\nimport { css, cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, InlineLabel, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  onChange: (exemplar: boolean) => void;\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  'data-testid'?: string;\n}\n\nexport function PromExemplarField({ datasource, onChange, query, ...rest }: Props) {\n  const [error, setError] = useState<string | null>(null);\n  const styles = useStyles2(getStyles);\n  const prevError = usePrevious(error);\n\n  useEffect(() => {\n    if (!datasource.exemplarsAvailable) {\n      setError('Exemplars for this query are not available');\n      onChange(false);\n    } else if (query.instant && !query.range) {\n      setError('Exemplars are not available for instant queries');\n      onChange(false);\n    } else {\n      setError(null);\n      // If error is cleared, we want to change exemplar to true\n      if (prevError && !error) {\n        onChange(true);\n      }\n    }\n  }, [datasource.exemplarsAvailable, query.instant, query.range, onChange, prevError, error]);\n\n  const iconButtonStyles = cx(\n    {\n      [styles.activeIcon]: !!query.exemplar,\n    },\n    styles.eyeIcon\n  );\n\n  return (\n    <InlineLabel width=\"auto\" data-testid={rest['data-testid']}>\n      <Tooltip content={error ?? ''}>\n        <div className={styles.iconWrapper}>\n          Exemplars\n          <IconButton\n            name=\"eye\"\n            tooltip={!!query.exemplar ? 'Disable query with exemplars' : 'Enable query with exemplars'}\n            disabled={!!error}\n            className={iconButtonStyles}\n            onClick={() => {\n              onChange(!query.exemplar);\n            }}\n          />\n        </div>\n      </Tooltip>\n    </InlineLabel>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    eyeIcon: css({\n      marginLeft: theme.spacing(2),\n    }),\n    activeIcon: css({\n      color: theme.colors.primary.main,\n    }),\n    iconWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n    }),\n  };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromExploreExtraField.tsx\nimport { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\n\nexport interface PromExploreExtraFieldProps {\n  query: PromQuery;\n  onChange: (value: PromQuery) => void;\n  onRunQuery: () => void;\n  datasource: PrometheusDatasource;\n}\n\nexport const PromExploreExtraField = memo(({ query, datasource, onChange, onRunQuery }: PromExploreExtraFieldProps) => {\n  const rangeOptions = getQueryTypeOptions(true);\n  const prevQuery = usePrevious(query);\n\n  const onExemplarChange = useCallback(\n    (exemplar: boolean) => {\n      if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n        onChange({ ...query, exemplar });\n      }\n    },\n    [prevQuery, query, onChange]\n  );\n\n  function onChangeQueryStep(interval: string) {\n    onChange({ ...query, interval });\n  }\n\n  function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    if (e.currentTarget.value !== query.interval) {\n      onChangeQueryStep(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n    }\n  }\n\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  return (\n    <div\n      aria-label=\"Prometheus extra field\"\n      className=\"gf-form-inline\"\n      data-testid={promExploreExtraFieldTestIds.extraFieldEditor}\n    >\n      {/*Query type field*/}\n      <div\n        data-testid={promExploreExtraFieldTestIds.queryTypeField}\n        className={cx(\n          'gf-form explore-input-margin',\n          css({\n            flexWrap: 'nowrap',\n          })\n        )}\n        aria-label=\"Query type field\"\n      >\n        <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n        <RadioButtonGroup\n          options={rangeOptions}\n          value={query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range'}\n          onChange={onQueryTypeChange}\n        />\n      </div>\n      {/*Step field*/}\n      <div\n        data-testid={promExploreExtraFieldTestIds.stepField}\n        className={cx(\n          'gf-form',\n          css({\n            flexWrap: 'nowrap',\n          })\n        )}\n        aria-label=\"Step field\"\n      >\n        <InlineFormLabel\n          width={6}\n          tooltip={\n            'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)'\n          }\n        >\n          Min step\n        </InlineFormLabel>\n        <input\n          type={'text'}\n          className=\"gf-form-input width-4\"\n          placeholder={'auto'}\n          onChange={onStepChange}\n          onKeyDown={onReturnKeyDown}\n          value={query.interval ?? ''}\n        />\n      </div>\n\n      <PromExemplarField onChange={onExemplarChange} datasource={datasource} query={query} />\n    </div>\n  );\n});\n\nPromExploreExtraField.displayName = 'PromExploreExtraField';\n\nexport function getQueryTypeOptions(includeBoth: boolean) {\n  const rangeOptions = [\n    { value: 'range', label: 'Range', description: 'Run query over a range of time' },\n    {\n      value: 'instant',\n      label: 'Instant',\n      description: 'Run query against a single point in time. For this query, the \"To\" time is used',\n    },\n  ];\n\n  if (includeBoth) {\n    rangeOptions.push({ value: 'both', label: 'Both', description: 'Run an Instant query and a Range query' });\n  }\n\n  return rangeOptions;\n}\n\nexport function getQueryTypeChangeHandler(query: PromQuery, onChange: (update: PromQuery) => void) {\n  return (queryType: string) => {\n    if (queryType === 'instant') {\n      onChange({ ...query, instant: true, range: false, exemplar: false });\n    } else if (queryType === 'range') {\n      onChange({ ...query, instant: false, range: true });\n    } else {\n      onChange({ ...query, instant: true, range: true });\n    }\n  };\n}\n\nexport const promExploreExtraFieldTestIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type',\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Collapse, useStyles2, Stack } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  collapsedInfo: string[];\n  children: React.ReactNode;\n}\n\nexport function QueryOptionGroup({ title, children, collapsedInfo }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <Collapse\n        className={styles.collapse}\n        collapsible\n        isOpen={isOpen}\n        onToggle={toggleOpen}\n        label={\n          <Stack gap={0}>\n            <h6 className={styles.title}>{title}</h6>\n            {!isOpen && (\n              <div className={styles.description}>\n                {collapsedInfo.map((x, i) => (\n                  <span key={i}>{x}</span>\n                ))}\n              </div>\n            )}\n          </Stack>\n        }\n      >\n        <div className={styles.body}>{children}</div>\n      </Collapse>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    collapse: css({\n      backgroundColor: 'unset',\n      border: 'unset',\n      marginBottom: 0,\n\n      ['> button']: {\n        padding: theme.spacing(0, 1),\n      },\n    }),\n    wrapper: css({\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'baseline',\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.bodySmall.fontWeight,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    tooltip: css({\n      marginRight: theme.spacing(0.25),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryLegendEditor.tsx\nimport React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/experimental';\nimport { AutoSizeInput, Select } from '@grafana/ui';\n\nimport { LegendFormatMode } from '../../types';\n\nexport interface PromQueryLegendEditorProps {\n  legendFormat: string | undefined;\n  onChange: (legendFormat: string) => void;\n  onRunQuery: () => void;\n}\n\nconst legendModeOptions = [\n  {\n    label: 'Auto',\n    value: LegendFormatMode.Auto,\n    description: 'Only includes unique labels',\n  },\n  { label: 'Verbose', value: LegendFormatMode.Verbose, description: 'All label names and values' },\n  { label: 'Custom', value: LegendFormatMode.Custom, description: 'Provide a naming template' },\n];\n\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\nexport const PromQueryLegendEditor = React.memo<PromQueryLegendEditorProps>(\n  ({ legendFormat, onChange, onRunQuery }) => {\n    const mode = getLegendMode(legendFormat);\n    const inputRef = useRef<HTMLInputElement | null>(null);\n\n    const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n      let newFormat = evt.currentTarget.value;\n      if (newFormat.length === 0) {\n        newFormat = LegendFormatMode.Auto;\n      }\n\n      if (newFormat !== legendFormat) {\n        onChange(newFormat);\n        onRunQuery();\n      }\n    };\n\n    const onLegendModeChanged = (value: SelectableValue<LegendFormatMode>) => {\n      switch (value.value!) {\n        case LegendFormatMode.Auto:\n          onChange(LegendFormatMode.Auto);\n          break;\n        case LegendFormatMode.Custom:\n          onChange('{{label_name}}');\n          setTimeout(() => {\n            inputRef.current?.focus();\n            inputRef.current?.setSelectionRange(2, 12, 'forward');\n          }, 10);\n          break;\n        case LegendFormatMode.Verbose:\n          onChange('');\n          break;\n      }\n      onRunQuery();\n    };\n\n    return (\n      <EditorField\n        label=\"Legend\"\n        tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n        data-testid={selectors.components.DataSource.Prometheus.queryEditor.legend}\n      >\n        <>\n          {mode === LegendFormatMode.Custom && (\n            <AutoSizeInput\n              id=\"legendFormat\"\n              minWidth={22}\n              placeholder=\"auto\"\n              defaultValue={legendFormat}\n              onCommitChange={onLegendFormatChanged}\n              ref={inputRef}\n            />\n          )}\n          {mode !== LegendFormatMode.Custom && (\n            <Select\n              inputId=\"legend.mode\"\n              isSearchable={false}\n              placeholder=\"Select legend mode\"\n              options={legendModeOptions}\n              width={22}\n              onChange={onLegendModeChanged}\n              value={legendModeOptions.find((x) => x.value === mode)}\n            />\n          )}\n        </>\n      </EditorField>\n    );\n  }\n);\n\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat: string | undefined) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  }\n\n  // Missing or empty legend format is the old verbose behavior\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat: string | undefined) {\n  const mode = getLegendMode(legendFormat);\n  if (mode !== LegendFormatMode.Custom) {\n    return legendModeOptions.find((x) => x.value === mode)?.label;\n  }\n  return legendFormat;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderOptions.tsx\nimport React, { SyntheticEvent } from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField, EditorRow, EditorSwitch } from '@grafana/experimental';\nimport { AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { PromQueryFormat } from '../../dataquery';\nimport { PromQuery } from '../../types';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\n\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from './PromQueryEditorSelector';\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\n\nexport interface UIOptions {\n  exemplars: boolean;\n  type: boolean;\n  format: boolean;\n  minStep: boolean;\n  legend: boolean;\n  resolution: boolean;\n}\n\nexport interface PromQueryBuilderOptionsProps {\n  query: PromQuery;\n  app?: CoreApp;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const PromQueryBuilderOptions = React.memo<PromQueryBuilderOptionsProps>(\n  ({ query, app, onChange, onRunQuery }) => {\n    const onChangeFormat = (value: SelectableValue<PromQueryFormat>) => {\n      onChange({ ...query, format: value.value });\n      onRunQuery();\n    };\n\n    const onChangeStep = (evt: React.FormEvent<HTMLInputElement>) => {\n      onChange({ ...query, interval: evt.currentTarget.value.trim() });\n      onRunQuery();\n    };\n\n    const queryTypeOptions = getQueryTypeOptions(\n      app === CoreApp.Explore || app === CoreApp.Correlations || app === CoreApp.PanelEditor\n    );\n\n    const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n    const onExemplarChange = (event: SyntheticEvent<HTMLInputElement>) => {\n      const isEnabled = event.currentTarget.checked;\n      onChange({ ...query, exemplar: isEnabled });\n      onRunQuery();\n    };\n\n    const onIntervalFactorChange = (value: SelectableValue<number>) => {\n      onChange({ ...query, intervalFactor: value.value });\n      onRunQuery();\n    };\n\n    const formatOption = FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0];\n    const queryTypeValue = getQueryTypeValue(query);\n    const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryTypeValue)!.label;\n\n    return (\n      <EditorRow>\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.options}>\n          <QueryOptionGroup\n            title=\"Options\"\n            collapsedInfo={getCollapsedInfo(query, formatOption.label!, queryTypeLabel, app)}\n          >\n            <PromQueryLegendEditor\n              legendFormat={query.legendFormat}\n              onChange={(legendFormat) => onChange({ ...query, legendFormat })}\n              onRunQuery={onRunQuery}\n            />\n            <EditorField\n              label=\"Min step\"\n              tooltip={\n                <>\n                  An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n                  <code>$__interval</code> and <code>$__rate_interval</code> variables.\n                </>\n              }\n            >\n              <AutoSizeInput\n                type=\"text\"\n                aria-label=\"Set lower limit for the step parameter\"\n                placeholder={'auto'}\n                minWidth={10}\n                onCommitChange={onChangeStep}\n                defaultValue={query.interval}\n                id={selectors.components.DataSource.Prometheus.queryEditor.step}\n              />\n            </EditorField>\n            <EditorField label=\"Format\">\n              <Select\n                data-testid={selectors.components.DataSource.Prometheus.queryEditor.format}\n                value={formatOption}\n                allowCustomValue\n                onChange={onChangeFormat}\n                options={FORMAT_OPTIONS}\n              />\n            </EditorField>\n            <EditorField label=\"Type\" data-testid={selectors.components.DataSource.Prometheus.queryEditor.type}>\n              <RadioButtonGroup options={queryTypeOptions} value={queryTypeValue} onChange={onQueryTypeChange} />\n            </EditorField>\n            {shouldShowExemplarSwitch(query, app) && (\n              <EditorField label=\"Exemplars\">\n                <EditorSwitch\n                  value={query.exemplar || false}\n                  onChange={onExemplarChange}\n                  id={selectors.components.DataSource.Prometheus.queryEditor.exemplars}\n                />\n              </EditorField>\n            )}\n            {query.intervalFactor && query.intervalFactor > 1 && (\n              <EditorField label=\"Resolution\">\n                <Select\n                  aria-label=\"Select resolution\"\n                  isSearchable={false}\n                  options={INTERVAL_FACTOR_OPTIONS}\n                  onChange={onIntervalFactorChange}\n                  value={INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor)}\n                />\n              </EditorField>\n            )}\n          </QueryOptionGroup>\n        </div>\n      </EditorRow>\n    );\n  }\n);\n\nfunction shouldShowExemplarSwitch(query: PromQuery, app?: CoreApp) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query: PromQuery) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query: PromQuery, formatOption: string, queryType: string, app?: CoreApp): string[] {\n  const items: string[] = [];\n\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n  items.push(`Step: ${query.interval ?? 'auto'}`);\n  items.push(`Type: ${queryType}`);\n\n  if (shouldShowExemplarSwitch(query, app)) {\n    if (query.exemplar) {\n      items.push(`Exemplars: true`);\n    } else {\n      items.push(`Exemplars: false`);\n    }\n  }\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { IconButton, Text, Stack } from '@grafana/ui';\n\nimport {\n  CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT,\n  isSuggestionsIncompleteEvent,\n} from '../../components/monaco-query-field/monaco-completion-provider/data_provider';\nimport { PromQueryEditorProps } from '../../components/types';\nimport { QueryEditorMode } from '../shared/types';\n\ninterface Props {\n  datasourceUid: PromQueryEditorProps['datasource']['uid'];\n  editorMode: QueryEditorMode;\n}\n\nexport function PromQueryCodeEditorAutocompleteInfo(props: Readonly<Props>) {\n  const [autocompleteLimit, setAutocompleteLimit] = useState('n');\n  const [autocompleteLimitExceeded, setAutocompleteLimitExceeded] = useState(false);\n  const handleSuggestionsIncompleteEvent = useCallback(\n    (e: Event) => {\n      if (!isSuggestionsIncompleteEvent(e)) {\n        return;\n      }\n\n      if (e.detail.datasourceUid === props.datasourceUid) {\n        setAutocompleteLimitExceeded(true);\n        setAutocompleteLimit(e.detail.limit.toString());\n      }\n    },\n    [props.datasourceUid]\n  );\n\n  useEffect(() => {\n    addEventListener(CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT, handleSuggestionsIncompleteEvent);\n\n    return () => {\n      removeEventListener(CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT, handleSuggestionsIncompleteEvent);\n    };\n  }, [handleSuggestionsIncompleteEvent]);\n\n  const showCodeModeAutocompleteDisclaimer = (): boolean => {\n    return (\n      Boolean(config.featureToggles.prometheusCodeModeMetricNamesSearch) &&\n      props.editorMode === QueryEditorMode.Code &&\n      autocompleteLimitExceeded\n    );\n  };\n\n  if (!showCodeModeAutocompleteDisclaimer()) {\n    return null;\n  }\n\n  return (\n    <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsCountInfo}>\n      <Stack direction=\"row\" gap={1}>\n        <Text color=\"secondary\" element=\"p\" italic={true}>\n          Autocomplete suggestions limited\n        </Text>\n        <IconButton\n          name=\"info-circle\"\n          tooltip={`The number of metric names exceeds the autocomplete limit. Only the ${autocompleteLimit}-most relevant metrics are displayed. You can adjust the threshold in the data source settings.`}\n        />\n      </Stack>\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryEditorSelector.tsx\nimport { isEqual, map } from 'lodash';\nimport React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal, Space } from '@grafana/ui';\n\nimport { PromQueryEditorProps } from '../../components/types';\nimport { PromQueryFormat } from '../../dataquery';\nimport { PromQuery } from '../../types';\nimport { QueryPatternsModal } from '../QueryPatternsModal';\nimport { promQueryEditorExplainKey, useFlag } from '../hooks/useFlag';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults } from '../state';\n\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\nimport { PromQueryCodeEditorAutocompleteInfo } from './PromQueryCodeEditorAutocompleteInfo';\n\nexport const FORMAT_OPTIONS: Array<SelectableValue<PromQueryFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Heatmap', value: 'heatmap' },\n];\n\nexport const INTERVAL_FACTOR_OPTIONS: Array<SelectableValue<number>> = map([1, 2, 3, 4, 5, 10], (value: number) => ({\n  value,\n  label: '1/' + value,\n}));\n\ntype Props = PromQueryEditorProps;\n\nexport const PromQueryEditorSelector = React.memo<Props>((props) => {\n  const {\n    onChange,\n    onRunQuery,\n    data,\n    app,\n    onAddQuery,\n    datasource: { defaultEditor },\n    queries,\n  } = props;\n\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const { flag: explain, setFlag: setExplain } = useFlag(promQueryEditorExplainKey);\n\n  const query = getQueryWithDefaults(props.query, app, defaultEditor);\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n        newEditor: newMetricEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newMetricEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: PromQuery) => {\n    if (!isEqual(query, props.query)) {\n      setDataIsStale(true);\n    }\n    onChange(query);\n  };\n\n  const onShowExplainChange = (e: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(e.currentTarget.checked);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Parsing error: Switch to the builder mode?\"\n        body=\"There is a syntax error, or the query structure cannot be visualized when switching to the builder mode. Parts of the query may be lost. \"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          changeEditorMode(query, QueryEditorMode.Builder, onChange);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <EditorHeader>\n        <Button\n          data-testid={selectors.components.QueryBuilder.queryPatterns}\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => setQueryPatternsModalOpen((prevValue) => !prevValue)}\n        >\n          Kick start your query\n        </Button>\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.explain}>\n          <QueryHeaderSwitch label=\"Explain\" value={explain} onChange={onShowExplainChange} />\n        </div>\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && app !== CoreApp.Correlations && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <PromQueryCodeEditorAutocompleteInfo datasourceUid={props.datasource.uid} editorMode={editorMode} />\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.editorToggle}>\n          <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n        </div>\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <PromQueryCodeEditor {...props} query={query} showExplain={explain} onChange={onChangeInternal} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <PromQueryBuilderContainer\n            query={query}\n            datasource={props.datasource}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            data={data}\n            showExplain={explain}\n          />\n        )}\n        <PromQueryBuilderOptions query={query} app={props.app} onChange={onChange} onRunQuery={onRunQuery} />\n      </EditorRows>\n    </>\n  );\n});\n\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromQueryEditorForAlerting.tsx\nimport React from 'react';\n\nimport { PromQueryField } from './PromQueryField';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorForAlerting(props: PromQueryEditorProps) {\n  const { datasource, query, range, data, onChange, onRunQuery } = props;\n\n  return (\n    <PromQueryField\n      datasource={datasource}\n      query={query}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      history={[]}\n      range={range}\n      data={data}\n      data-testid={alertingTestIds.editor}\n    />\n  );\n}\n\nexport const alertingTestIds = {\n  editor: 'prom-editor-cloud-alerting',\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromQueryEditorByApp.tsx\nimport React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\n\nimport { PromQueryEditorSelector } from '../querybuilder/components/PromQueryEditorSelector';\n\nimport { PromQueryEditorForAlerting } from './PromQueryEditorForAlerting';\nimport { PromQueryEditorProps } from './types';\n\nfunction PromQueryEditorByAppBase(props: PromQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <PromQueryEditorForAlerting {...props} />;\n    default:\n      return <PromQueryEditorSelector {...props} />;\n  }\n}\n\nexport const PromQueryEditorByApp = memo(PromQueryEditorByAppBase);\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromCheatSheet.tsx\nimport React from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { PromQuery } from '../types';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Request Rate',\n    expression: 'rate(http_request_total[5m])',\n    label:\n      'Given an HTTP request counter, this query calculates the per-second average request rate over the last 5 minutes.',\n  },\n  {\n    title: '95th Percentile of Request Latencies',\n    expression: 'histogram_quantile(0.95, sum(rate(prometheus_http_request_duration_seconds_bucket[5m])) by (le))',\n    label: 'Calculates the 95th percentile of HTTP request rate over 5 minute windows.',\n  },\n  {\n    title: 'Alerts Firing',\n    expression: 'sort_desc(sum(sum_over_time(ALERTS{alertstate=\"firing\"}[24h])) by (alertname))',\n    label: 'Sums up the alerts that have been firing over the last 24 hours.',\n  },\n  {\n    title: 'Step',\n    label:\n      'Defines the graph resolution using a duration format (15s, 1m, 3h, ...). Small steps create high-resolution graphs but can be slow over larger time ranges. Using a longer step lowers the resolution and smooths the graph by producing fewer datapoints. If no step is given the resolution is calculated automatically.',\n  },\n];\n\nexport const PromCheatSheet = (props: QueryEditorHelpProps<PromQuery>) => (\n  <div>\n    <h2>PromQL Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item, index) => (\n      <div className=\"cheat-sheet-item\" key={index}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        {item.expression ? (\n          <button\n            type=\"button\"\n            className=\"cheat-sheet-item__example\"\n            onClick={(e) => props.onClickExample({ refId: 'A', expr: item.expression })}\n          >\n            <code>{item.expression}</code>\n          </button>\n        ) : null}\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/AlertingSettingsOverhaul.tsx\nimport { cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourceJsonData, DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { InlineField, Switch, useTheme2 } from '@grafana/ui';\n\nimport { docsTip, overhaulStyles } from './ConfigEditor';\n\ninterface Props<T extends DataSourceJsonData>\n  extends Pick<DataSourcePluginOptionsEditorProps<T>, 'options' | 'onOptionsChange'> {}\n\ninterface AlertingConfig extends DataSourceJsonData {\n  manageAlerts?: boolean;\n}\n\nexport function AlertingSettingsOverhaul<T extends AlertingConfig>({\n  options,\n  onOptionsChange,\n}: Props<T>): JSX.Element {\n  const theme = useTheme2();\n  // imported GrafanaTheme2 from @grafana/data does not match type of same from @grafana/ui\n  // @ts-ignore\n  const styles = overhaulStyles(theme);\n\n  return (\n    <ConfigSubSection title=\"Alerting\" className={cx(styles.container, styles.alertingTop)}>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineField\n              labelWidth={30}\n              label=\"Manage alerts via Alerting UI\"\n              disabled={options.readOnly}\n              tooltip={\n                <>\n                  Manage alert rules for this data source. To manage other alerting resources, add an Alertmanager data\n                  source. {docsTip()}\n                </>\n              }\n              interactive={true}\n              className={styles.switchField}\n            >\n              <Switch\n                value={options.jsonData.manageAlerts !== false}\n                onChange={(event) =>\n                  onOptionsChange({\n                    ...options,\n                    jsonData: { ...options.jsonData, manageAlerts: event!.currentTarget.checked },\n                  })\n                }\n                id={selectors.components.DataSource.Prometheus.configPage.manageAlerts}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </div>\n    </ConfigSubSection>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/ExemplarSetting.tsx\nimport React, { useState } from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, Input, Switch, useTheme2 } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport { docsTip, overhaulStyles, PROM_CONFIG_LABEL_WIDTH } from './ConfigEditor';\n\ntype Props = {\n  value: ExemplarTraceIdDestination;\n  onChange: (value: ExemplarTraceIdDestination) => void;\n  onDelete: () => void;\n  disabled?: boolean;\n};\n\nexport function ExemplarSetting({ value, onChange, onDelete, disabled }: Props) {\n  const [isInternalLink, setIsInternalLink] = useState(Boolean(value.datasourceUid));\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField\n        label=\"Internal link\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        disabled={disabled}\n        tooltip={\n          <>\n            Enable this option if you have an internal link. When enabled, this reveals the data source selector. Select\n            the backend tracing data store for your exemplar data. {docsTip()}\n          </>\n        }\n        interactive={true}\n        className={styles.switchField}\n      >\n        <>\n          <Switch\n            value={isInternalLink}\n            data-testid={selectors.components.DataSource.Prometheus.configPage.internalLinkSwitch}\n            onChange={(ev) => setIsInternalLink(ev.currentTarget.checked)}\n          />\n        </>\n      </InlineField>\n\n      {isInternalLink ? (\n        <InlineField\n          label=\"Data source\"\n          labelWidth={PROM_CONFIG_LABEL_WIDTH}\n          tooltip={<>The data source the exemplar is going to navigate to. {docsTip()}</>}\n          disabled={disabled}\n          interactive={true}\n        >\n          <DataSourcePicker\n            filter={\n              config.featureToggles.azureMonitorPrometheusExemplars\n                ? undefined\n                : (ds) => ds.type !== 'grafana-azure-monitor-datasource'\n            }\n            tracing={true}\n            current={value.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n                url: undefined,\n              })\n            }\n          />\n        </InlineField>\n      ) : (\n        <InlineField\n          label=\"URL\"\n          labelWidth={PROM_CONFIG_LABEL_WIDTH}\n          tooltip={<>The URL of the trace backend the user would go to see its trace. {docsTip()}</>}\n          disabled={disabled}\n          interactive={true}\n        >\n          <Input\n            placeholder=\"https://example.com/${__value.raw}\"\n            spellCheck={false}\n            width={40}\n            value={value.url}\n            onChange={(event) =>\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n                url: event.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      )}\n\n      <InlineField\n        label=\"URL Label\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        tooltip={<>Use to override the button label on the exemplar traceID field. {docsTip()}</>}\n        disabled={disabled}\n        interactive={true}\n      >\n        <Input\n          placeholder=\"Go to example.com\"\n          spellCheck={false}\n          width={40}\n          value={value.urlDisplayLabel}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              urlDisplayLabel: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      <InlineField\n        label=\"Label name\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        tooltip={<>The name of the field in the labels object that should be used to get the traceID. {docsTip()}</>}\n        disabled={disabled}\n        interactive={true}\n      >\n        <Input\n          placeholder=\"traceID\"\n          spellCheck={false}\n          width={40}\n          value={value.name}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              name: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      {!disabled && (\n        <InlineField label=\"Remove exemplar link\" labelWidth={PROM_CONFIG_LABEL_WIDTH} disabled={disabled}>\n          <Button\n            variant=\"destructive\"\n            title=\"Remove exemplar link\"\n            icon=\"times\"\n            onClick={(event) => {\n              event.preventDefault();\n              onDelete();\n            }}\n          />\n        </InlineField>\n      )}\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/ExemplarsSettings.tsx\nimport { css } from '@emotion/css';\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport { overhaulStyles } from './ConfigEditor';\nimport { ExemplarSetting } from './ExemplarSetting';\n\ntype Props = {\n  options?: ExemplarTraceIdDestination[];\n  onChange: (value: ExemplarTraceIdDestination[]) => void;\n  disabled?: boolean;\n};\n\nexport function ExemplarsSettings({ options, onChange, disabled }: Props) {\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n  return (\n    <div className={styles.sectionBottomPadding}>\n      <ConfigSubSection title=\"Exemplars\" className={styles.container}>\n        {options &&\n          options.map((option, index) => {\n            return (\n              <ExemplarSetting\n                key={index}\n                value={option}\n                onChange={(newField) => {\n                  const newOptions = [...options];\n                  newOptions.splice(index, 1, newField);\n                  onChange(newOptions);\n                }}\n                onDelete={() => {\n                  const newOptions = [...options];\n                  newOptions.splice(index, 1);\n                  onChange(newOptions);\n                }}\n                disabled={disabled}\n              />\n            );\n          })}\n\n        {!disabled && (\n          <Button\n            variant=\"secondary\"\n            data-testid={selectors.components.DataSource.Prometheus.configPage.exemplarsAddButton}\n            className={css({\n              marginBottom: '10px',\n            })}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const newOptions = [...(options || []), { name: 'traceID' }];\n              onChange(newOptions);\n            }}\n          >\n            Add\n          </Button>\n        )}\n        {disabled && !options && <i>No exemplars configurations</i>}\n      </ConfigSubSection>\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/PromFlavorVersions.ts\nexport const PromFlavorVersions: { [index: string]: Array<{ value?: string; label: string }> } = {\n  Prometheus: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '< 2.14.x' },\n    { value: '2.14.0', label: '2.14.x' },\n    { value: '2.15.0', label: '2.15.x' },\n    { value: '2.16.0', label: '2.16.x' },\n    { value: '2.17.0', label: '2.17.x' },\n    { value: '2.18.0', label: '2.18.x' },\n    { value: '2.19.0', label: '2.19.x' },\n    { value: '2.20.0', label: '2.20.x' },\n    { value: '2.21.0', label: '2.21.x' },\n    { value: '2.22.0', label: '2.22.x' },\n    { value: '2.23.0', label: '2.23.x' },\n    { value: '2.24.0', label: '2.24.x' },\n    { value: '2.25.0', label: '2.25.x' },\n    { value: '2.26.0', label: '2.26.x' },\n    { value: '2.27.0', label: '2.27.x' },\n    { value: '2.28.0', label: '2.28.x' },\n    { value: '2.29.0', label: '2.29.x' },\n    { value: '2.30.0', label: '2.30.x' },\n    { value: '2.31.0', label: '2.31.x' },\n    { value: '2.32.0', label: '2.32.x' },\n    { value: '2.33.0', label: '2.33.x' },\n    { value: '2.34.0', label: '2.34.x' },\n    { value: '2.35.0', label: '2.35.x' },\n    { value: '2.36.0', label: '2.36.x' },\n    { value: '2.37.0', label: '2.37.x' },\n    { value: '2.38.0', label: '2.38.x' },\n    { value: '2.39.0', label: '2.39.x' },\n    { value: '2.40.0', label: '2.40.x' },\n    { value: '2.41.0', label: '2.41.x' },\n    { value: '2.42.0', label: '2.42.x' },\n    { value: '2.43.0', label: '2.43.x' },\n    { value: '2.44.0', label: '2.44.x' },\n    { value: '2.45.0', label: '2.45.x' },\n    { value: '2.46.0', label: '2.46.x' },\n    { value: '2.47.0', label: '2.47.x' },\n    { value: '2.48.0', label: '2.48.x' },\n    { value: '2.49.0', label: '2.49.x' },\n    { value: '2.50.0', label: '2.50.x' },\n\n    // This value will be returned for future versions of prometheus until we add new entries to this object\n    { value: '2.50.1', label: '> 2.50.x' },\n  ],\n  Mimir: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '2.0.x' },\n    { value: '2.1.0', label: '2.1.x' },\n    { value: '2.2.0', label: '2.2.x' },\n    { value: '2.3.0', label: '2.3.x' },\n    { value: '2.4.0', label: '2.4.x' },\n    { value: '2.5.0', label: '2.5.x' },\n    { value: '2.6.0', label: '2.6.x' },\n    { value: '2.7.0', label: '2.7.x' },\n    { value: '2.8.0', label: '2.8.x' },\n    { value: '2.9.0', label: '2.9.x' },\n    { value: '2.9.1', label: '> 2.9.x' },\n  ],\n  Thanos: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 0.16.x' },\n    { value: '0.16.0', label: '0.16.x' },\n    { value: '0.17.0', label: '0.17.x' },\n    { value: '0.18.0', label: '0.18.x' },\n    { value: '0.19.0', label: '0.19.x' },\n    { value: '0.20.0', label: '0.20.x' },\n    { value: '0.21.0', label: '0.21.x' },\n    { value: '0.22.0', label: '0.22.x' },\n    { value: '0.23.0', label: '0.23.x' },\n    { value: '0.24.0', label: '0.24.x' },\n    { value: '0.25.0', label: '0.25.x' },\n    { value: '0.26.0', label: '0.26.x' },\n    { value: '0.27.0', label: '0.27.x' },\n    { value: '0.28.0', label: '0.28.x' },\n    { value: '0.29.0', label: '0.29.x' },\n    { value: '0.30.0', label: '0.30.x' },\n    { value: '0.31.0', label: '0.31.x' },\n    { value: '0.31.1', label: '> 0.31.x' },\n  ],\n  Cortex: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 1.0.0' },\n    { value: '1.0.0', label: '1.0.0' },\n    { value: '1.1.0', label: '1.1.x' },\n    { value: '1.2.0', label: '1.2.x' },\n    { value: '1.3.0', label: '1.3.x' },\n    { value: '1.4.0', label: '1.4.x' },\n    { value: '1.5.0', label: '1.5.x' },\n    { value: '1.6.0', label: '1.6.x' },\n    { value: '1.7.0', label: '1.7.x' },\n    { value: '1.8.0', label: '1.8.x' },\n    { value: '1.9.0', label: '1.9.x' },\n    { value: '1.10.0', label: '1.10.x' },\n    { value: '1.11.0', label: '1.11.x' },\n    { value: '1.13.0', label: '1.13.x' },\n    { value: '1.14.0', label: '> 1.13.x' },\n  ],\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/PromSettings.tsx\nimport React, { SyntheticEvent, useState } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionChecked,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ConfigSubSection } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { InlineField, Input, Select, Switch, useTheme2 } from '@grafana/ui';\n\nimport { SUGGESTIONS_LIMIT } from '../language_provider';\nimport { QueryEditorMode } from '../querybuilder/shared/types';\nimport { defaultPrometheusQueryOverlapWindow } from '../querycache/QueryCache';\nimport { PromApplication, PrometheusCacheLevel, PromOptions } from '../types';\n\nimport { docsTip, overhaulStyles, PROM_CONFIG_LABEL_WIDTH, validateInput } from './ConfigEditor';\nimport { ExemplarsSettings } from './ExemplarsSettings';\nimport { PromFlavorVersions } from './PromFlavorVersions';\n\nconst httpOptions = [\n  { value: 'POST', label: 'POST' },\n  { value: 'GET', label: 'GET' },\n];\n\nconst editorOptions = [\n  { value: QueryEditorMode.Builder, label: 'Builder' },\n  { value: QueryEditorMode.Code, label: 'Code' },\n];\n\nconst cacheValueOptions = [\n  { value: PrometheusCacheLevel.Low, label: 'Low' },\n  { value: PrometheusCacheLevel.Medium, label: 'Medium' },\n  { value: PrometheusCacheLevel.High, label: 'High' },\n  { value: PrometheusCacheLevel.None, label: 'None' },\n];\n\ntype PrometheusSelectItemsType = Array<{ value: PromApplication; label: PromApplication }>;\n\nconst prometheusFlavorSelectItems: PrometheusSelectItemsType = [\n  { value: PromApplication.Prometheus, label: PromApplication.Prometheus },\n  { value: PromApplication.Cortex, label: PromApplication.Cortex },\n  { value: PromApplication.Mimir, label: PromApplication.Mimir },\n  { value: PromApplication.Thanos, label: PromApplication.Thanos },\n];\n\ntype Props = Pick<DataSourcePluginOptionsEditorProps<PromOptions>, 'options' | 'onOptionsChange'>;\n\n// single duration input\nexport const DURATION_REGEX = /^$|^\\d+(ms|[Mwdhmsy])$/;\n\n// multiple duration input\nexport const MULTIPLE_DURATION_REGEX = /(\\d+)(.+)/;\n\nexport const NON_NEGATIVE_INTEGER_REGEX = /^(0|[1-9]\\d*)(\\.\\d+)?(e\\+?\\d+)?$/; // non-negative integers, including scientific notation\n\nconst durationError = 'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s';\nexport const countError = 'Value is not valid, you can use non-negative integers, including scientific notation';\n\nexport const PromSettings = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // We are explicitly adding httpMethod so, it is correctly displayed in dropdown.\n  // This way, it is more predictable for users.\n  if (!options.jsonData.httpMethod) {\n    options.jsonData.httpMethod = 'POST';\n  }\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  type ValidDuration = {\n    timeInterval: string;\n    queryTimeout: string;\n    incrementalQueryOverlapWindow: string;\n  };\n\n  const [validDuration, updateValidDuration] = useState<ValidDuration>({\n    timeInterval: '',\n    queryTimeout: '',\n    incrementalQueryOverlapWindow: '',\n  });\n\n  type ValidCount = {\n    codeModeMetricNamesSuggestionLimit: string;\n  };\n\n  const [validCount, updateValidCount] = useState<ValidCount>({\n    codeModeMetricNamesSuggestionLimit: '',\n  });\n\n  return (\n    <>\n      <ConfigSubSection title=\"Interval behaviour\" className={styles.container}>\n        <div className=\"gf-form-group\">\n          {/* Scrape interval */}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineField\n                label=\"Scrape interval\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    This interval is how frequently Prometheus scrapes targets. Set this to the typical scrape and\n                    evaluation interval configured in your Prometheus config file. If you set this to a greater value\n                    than your Prometheus config file interval, Grafana will evaluate the data according to this interval\n                    and you will see less data points. Defaults to 15s. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <>\n                  <Input\n                    className=\"width-20\"\n                    value={options.jsonData.timeInterval}\n                    spellCheck={false}\n                    placeholder=\"15s\"\n                    onChange={onChangeHandler('timeInterval', options, onOptionsChange)}\n                    onBlur={(e) =>\n                      updateValidDuration({\n                        ...validDuration,\n                        timeInterval: e.currentTarget.value,\n                      })\n                    }\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.scrapeInterval}\n                  />\n                  {validateInput(validDuration.timeInterval, DURATION_REGEX, durationError)}\n                </>\n              </InlineField>\n            </div>\n          </div>\n          {/* Query Timeout */}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineField\n                label=\"Query timeout\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={<>Set the Prometheus query timeout. {docsTip()}</>}\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <>\n                  <Input\n                    className=\"width-20\"\n                    value={options.jsonData.queryTimeout}\n                    onChange={onChangeHandler('queryTimeout', options, onOptionsChange)}\n                    spellCheck={false}\n                    placeholder=\"60s\"\n                    onBlur={(e) =>\n                      updateValidDuration({\n                        ...validDuration,\n                        queryTimeout: e.currentTarget.value,\n                      })\n                    }\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.queryTimeout}\n                  />\n                  {validateInput(validDuration.queryTimeout, DURATION_REGEX, durationError)}\n                </>\n              </InlineField>\n            </div>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ConfigSubSection title=\"Query editor\" className={styles.container}>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form\">\n            <InlineField\n              label=\"Default editor\"\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              tooltip={<>Set default editor option for all users of this data source. {docsTip()}</>}\n              interactive={true}\n              disabled={options.readOnly}\n            >\n              <Select\n                aria-label={`Default Editor (Code or Builder)`}\n                options={editorOptions}\n                value={\n                  editorOptions.find((o) => o.value === options.jsonData.defaultEditor) ??\n                  editorOptions.find((o) => o.value === QueryEditorMode.Builder)\n                }\n                onChange={onChangeHandler('defaultEditor', options, onOptionsChange)}\n                width={40}\n                data-testid={selectors.components.DataSource.Prometheus.configPage.defaultEditor}\n              />\n            </InlineField>\n          </div>\n          <div className=\"gf-form\">\n            <InlineField\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              label=\"Disable metrics lookup\"\n              tooltip={\n                <>\n                  Checking this option will disable the metrics chooser and metric/label support in the query\n                  field&apos;s autocomplete. This helps if you have performance issues with bigger Prometheus instances.{' '}\n                  {docsTip()}\n                </>\n              }\n              interactive={true}\n              disabled={options.readOnly}\n              className={styles.switchField}\n            >\n              <Switch\n                value={options.jsonData.disableMetricsLookup ?? false}\n                onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableMetricsLookup')}\n                id={selectors.components.DataSource.Prometheus.configPage.disableMetricLookup}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ConfigSubSection title=\"Performance\" className={styles.container}>\n        {!options.jsonData.prometheusType && !options.jsonData.prometheusVersion && options.readOnly && (\n          <div className={styles.versionMargin}>\n            For more information on configuring prometheus type and version in data sources, see the{' '}\n            <a\n              className={styles.textUnderline}\n              href=\"https://grafana.com/docs/grafana/latest/administration/provisioning/\"\n            >\n              provisioning documentation\n            </a>\n            .\n          </div>\n        )}\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineField\n                label=\"Prometheus type\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    {/* , and attempt to detect the version */}\n                    Set this to the type of your prometheus database, e.g. Prometheus, Cortex, Mimir or Thanos. Changing\n                    this field will save your current settings. Certain types of Prometheus supports or does not support\n                    various APIs. For example, some types support regex matching for label queries to improve\n                    performance. Some types have an API for metadata. If you set this incorrectly you may experience odd\n                    behavior when querying metrics and labels. Please check your Prometheus documentation to ensure you\n                    enter the correct type. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Select\n                  aria-label=\"Prometheus type\"\n                  options={prometheusFlavorSelectItems}\n                  value={prometheusFlavorSelectItems.find((o) => o.value === options.jsonData.prometheusType)}\n                  onChange={onChangeHandler('prometheusType', options, onOptionsChange)}\n                  width={40}\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.prometheusType}\n                />\n              </InlineField>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            {options.jsonData.prometheusType && (\n              <div className=\"gf-form\">\n                <InlineField\n                  label={`${options.jsonData.prometheusType} version`}\n                  labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                  tooltip={\n                    <>\n                      Use this to set the version of your {options.jsonData.prometheusType} instance if it is not\n                      automatically configured. {docsTip()}\n                    </>\n                  }\n                  interactive={true}\n                  disabled={options.readOnly}\n                >\n                  <Select\n                    aria-label={`${options.jsonData.prometheusType} type`}\n                    options={PromFlavorVersions[options.jsonData.prometheusType]}\n                    value={PromFlavorVersions[options.jsonData.prometheusType]?.find(\n                      (o) => o.value === options.jsonData.prometheusVersion\n                    )}\n                    onChange={onChangeHandler('prometheusVersion', options, onOptionsChange)}\n                    width={40}\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.prometheusVersion}\n                  />\n                </InlineField>\n              </div>\n            )}\n          </div>\n\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Cache level\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Sets the browser caching level for editor queries. Higher cache settings are recommended for high\n                    cardinality data sources.\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Select\n                  width={40}\n                  onChange={onChangeHandler('cacheLevel', options, onOptionsChange)}\n                  options={cacheValueOptions}\n                  value={\n                    cacheValueOptions.find((o) => o.value === options.jsonData.cacheLevel) ?? PrometheusCacheLevel.Low\n                  }\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.cacheLevel}\n                />\n              </InlineField>\n            </div>\n          </div>\n\n          {config.featureToggles.prometheusCodeModeMetricNamesSearch && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineField\n                  label=\"Metric names suggestion limit\"\n                  labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                  tooltip={\n                    <>\n                      The maximum number of metric names that may appear as autocomplete suggestions in the query\n                      editor&apos;s Code mode.\n                    </>\n                  }\n                  interactive={true}\n                  disabled={options.readOnly}\n                >\n                  <>\n                    <Input\n                      className=\"width-20\"\n                      value={options.jsonData.codeModeMetricNamesSuggestionLimit}\n                      onChange={onChangeHandler('codeModeMetricNamesSuggestionLimit', options, onOptionsChange)}\n                      spellCheck={false}\n                      placeholder={SUGGESTIONS_LIMIT.toString()}\n                      onBlur={(e) =>\n                        updateValidCount({\n                          ...validCount,\n                          codeModeMetricNamesSuggestionLimit: e.currentTarget.value,\n                        })\n                      }\n                      data-testid={\n                        selectors.components.DataSource.Prometheus.configPage.codeModeMetricNamesSuggestionLimit\n                      }\n                    />\n                    {validateInput(\n                      validCount.codeModeMetricNamesSuggestionLimit,\n                      NON_NEGATIVE_INTEGER_REGEX,\n                      countError\n                    )}\n                  </>\n                </InlineField>\n              </div>\n            </div>\n          )}\n\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Incremental querying (beta)\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    This feature will change the default behavior of relative queries to always request fresh data from\n                    the prometheus instance, instead query results will be cached, and only new records are requested.\n                    Turn this on to decrease database and network load.\n                  </>\n                }\n                interactive={true}\n                className={styles.switchField}\n                disabled={options.readOnly}\n              >\n                <Switch\n                  value={options.jsonData.incrementalQuerying ?? false}\n                  onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'incrementalQuerying')}\n                  id={selectors.components.DataSource.Prometheus.configPage.incrementalQuerying}\n                />\n              </InlineField>\n            </div>\n          </div>\n\n          <div className=\"gf-form-inline\">\n            {options.jsonData.incrementalQuerying && (\n              <InlineField\n                label=\"Query overlap window\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Set a duration like 10m or 120s or 0s. Default of 10 minutes. This duration will be added to the\n                    duration of each incremental request.\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <>\n                  <Input\n                    onBlur={(e) =>\n                      updateValidDuration({\n                        ...validDuration,\n                        incrementalQueryOverlapWindow: e.currentTarget.value,\n                      })\n                    }\n                    className=\"width-20\"\n                    value={options.jsonData.incrementalQueryOverlapWindow ?? defaultPrometheusQueryOverlapWindow}\n                    onChange={onChangeHandler('incrementalQueryOverlapWindow', options, onOptionsChange)}\n                    spellCheck={false}\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.queryOverlapWindow}\n                  />\n                  {validateInput(validDuration.incrementalQueryOverlapWindow, MULTIPLE_DURATION_REGEX, durationError)}\n                </>\n              </InlineField>\n            )}\n          </div>\n\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Disable recording rules (beta)\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={<>This feature will disable recording rules Turn this on to improve dashboard performance</>}\n                interactive={true}\n                className={styles.switchField}\n                disabled={options.readOnly}\n              >\n                <Switch\n                  value={options.jsonData.disableRecordingRules ?? false}\n                  onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableRecordingRules')}\n                  id={selectors.components.DataSource.Prometheus.configPage.disableRecordingRules}\n                />\n              </InlineField>\n            </div>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ConfigSubSection title=\"Other\" className={styles.container}>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Custom query parameters\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Add custom parameters to the Prometheus query URL. For example timeout, partial_response, dedup, or\n                    max_source_resolution. Multiple parameters should be concatenated together with an ‘&’. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Input\n                  className=\"width-20\"\n                  value={options.jsonData.customQueryParameters}\n                  onChange={onChangeHandler('customQueryParameters', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"Example: max_source_resolution=5m&timeout=10\"\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.customQueryParameters}\n                />\n              </InlineField>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            {/* HTTP Method */}\n            <div className=\"gf-form\">\n              <InlineField\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    You can use either POST or GET HTTP method to query your Prometheus data source. POST is the\n                    recommended method as it allows bigger queries. Change this to GET if you have a Prometheus version\n                    older than 2.1 or if POST requests are restricted in your network. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                label=\"HTTP method\"\n                disabled={options.readOnly}\n              >\n                <Select\n                  width={40}\n                  aria-label=\"Select HTTP method\"\n                  options={httpOptions}\n                  value={httpOptions.find((o) => o.value === options.jsonData.httpMethod)}\n                  onChange={onChangeHandler('httpMethod', options, onOptionsChange)}\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.httpMethod}\n                />\n              </InlineField>\n            </div>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ExemplarsSettings\n        options={options.jsonData.exemplarTraceIdDestinations}\n        onChange={(exemplarOptions) =>\n          updateDatasourcePluginJsonDataOption(\n            { onOptionsChange, options },\n            'exemplarTraceIdDestinations',\n            exemplarOptions\n          )\n        }\n        disabled={options.readOnly}\n      />\n    </>\n  );\n};\n\nexport const getValueFromEventItem = (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n  if (!eventItem) {\n    return '';\n  }\n\n  if ('currentTarget' in eventItem) {\n    return eventItem.currentTarget.value;\n  }\n\n  return eventItem.value;\n};\n\nconst onChangeHandler =\n  (key: keyof PromOptions, options: Props['options'], onOptionsChange: Props['onOptionsChange']) =>\n  (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [key]: getValueFromEventItem(eventItem),\n      },\n    });\n  };\n","import { config } from '@grafana/runtime';\n\nconst predefinedClouds = [\n  {\n    name: \"AzureCloud\",\n    displayName: \"Azure\"\n  },\n  {\n    name: \"AzureChinaCloud\",\n    displayName: \"Azure China\"\n  },\n  {\n    name: \"AzureUSGovernment\",\n    displayName: \"Azure US Government\"\n  }\n];\nfunction getAzureClouds() {\n  const settingsEx = config.azure;\n  if (Array.isArray(settingsEx.clouds) && settingsEx.clouds.length > 0) {\n    return settingsEx.clouds;\n  }\n  return predefinedClouds;\n}\n\nexport { getAzureClouds };\n//# sourceMappingURL=clouds.js.map\n","export enum AzureCloud {\n  Public = 'AzureCloud',\n  China = 'AzureChinaCloud',\n  USGovernment = 'AzureUSGovernment',\n  None = '',\n}\n\nexport type AzureAuthType = 'msi' | 'clientsecret' | 'workloadidentity';\n\nexport type ConcealedSecret = symbol;\n\ninterface AzureCredentialsBase {\n  authType: AzureAuthType;\n  defaultSubscriptionId?: string;\n}\n\nexport interface AzureManagedIdentityCredentials extends AzureCredentialsBase {\n  authType: 'msi';\n}\n\nexport interface AzureWorkloadIdentityCredentials extends AzureCredentialsBase {\n  authType: 'workloadidentity';\n}\n\nexport interface AzureClientSecretCredentials extends AzureCredentialsBase {\n  authType: 'clientsecret';\n  azureCloud?: string;\n  tenantId?: string;\n  clientId?: string;\n  clientSecret?: string | ConcealedSecret;\n}\n\nexport type AzureCredentials =\n  | AzureManagedIdentityCredentials\n  | AzureClientSecretCredentials\n  | AzureWorkloadIdentityCredentials;\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n    case 'workloadidentity':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n","import { getAzureClouds } from '@grafana/azure-sdk';\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { AzureCloud, AzureCredentials, ConcealedSecret } from './AzureCredentials';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nfunction getDefaultAzureCloud(): string {\n  return config.azure.cloud || AzureCloud.Public;\n}\n\nfunction getSecret(options: DataSourceSettings<any, any>): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.azureClientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.azureClientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function hasCredentials(options: DataSourceSettings<any, any>): boolean {\n  return !!options.jsonData.azureCredentials;\n}\n\nexport function getAzureCloudOptions(): Array<SelectableValue<string>> {\n  const cloudInfo = getAzureClouds();\n\n  return cloudInfo.map((cloud) => ({\n    value: cloud.name,\n    label: cloud.displayName,\n  }));\n}\n\nexport function getDefaultCredentials(): AzureCredentials {\n  if (config.azure.managedIdentityEnabled) {\n    return { authType: 'msi' };\n  } else {\n    return { authType: 'clientsecret', azureCloud: getDefaultAzureCloud() };\n  }\n}\n\nexport function getCredentials(options: DataSourceSettings<any, any>): AzureCredentials {\n  const credentials = options.jsonData.azureCredentials as AzureCredentials | undefined;\n\n  // If no credentials saved, then return empty credentials\n  // of type based on whether the managed identity enabled\n  if (!credentials) {\n    return getDefaultCredentials();\n  }\n\n  switch (credentials.authType) {\n    case 'msi':\n    case 'workloadidentity':\n      if (\n        (credentials.authType === 'msi' && config.azure.managedIdentityEnabled) ||\n        (credentials.authType === 'workloadidentity' && config.azure.workloadIdentityEnabled)\n      ) {\n        return {\n          authType: credentials.authType,\n        };\n      } else {\n        // If authentication type is managed identity or workload identity but either method is disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n        tenantId: credentials.tenantId,\n        clientId: credentials.clientId,\n        clientSecret: getSecret(options),\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: DataSourceSettings<any, any>,\n  credentials: AzureCredentials\n): DataSourceSettings<any, any> {\n  switch (credentials.authType) {\n    case 'msi':\n    case 'workloadidentity':\n      if (credentials.authType === 'msi' && !config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n      if (credentials.authType === 'workloadidentity' && !config.azure.workloadIdentityEnabled) {\n        throw new Error('Workload Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: credentials.authType,\n          azureCredentials: {\n            authType: credentials.authType,\n          },\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'clientsecret',\n            azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n            tenantId: credentials.tenantId,\n            clientId: credentials.clientId,\n          },\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          azureClientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          azureClientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n\nexport function setDefaultCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureCredentials: getDefaultCredentials(),\n    },\n  };\n}\n\nexport function resetCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureAuth: undefined,\n      azureCredentials: undefined,\n      azureEndpointResourceId: undefined,\n    },\n  };\n}\n","import { cx } from '@emotion/css';\nimport React, { ChangeEvent, useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { InlineFormLabel, Button, Select, Input } from '@grafana/ui';\n\nimport { AzureAuthType, AzureCredentials, isCredentialsComplete } from './AzureCredentials';\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  workloadIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n  disabled?: boolean;\n}\n\nexport const AzureCredentialsForm = (props: Props) => {\n  const {\n    credentials,\n    azureCloudOptions,\n    onCredentialsChange,\n    getSubscriptions,\n    disabled,\n    managedIdentityEnabled,\n    workloadIdentityEnabled,\n  } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n\n  const authTypeOptions = useMemo(() => {\n    let opts: Array<SelectableValue<AzureAuthType>> = [\n      {\n        value: 'clientsecret',\n        label: 'App Registration',\n      },\n    ];\n\n    if (managedIdentityEnabled) {\n      opts.push({\n        value: 'msi',\n        label: 'Managed Identity',\n      });\n    }\n\n    if (workloadIdentityEnabled) {\n      opts.push({\n        value: 'workloadidentity',\n        label: 'Workload Identity',\n      });\n    }\n    return opts;\n  }, [managedIdentityEnabled, workloadIdentityEnabled]);\n\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    setSubscriptions(received);\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find((opt) => opt.value === credentials.defaultSubscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    setSubscriptions([]);\n    const defaultAuthType = managedIdentityEnabled\n      ? 'msi'\n      : workloadIdentityEnabled\n        ? 'workloadidentity'\n        : 'clientsecret';\n    const updated: AzureCredentials = {\n      ...credentials,\n      authType: selected.value || defaultAuthType,\n      defaultSubscriptionId: undefined,\n    };\n    onCredentialsChange(updated);\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = (selected: SelectableValue<string> | undefined) => {\n    const updated: AzureCredentials = {\n      ...credentials,\n      defaultSubscriptionId: selected?.value,\n    };\n    onCredentialsChange(updated);\n  };\n  const prometheusConfigOverhaulAuth = config.featureToggles.prometheusConfigOverhaulAuth;\n\n  return (\n    <div className=\"gf-form-group\">\n      {authTypeOptions.length > 1 && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n              isDisabled={disabled}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className={cx(prometheusConfigOverhaulAuth ? 'width-20' : 'width-30')}\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className={cx(prometheusConfigOverhaulAuth ? 'width-20' : 'width-30')}\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          {typeof credentials.clientSecret === 'symbol' ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel htmlFor=\"azure-client-secret\" className=\"width-12\">\n                  Client Secret\n                </InlineFormLabel>\n                <Input\n                  id=\"azure-client-secret\"\n                  className={cx(prometheusConfigOverhaulAuth ? 'width-20' : 'width-25')}\n                  placeholder=\"configured\"\n                  disabled\n                />\n              </div>\n              {!disabled && (\n                <div className=\"gf-form\">\n                  <div\n                    className={cx(\n                      prometheusConfigOverhaulAuth ? 'max-width-20 gf-form-inline' : 'max-width-30 gf-form-inline'\n                    )}\n                  >\n                    <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset}>\n                      reset\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className={cx(prometheusConfigOverhaulAuth ? 'width-20' : 'width-30')}\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={credentials.clientSecret || ''}\n                    onChange={onClientSecretChange}\n                    disabled={disabled}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {getSubscriptions && (\n        <>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n              <div className={cx(prometheusConfigOverhaulAuth ? 'width-20' : 'width-25')}>\n                <Select\n                  value={\n                    credentials.defaultSubscriptionId\n                      ? subscriptions.find((opt) => opt.value === credentials.defaultSubscriptionId)\n                      : undefined\n                  }\n                  options={subscriptions}\n                  onChange={onSubscriptionChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"max-width-30 gf-form-inline\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={onLoadSubscriptions}\n                  disabled={!hasRequiredFields}\n                >\n                  Load Subscriptions\n                </Button>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import { cx } from '@emotion/css';\nimport React, { FormEvent, useMemo, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { config } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input } from '@grafana/ui';\nimport { HttpSettingsBaseProps } from '@grafana/ui/src/components/DataSourceSettings/types';\n\nimport { AzureCredentials } from './AzureCredentials';\nimport { getAzureCloudOptions, getCredentials, updateCredentials } from './AzureCredentialsConfig';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\n\nexport const AzureAuthSettings = (props: HttpSettingsBaseProps) => {\n  const { dataSourceConfig, onChange } = props;\n\n  const [overrideAudienceAllowed] = useState<boolean>(!!config.featureToggles.prometheusAzureOverrideAudience);\n  const [overrideAudienceChecked, setOverrideAudienceChecked] = useState<boolean>(\n    !!dataSourceConfig.jsonData.azureEndpointResourceId\n  );\n\n  const credentials = useMemo(() => getCredentials(dataSourceConfig), [dataSourceConfig]);\n\n  const onCredentialsChange = (credentials: AzureCredentials): void => {\n    onChange(updateCredentials(dataSourceConfig, credentials));\n  };\n\n  const onOverrideAudienceChange = (ev: FormEvent<HTMLInputElement>): void => {\n    setOverrideAudienceChecked(ev.currentTarget.checked);\n    if (!ev.currentTarget.checked) {\n      onChange({\n        ...dataSourceConfig,\n        jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: undefined },\n      });\n    }\n  };\n\n  const onResourceIdChange = (ev: FormEvent<HTMLInputElement>): void => {\n    if (overrideAudienceChecked) {\n      onChange({\n        ...dataSourceConfig,\n        jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: ev.currentTarget.value },\n      });\n    }\n  };\n\n  const prometheusConfigOverhaulAuth = config.featureToggles.prometheusConfigOverhaulAuth;\n\n  const labelWidth = prometheusConfigOverhaulAuth ? 24 : 26;\n\n  // The auth type needs to be set on the first load of the data source\n  useEffectOnce(() => {\n    if (!dataSourceConfig.jsonData.authType) {\n      onCredentialsChange(credentials);\n    }\n  });\n\n  return (\n    <>\n      <h6>Azure authentication</h6>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        workloadIdentityEnabled={config.azure.workloadIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={getAzureCloudOptions()}\n        onCredentialsChange={onCredentialsChange}\n        disabled={dataSourceConfig.readOnly}\n      />\n      {overrideAudienceAllowed && (\n        <>\n          <h6>Azure configuration</h6>\n          <div className=\"gf-form-group\">\n            <InlineFieldRow>\n              <InlineField labelWidth={labelWidth} label=\"Override AAD audience\" disabled={dataSourceConfig.readOnly}>\n                <InlineSwitch value={overrideAudienceChecked} onChange={onOverrideAudienceChange} />\n              </InlineField>\n            </InlineFieldRow>\n            {overrideAudienceChecked && (\n              <InlineFieldRow>\n                <InlineField labelWidth={labelWidth} label=\"Resource ID\" disabled={dataSourceConfig.readOnly}>\n                  <Input\n                    className={cx(prometheusConfigOverhaulAuth ? 'width-20' : 'width-30')}\n                    value={dataSourceConfig.jsonData.azureEndpointResourceId || ''}\n                    onChange={onResourceIdChange}\n                  />\n                </InlineField>\n              </InlineFieldRow>\n            )}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AzureAuthSettings;\n","import React, { ReactElement, useState } from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { Auth, ConnectionSettings, convertLegacyAuthProps, AuthMethod } from '@grafana/experimental';\nimport { PromOptions, docsTip, overhaulStyles } from '@grafana/prometheus';\nimport { SecureSocksProxySettings, useTheme2 } from '@grafana/ui';\n// NEED TO EXPORT THIS FROM GRAFANA/UI FOR EXTERNAL DS\nimport { AzureAuthSettings } from '@grafana/ui/src/components/DataSourceSettings/types';\n\ntype Props = {\n  options: DataSourceSettings<PromOptions, {}>;\n  onOptionsChange: (options: DataSourceSettings<PromOptions, {}>) => void;\n  azureAuthSettings: AzureAuthSettings;\n  sigV4AuthToggleEnabled: boolean | undefined;\n  renderSigV4Editor: React.ReactNode;\n  secureSocksDSProxyEnabled: boolean;\n};\n\n// these are not available yet in grafana\nexport type CustomMethodId = `custom-${string}`;\n\nexport type CustomMethod = {\n  id: CustomMethodId;\n  label: string;\n  description: string;\n  component: ReactElement;\n};\n\nexport const DataSourcehttpSettingsOverhaul = (props: Props) => {\n  const {\n    options,\n    onOptionsChange,\n    azureAuthSettings,\n    sigV4AuthToggleEnabled,\n    renderSigV4Editor,\n    secureSocksDSProxyEnabled,\n  } = props;\n\n  const newAuthProps = convertLegacyAuthProps({\n    config: options,\n    onChange: onOptionsChange,\n  });\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  // for custom auth methods sigV4 and azure auth\n  let customMethods: CustomMethod[] = [];\n\n  const [sigV4Selected, setSigV4Selected] = useState<boolean>(options.jsonData.sigV4Auth || false);\n\n  const sigV4Id = 'custom-sigV4Id';\n\n  const sigV4Option: CustomMethod = {\n    id: sigV4Id,\n    label: 'SigV4 auth',\n    description: 'This is SigV4 auth description',\n    component: <>{renderSigV4Editor}</>,\n  };\n\n  if (sigV4AuthToggleEnabled) {\n    customMethods.push(sigV4Option);\n  }\n\n  const azureAuthEnabled: boolean =\n    (azureAuthSettings?.azureAuthSupported && azureAuthSettings.getAzureAuthEnabled(options)) || false;\n\n  const [azureAuthSelected, setAzureAuthSelected] = useState<boolean>(azureAuthEnabled);\n\n  const azureAuthId = 'custom-azureAuthId';\n\n  const azureAuthOption: CustomMethod = {\n    id: azureAuthId,\n    label: 'Azure auth',\n    description: 'This is Azure auth description',\n    component: (\n      <>\n        {azureAuthSettings.azureSettingsUI && (\n          <azureAuthSettings.azureSettingsUI dataSourceConfig={options} onChange={onOptionsChange} />\n        )}\n      </>\n    ),\n  };\n\n  // allow the option to show in the dropdown\n  if (azureAuthSettings?.azureAuthSupported) {\n    customMethods.push(azureAuthOption);\n  }\n\n  function returnSelectedMethod() {\n    if (sigV4Selected) {\n      return sigV4Id;\n    }\n\n    if (azureAuthSelected) {\n      return azureAuthId;\n    }\n\n    return newAuthProps.selectedMethod;\n  }\n\n  // Do we need this switch anymore? Update the language.\n  let urlTooltip;\n  switch (options.access) {\n    case 'direct':\n      urlTooltip = (\n        <>\n          Your access method is <em>Browser</em>, this means the URL needs to be accessible from the browser.\n          {docsTip()}\n        </>\n      );\n      break;\n    case 'proxy':\n      urlTooltip = (\n        <>\n          Your access method is <em>Server</em>, this means the URL needs to be accessible from the grafana\n          backend/server.\n          {docsTip()}\n        </>\n      );\n      break;\n    default:\n      urlTooltip = <>Specify a complete HTTP URL (for example http://your_server:8080) {docsTip()}</>;\n  }\n\n  return (\n    <>\n      <ConnectionSettings\n        urlPlaceholder=\"http://localhost:9090\"\n        config={options}\n        onChange={onOptionsChange}\n        urlLabel=\"Prometheus server URL\"\n        urlTooltip={urlTooltip}\n      />\n      <hr className={`${styles.hrTopSpace} ${styles.hrBottomSpace}`} />\n      <Auth\n        {...newAuthProps}\n        customMethods={customMethods}\n        onAuthMethodSelect={(method) => {\n          // sigV4Id\n          if (sigV4AuthToggleEnabled) {\n            setSigV4Selected(method === sigV4Id);\n          }\n\n          // Azure\n          if (azureAuthSettings?.azureAuthSupported) {\n            setAzureAuthSelected(method === azureAuthId);\n            azureAuthSettings.setAzureAuthEnabled(options, method === azureAuthId);\n          }\n\n          onOptionsChange({\n            ...options,\n            basicAuth: method === AuthMethod.BasicAuth,\n            withCredentials: method === AuthMethod.CrossSiteCredentials,\n            jsonData: {\n              ...options.jsonData,\n              sigV4Auth: method === sigV4Id,\n              oauthPassThru: method === AuthMethod.OAuthForward,\n            },\n          });\n        }}\n        // If your method is selected pass its id to `selectedMethod`,\n        // otherwise pass the id from converted legacy data\n        selectedMethod={returnSelectedMethod()}\n      />\n      <div className={styles.sectionBottomPadding} />\n      {secureSocksDSProxyEnabled && (\n        <>\n          <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n          <div className={styles.sectionBottomPadding} />\n        </>\n      )}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { SIGV4ConnectionConfig } from '@grafana/aws-sdk';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { AdvancedHttpSettings, ConfigSection, DataSourceDescription } from '@grafana/experimental';\nimport { AlertingSettingsOverhaul, PromOptions, PromSettings } from '@grafana/prometheus';\nimport { config } from '@grafana/runtime';\nimport { Alert, FieldValidationMessage, useTheme2 } from '@grafana/ui';\n\nimport { AzureAuthSettings } from './AzureAuthSettings';\nimport { hasCredentials, setDefaultCredentials, resetCredentials } from './AzureCredentialsConfig';\nimport { DataSourcehttpSettingsOverhaul } from './DataSourceHttpSettingsOverhaulPackage';\n\nexport const PROM_CONFIG_LABEL_WIDTH = 30;\n\nexport type Props = DataSourcePluginOptionsEditorProps<PromOptions>;\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  const azureAuthSettings = {\n    azureAuthSupported: config.azureAuthEnabled,\n    getAzureAuthEnabled: (config: DataSourceSettings): boolean => hasCredentials(config),\n    setAzureAuthEnabled: (config: DataSourceSettings, enabled: boolean) =>\n      enabled ? setDefaultCredentials(config) : resetCredentials(config),\n    azureSettingsUI: AzureAuthSettings,\n  };\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  return (\n    <>\n      {options.access === 'direct' && (\n        <Alert title=\"Error\" severity=\"error\">\n          Browser access mode in the Prometheus data source is no longer available. Switch to server access mode.\n        </Alert>\n      )}\n      <DataSourceDescription\n        dataSourceName=\"Prometheus\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/prometheus/configure-prometheus-data-source/\"\n      />\n      <hr className={`${styles.hrTopSpace} ${styles.hrBottomSpace}`} />\n      <DataSourcehttpSettingsOverhaul\n        options={options}\n        onOptionsChange={onOptionsChange}\n        azureAuthSettings={azureAuthSettings}\n        sigV4AuthToggleEnabled={config.sigV4AuthEnabled}\n        renderSigV4Editor={\n          <SIGV4ConnectionConfig inExperimentalAuthComponent={true} {...props}></SIGV4ConnectionConfig>\n        }\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n      />\n      <hr />\n      <ConfigSection\n        className={styles.advancedSettings}\n        title=\"Advanced settings\"\n        description=\"Additional settings are optional settings that can be configured for more control over your data source.\"\n      >\n        <AdvancedHttpSettings\n          className={styles.advancedHTTPSettingsMargin}\n          config={options}\n          onChange={onOptionsChange}\n        />\n        <AlertingSettingsOverhaul<PromOptions> options={options} onOptionsChange={onOptionsChange} />\n        <PromSettings options={options} onOptionsChange={onOptionsChange} />\n      </ConfigSection>\n    </>\n  );\n};\n/**\n * Use this to return a url in a tooltip in a field. Don't forget to make the field interactive to be able to click on the tooltip\n * @param url\n * @returns\n */\nexport function docsTip(url?: string) {\n  const docsUrl = 'https://grafana.com/docs/grafana/latest/datasources/prometheus/#configure-the-data-source';\n\n  return (\n    <a href={url ? url : docsUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n      Visit docs for more details here.\n    </a>\n  );\n}\n\nexport const validateInput = (\n  input: string,\n  pattern: string | RegExp,\n  errorMessage?: string\n): boolean | JSX.Element => {\n  const defaultErrorMessage = 'Value is not valid';\n  if (input && !input.match(pattern)) {\n    return <FieldValidationMessage>{errorMessage ? errorMessage : defaultErrorMessage}</FieldValidationMessage>;\n  } else {\n    return true;\n  }\n};\n\nexport function overhaulStyles(theme: GrafanaTheme2) {\n  return {\n    additionalSettings: css({\n      marginBottom: '25px',\n    }),\n    secondaryGrey: css({\n      color: `${theme.colors.secondary.text}`,\n      opacity: '65%',\n    }),\n    inlineError: css({\n      margin: '0px 0px 4px 245px',\n    }),\n    switchField: css({\n      alignItems: 'center',\n    }),\n    sectionHeaderPadding: css({\n      paddingTop: '32px',\n    }),\n    sectionBottomPadding: css({\n      paddingBottom: '28px',\n    }),\n    subsectionText: css({\n      fontSize: '12px',\n    }),\n    hrBottomSpace: css({\n      marginBottom: '56px',\n    }),\n    hrTopSpace: css({\n      marginTop: '50px',\n    }),\n    textUnderline: css({\n      textDecoration: 'underline',\n    }),\n    versionMargin: css({\n      marginBottom: '12px',\n    }),\n    advancedHTTPSettingsMargin: css({\n      margin: '24px 0 8px 0',\n    }),\n    advancedSettings: css({\n      paddingTop: '32px',\n    }),\n    alertingTop: css({\n      marginTop: '40px !important',\n    }),\n    overhaulPageHeading: css({\n      fontWeight: '400',\n    }),\n    container: css({\n      maxwidth: '578',\n    }),\n  };\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { PrometheusDatasource, PromQueryEditorByApp, PromCheatSheet } from '@grafana/prometheus';\n\nimport { ConfigEditor } from './configuration/ConfigEditorPackage';\n\nexport const plugin = new DataSourcePlugin(PrometheusDatasource)\n  .setQueryEditor(PromQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(PromCheatSheet);\n"],"names":["EditorHeader","children","styles","getStyles","theme","FlexItem","grow","shrink","getNextRefIdChar","queries","num","refId","getRefId","query","letters","QueryPattern","props","pattern","onPatternSelect","hasNewQueryOption","hasPreviousQuery","selectedPatternName","setSelectedPatternName","lang","promql","Card","RawQuery","Button","QueryPatternsModal","isOpen","onClose","onChange","onAddQuery","app","openTabs","setOpenTabs","visualQuery","hasOperations","hasMetric","hasLabels","hasBinaryQueries","selectAsNewQuery","Modal","patternType","Collapse","tabs","t","promQueryEditorExplainKey","getFlagValue","key","defaultValue","val","store","setFlagValue","value","useFlag","flag","updateFlag","setter","QueryEditorMode","editorModes","QueryEditorModeToggle","mode","RadioButtonGroup","QueryHeaderSwitch","label","inputProps","dashedLabel","switchIdRef","Stack","Switch","queryEditorModeDefaultLocalStorageKey","changeEditorMode","editorMode","getDefaultEditorMode","expr","defaultEditor","getQueryWithDefaults","result","isBothInstantAndRange","OperationInfoButton","def","operation","show","setShow","middleware","context","refs","floatingStyles","click","dismiss","getReferenceProps","getFloatingProps","Portal","getOperationDocs","op","OperationHeader","index","onRemove","queryModeller","dragHandleProps","state","setState","onToggleSwitcher","alternatives","alt","Select","newDef","newParams","i","changedOp","getOperationParamEditor","paramDef","SelectInputParamEditor","BoolInputParamEditor","SimpleInputParamEditor","AutoSizeInput","evt","Checkbox","operationId","selectOptions","option","valueOption","x","OperationEditor","onRunQuery","datasource","flash","highlight","timeRange","shouldFlash","useFlash","id","onParamValueChanged","paramIdx","update","callParamChangedThenOnChange","onAddRestParam","onRemoveRestParam","operationElements","paramIndex","Editor","Tooltip","Icon","restParam","lastParamDef","renderAddRestParamButton","provided","keepFlash","setKeepFlash","operationIndex","OperationList","highlightedOp","operations","opsToHighlight","useOperationsHighlight","cascaderOpen","setCascaderOpen","onOperationChange","updatedList","addOptions","category","onAddOperation","operationDef","onDragEnd","element","onCascaderBlur","Cascader","isMounted","useMountedState","prevOperations","usePrevious","newOps","newOp","isSameOp","op1","op2","OperationsEditorRow","QueryBuilderHints","data","buildVisualQueryFromString","hints","setHints","hint","newQuery","newVisualQuery","NestedQuery","nestedQuery","showExplain","operators","IconButton","EditorRows","PromQueryBuilder","NestedQueryList","nestedQueries","onNestedQueryUpdate","suggestionOptions","explationOptions","QuerySuggestionItem","querySuggestion","order","queryExplain","historical","closeDrawer","last","allSuggestions","prompt","showExp","updShowExp","gaveExplanationFeedback","updateGaveExplanationFeedback","gaveSuggestionFeedback","updateGaveSuggestionFeedback","suggestionFeedback","setSuggestionFeedback","explanationFeedback","setExplanationFeedback","explanation","feedbackToggleTip","type","updateRadioFeedback","updateTextFeedback","e","disabledButton","questionOne","RadioButtonList","TextArea","explanationFeedbackEvent","suggestionFeedbackEvent","pvq","Spinner","Toggletip","radioInputFeedback","textFeedback","SuggestionType","QuerySuggestionContainer","suggestionType","querySuggestions","nextInteraction","hasNextInteraction","updateHasNextInteraction","text","secondaryText","refineText","qs","idx","acc","queryAssistanttestIds","search","request","loggedWarning","health","response","details","enabled","healthDetails","ExplainSystemPrompt","GetExplainUserPrompt","documentation","metricName","metricType","metricMetadata","SuggestSystemPrompt","GetSuggestUserPrompt","question","labels","templates","initialState","showStartingMessage","createInteraction","isLoading","generalTemplates","counterTemplates","histogramTemplates","gaugeTemplates","processTemplate","templateData","metric","getTemplateSuggestions","templateSuggestions","OPENAI_MODEL_NAME","promQLTemplatesCollection","getExplainMessage","documentationBody","title","body","item","getSuggestMessages","promQailExplain","dispatch","interaction","suggIdx","suggestedQuery","promptMessages","interactionToUpdate","updatedSuggestions","sg","sidx","payload","updateInteraction","isContainedIn","sublist","superlist","guessMetricType","allMetrics","underscoreIndex","root","suffix","familyMetrics","generateMetricTypeFilters","types","guessMetricFamily","isLLMPluginEnabled","openaiEnabled","vectorEnabled","results","promQailSuggest","labelNames","metricFamilyGuess","resolve","suggestions","metricLabels","feedTheAI","resultsString","r","SKIP_STARTING_MESSAGE","PromQail","skipStartingMessage","stateSlice","setLabelNames","int","responsesEndRef","scrollToBottom","labelsIndex","AI_Logo_color","Alert","indicateCheckbox","addInteraction","Input","newInteraction","action","interactions","updInteraction","QueryAssistantButton","llmAppEnabled","setShowDrawer","llmAppDisabled","noMetricSelected","button","selectors","selectMetricMessage","llmAppMessage","setHighlightedOp","showDrawer","updateLlmAppEnabled","prometheusPromQAIL","config","initHints","checkLlms","check","Drawer","EditorRow","MetricsLabelsSection","OperationExplainedBox","OperationListExplained","QueryPreview","EditorFieldGroup","prometheusMetricEncyclopedia","PromQueryBuilderContainer","exprChanged","setMetricsModalSettings","onVisQueryChange","visQuery","visualQueryChange","metricsModalSettings","parseResult","PromExemplarField","rest","error","setError","prevError","iconButtonStyles","InlineLabel","PromExploreExtraField","rangeOptions","getQueryTypeOptions","prevQuery","onExemplarChange","exemplar","onChangeQueryStep","interval","onStepChange","onReturnKeyDown","onQueryTypeChange","getQueryTypeChangeHandler","promExploreExtraFieldTestIds","includeBoth","queryType","QueryOptionGroup","collapsedInfo","toggleOpen","useToggle","legendModeOptions","PromQueryLegendEditor","legendFormat","getLegendMode","inputRef","onLegendFormatChanged","newFormat","onLegendModeChanged","EditorField","getLegendModeLabel","PromQueryBuilderOptions","onChangeFormat","onChangeStep","queryTypeOptions","event","isEnabled","onIntervalFactorChange","formatOption","FORMAT_OPTIONS","queryTypeValue","getQueryTypeValue","queryTypeLabel","getCollapsedInfo","shouldShowExemplarSwitch","EditorSwitch","INTERVAL_FACTOR_OPTIONS","items","PromQueryCodeEditorAutocompleteInfo","autocompleteLimit","setAutocompleteLimit","autocompleteLimitExceeded","setAutocompleteLimitExceeded","handleSuggestionsIncompleteEvent","Text","PromQueryEditorSelector","parseModalOpen","setParseModalOpen","queryPatternsModalOpen","setQueryPatternsModalOpen","dataIsStale","setDataIsStale","explain","setExplain","onEditorModeChange","newMetricEditorMode","onChangeInternal","onShowExplainChange","ConfirmModal","prevValue","Space","PromQueryCodeEditor","PromQueryEditorForAlerting","range","PromQueryField","alertingTestIds","PromQueryEditorByAppBase","PromQueryEditorByApp","CHEAT_SHEET_ITEMS","PromCheatSheet","AlertingSettingsOverhaul","options","onOptionsChange","ConfigSubSection","InlineField","ExemplarSetting","onDelete","disabled","isInternalLink","setIsInternalLink","ev","DataSourcePicker","ds","ExemplarsSettings","newField","newOptions","PromFlavorVersions","httpOptions","editorOptions","cacheValueOptions","prometheusFlavorSelectItems","DURATION_REGEX","MULTIPLE_DURATION_REGEX","NON_NEGATIVE_INTEGER_REGEX","durationError","countError","PromSettings","validDuration","updateValidDuration","validCount","updateValidCount","onChangeHandler","o","exemplarOptions","getValueFromEventItem","eventItem","predefinedClouds","getAzureClouds","settingsEx","AzureCloud","isCredentialsComplete","credentials","concealed","getDefaultAzureCloud","getSecret","secret","hasCredentials","getAzureCloudOptions","cloud","getDefaultCredentials","getCredentials","updateCredentials","setDefaultCredentials","resetCredentials","AzureCredentialsForm","azureCloudOptions","onCredentialsChange","getSubscriptions","managedIdentityEnabled","workloadIdentityEnabled","hasRequiredFields","subscriptions","setSubscriptions","loadSubscriptionsClicked","onLoadSubscriptions","authTypeOptions","opts","updateSubscriptions","canceled","received","autoSelect","onSubscriptionChange","opt","onAuthTypeChange","selected","defaultAuthType","updated","onAzureCloudChange","onTenantIdChange","onClientIdChange","onClientSecretChange","onClientSecretReset","prometheusConfigOverhaulAuth","AzureAuthSettings","dataSourceConfig","overrideAudienceAllowed","overrideAudienceChecked","setOverrideAudienceChecked","onOverrideAudienceChange","onResourceIdChange","labelWidth","useEffectOnce","InlineFieldRow","DataSourcehttpSettingsOverhaul","azureAuthSettings","sigV4AuthToggleEnabled","renderSigV4Editor","secureSocksDSProxyEnabled","newAuthProps","customMethods","sigV4Selected","setSigV4Selected","sigV4Id","sigV4Option","azureAuthEnabled","azureAuthSelected","setAzureAuthSelected","azureAuthId","azureAuthOption","returnSelectedMethod","urlTooltip","ConnectionSettings","Auth","method","SecureSocksProxySettings","PROM_CONFIG_LABEL_WIDTH","overhaulStyles","DataSourceDescription","ConfigSection","AdvancedHttpSettings","docsTip","url","validateInput","input","errorMessage","defaultErrorMessage"],"sourceRoot":""}