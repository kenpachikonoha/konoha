{"version":3,"file":"AlertRuleListIndex.6965316b7ec5f39c79e6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleFolderExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleGroupExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ReorderRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/useCombinedGroupNamespace.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRulesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-list/RuleList.v1.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NeedHelpInfo.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/MultipleDataSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/plugins/useAlertingHomePageExtensions.ts","webpack://grafana/./node_modules/react-use/esm/useInterval.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { FolderDTO } from '../../../../../types';\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRuleFolderExporterProps {\n  folder: FolderDTO;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleFolderExporter({ folder, onClose }: GrafanaRuleFolderExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${folder.title} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleFolderExportPreview folder={folder} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleFolderExportPreviewProps {\n  folder: FolderDTO;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleFolderExportPreview({ folder, exportFormat, onClose }: GrafanaRuleFolderExportPreviewProps) {\n  const { currentData: exportFolderDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid: folder.uid,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  const downloadFileName = `${folder.title}-${folder.uid}`;\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={exportFolderDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRuleGroupExporterProps {\n  folderUid: string;\n  groupName: string;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleGroupExporter({ folderUid, groupName, onClose }: GrafanaRuleGroupExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${groupName} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleGroupExportPreview\n        folderUid={folderUid}\n        groupName={groupName}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleGroupExportPreviewProps {\n  folderUid: string;\n  groupName: string;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleGroupExportPreview({\n  folderUid,\n  groupName,\n  exportFormat,\n  onClose,\n}: GrafanaRuleGroupExportPreviewProps) {\n  const { currentData: ruleGroupTextDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid,\n    group: groupName,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={ruleGroupTextDefinition}\n      downloadFileName={groupName}\n      onClose={onClose}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { compact } from 'lodash';\nimport React, { useCallback, useState } from 'react';\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  Droppable,\n  DroppableProvided,\n  DropResult,\n} from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Icon, Modal, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useCombinedRuleNamespaces } from 'app/features/alerting/unified/hooks/useCombinedRuleNamespaces';\nimport { dispatch } from 'app/store/store';\nimport { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { updateRulesOrder } from '../../state/actions';\nimport { getRulesSourceName, isCloudRulesSource } from '../../utils/datasource';\nimport { hashRulerRule } from '../../utils/rule-id';\nimport { isAlertingRule, isRecordingRule } from '../../utils/rules';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n  folderUid?: string;\n}\n\ntype CombinedRuleWithUID = { uid: string } & CombinedRule;\n\nexport const ReorderCloudGroupModal = (props: ModalProps) => {\n  const { group, namespace, onClose, folderUid } = props;\n\n  // The list of rules might have been filtered before we get to this reordering modal\n  // We need to grab the full (unfiltered) list so we are able to reorder via the API without\n  // deleting any rules (as they otherwise would have been omitted from the payload)\n  const unfilteredNamespaces = useCombinedRuleNamespaces();\n  const matchedNamespace = unfilteredNamespaces.find(\n    (ns) => ns.rulesSource === namespace.rulesSource && ns.name === namespace.name\n  );\n  const matchedGroup = matchedNamespace?.groups.find((g) => g.name === group.name);\n\n  const [pending, setPending] = useState<boolean>(false);\n  const [rulesList, setRulesList] = useState<CombinedRule[]>(matchedGroup?.rules || []);\n\n  const styles = useStyles2(getStyles);\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      // check for no-ops so we don't update the group unless we have changes\n      if (!result.destination) {\n        return;\n      }\n\n      const sameIndex = result.destination.index === result.source.index;\n      if (sameIndex) {\n        return;\n      }\n\n      const newOrderedRules = reorder(rulesList, result.source.index, result.destination.index);\n      setRulesList(newOrderedRules); // optimistically update the new rules list\n\n      const rulesSourceName = getRulesSourceName(namespace.rulesSource);\n      const rulerRules = compact(newOrderedRules.map((rule) => rule.rulerRule));\n\n      setPending(true);\n      dispatch(\n        updateRulesOrder({\n          namespaceName: namespace.name,\n          groupName: group.name,\n          rulesSourceName: rulesSourceName,\n          newRules: rulerRules,\n          folderUid: folderUid || namespace.name,\n        })\n      )\n        .unwrap()\n        .finally(() => {\n          setPending(false);\n        });\n    },\n    [group.name, namespace.name, namespace.rulesSource, rulesList, folderUid]\n  );\n\n  // assign unique but stable identifiers to each (alerting / recording) rule\n  const rulesWithUID: CombinedRuleWithUID[] = rulesList.map((rule) => ({\n    ...rule,\n    uid: String(hashRulerRule(rule.rulerRule!)), // TODO fix this coercion?\n  }));\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={<ModalHeader namespace={namespace} group={group} />}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable\n          droppableId=\"alert-list\"\n          mode=\"standard\"\n          renderClone={(provided, _snapshot, rubric) => (\n            <ListItem provided={provided} rule={rulesWithUID[rubric.source.index]} isClone />\n          )}\n        >\n          {(droppableProvided: DroppableProvided) => (\n            <div\n              ref={droppableProvided.innerRef}\n              className={cx(styles.listContainer, pending && styles.disabled)}\n              {...droppableProvided.droppableProps}\n            >\n              {rulesWithUID.map((rule, index) => (\n                <Draggable key={rule.uid} draggableId={rule.uid} index={index} isDragDisabled={pending}>\n                  {(provided: DraggableProvided) => <ListItem key={rule.uid} provided={provided} rule={rule} />}\n                </Draggable>\n              ))}\n              {droppableProvided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </Modal>\n  );\n};\n\ninterface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  provided: DraggableProvided;\n  rule: CombinedRule;\n  isClone?: boolean;\n  isDragging?: boolean;\n}\n\nconst ListItem = ({ provided, rule, isClone = false, isDragging = false }: ListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div\n      data-testid=\"reorder-alert-rule\"\n      className={cx(styles.listItem, isClone && 'isClone', isDragging && 'isDragging')}\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n    >\n      {isAlertingRule(rule.promRule) && <AlertStateTag state={rule.promRule.state} />}\n      {isRecordingRule(rule.promRule) && <Badge text={'Recording'} color={'blue'} />}\n      <div className={styles.listItemName}>{rule.name}</div>\n      <Icon name={'draggabledots'} />\n    </div>\n  );\n};\n\ninterface ModalHeaderProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nconst ModalHeader = ({ namespace, group }: ModalHeaderProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.header}>\n      <Icon name=\"folder\" />\n      {isCloudRulesSource(namespace.rulesSource) && (\n        <Tooltip content={namespace.rulesSource.name} placement=\"top\">\n          <img\n            alt={namespace.rulesSource.meta.name}\n            className={styles.dataSourceIcon}\n            src={namespace.rulesSource.meta.info.logos.small}\n          />\n        </Tooltip>\n      )}\n      <span>{namespace.name}</span>\n      <Icon name=\"angle-right\" />\n      <span>{group.name}</span>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    maxWidth: '640px',\n    maxHeight: '80%',\n    overflow: 'hidden',\n  }),\n  listItem: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n\n    gap: theme.spacing(),\n\n    background: theme.colors.background.primary,\n    color: theme.colors.text.secondary,\n\n    borderBottom: `solid 1px ${theme.colors.border.medium}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n\n    '&:last-child': {\n      borderBottom: 'none',\n    },\n\n    '&.isClone': {\n      border: `solid 1px ${theme.colors.primary.shade}`,\n    },\n  }),\n  listContainer: css({\n    userSelect: 'none',\n    border: `solid 1px ${theme.colors.border.medium}`,\n  }),\n  disabled: css({\n    opacity: '0.5',\n    pointerEvents: 'none',\n  }),\n  listItemName: css({\n    flex: 1,\n\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  }),\n  header: css({\n    display: 'flex',\n    alignItems: 'center',\n\n    gap: theme.spacing(1),\n  }),\n  dataSourceIcon: css({\n    width: theme.spacing(2),\n    height: theme.spacing(2),\n  }),\n});\n\nexport function reorder<T>(rules: T[], startIndex: number, endIndex: number): T[] {\n  const result = Array.from(rules);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Badge, ConfirmModal, Icon, Spinner, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { deleteRulesGroupAction } from '../../state/actions';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { makeFolderLink, makeFolderSettingsLink } from '../../utils/misc';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\nimport { GrafanaRuleFolderExporter } from '../export/GrafanaRuleFolderExporter';\nimport { GrafanaRuleGroupExporter } from '../export/GrafanaRuleGroupExporter';\nimport { decodeGrafanaNamespace } from '../expressions/util';\n\nimport { ActionIcon } from './ActionIcon';\nimport { EditCloudGroupModal } from './EditRuleGroupModal';\nimport { ReorderCloudGroupModal } from './ReorderRuleGroupModal';\nimport { RuleGroupStats } from './RuleStats';\nimport { RulesTable } from './RulesTable';\n\ntype ViewMode = 'grouped' | 'list';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n  viewMode: ViewMode;\n}\n\nexport const RulesGroup = React.memo(({ group, namespace, expandAll, viewMode }: Props) => {\n  const { rulesSource } = namespace;\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isReorderingGroup, setIsReorderingGroup] = useState(false);\n  const [isExporting, setIsExporting] = useState<'group' | 'folder' | undefined>(undefined);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  const { canEditRules } = useRulesAccess();\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const { hasRuler, rulerRulesLoaded } = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting =\n    hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  // check if group has provisioned items\n  const isProvisioned = group.rules.some((rule) => {\n    return isGrafanaRulerRule(rule.rulerRule) && rule.rulerRule.grafana_alert.provenance;\n  });\n\n  // check what view mode we are in\n  const isListView = viewMode === 'list';\n  const isGroupView = viewMode === 'grouped';\n\n  const deleteGroup = () => {\n    dispatch(deleteRulesGroupAction(namespace, group));\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <Stack key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </Stack>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = makeFolderLink(folderUID);\n      if (folder?.canSave) {\n        if (isGroupView && !isProvisioned) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"edit rule group\"\n              data-testid=\"edit-group\"\n              key=\"edit\"\n              icon=\"pen\"\n              tooltip=\"edit rule group\"\n              onClick={() => setIsEditingGroup(true)}\n            />\n          );\n          actionIcons.push(\n            <ActionIcon\n              data-testid=\"reorder-group\"\n              key=\"reorder\"\n              icon=\"exchange-alt\"\n              tooltip=\"reorder rules\"\n              className={styles.rotate90}\n              onClick={() => setIsReorderingGroup(true)}\n            />\n          );\n        }\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"go to folder\"\n              key=\"goto\"\n              icon=\"folder-open\"\n              tooltip=\"go to folder\"\n              to={baseUrl}\n              target=\"__blank\"\n            />\n          );\n\n          if (folder?.canAdmin) {\n            actionIcons.push(\n              <ActionIcon\n                aria-label=\"manage permissions\"\n                key=\"manage-perms\"\n                icon=\"lock\"\n                tooltip=\"manage permissions\"\n                to={baseUrl + '/permissions'}\n                target=\"__blank\"\n              />\n            );\n          }\n        }\n      }\n      if (folder) {\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"export rule folder\"\n              data-testid=\"export-folder\"\n              key=\"export-folder\"\n              icon=\"download-alt\"\n              tooltip=\"Export rules folder\"\n              onClick={() => setIsExporting('folder')}\n            />\n          );\n        } else if (isGroupView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"export rule group\"\n              data-testid=\"export-group\"\n              key=\"export-group\"\n              icon=\"download-alt\"\n              tooltip=\"Export rule group\"\n              onClick={() => setIsExporting('group')}\n            />\n          );\n        }\n      }\n    }\n  } else if (canEditRules(rulesSource.name) && hasRuler(rulesSource)) {\n    if (!isFederated) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"edit rule group\"\n          data-testid=\"edit-group\"\n          key=\"edit\"\n          icon=\"pen\"\n          tooltip=\"edit rule group\"\n          onClick={() => setIsEditingGroup(true)}\n        />\n      );\n      actionIcons.push(\n        <ActionIcon\n          data-testid=\"reorder-group\"\n          key=\"reorder\"\n          icon=\"exchange-alt\"\n          tooltip=\"reorder rules\"\n          className={styles.rotate90}\n          onClick={() => setIsReorderingGroup(true)}\n        />\n      );\n    }\n\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"delete rule group\"\n        data-testid=\"delete-group\"\n        key=\"delete-group\"\n        icon=\"trash-alt\"\n        tooltip=\"delete rule group\"\n        onClick={() => setIsDeletingGroup(true)}\n      />\n    );\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const groupName = isListView ? (\n    <RuleLocation namespace={decodeGrafanaNamespace(namespace).name} />\n  ) : (\n    <RuleLocation namespace={decodeGrafanaNamespace(namespace).name} group={group.name} />\n  );\n\n  const closeEditModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          size=\"sm\"\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid={selectors.components.AlertRules.groupToggle}\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img\n              alt={rulesSource.meta.name}\n              className={styles.dataSourceIcon}\n              src={rulesSource.meta.info.logos.small}\n            />\n          </Tooltip>\n        )}\n        {\n          // eslint-disable-next-line\n          <div className={styles.groupName} onClick={() => setIsCollapsed(!isCollapsed)}>\n            {isFederated && <Badge color=\"purple\" text=\"Federated\" />} {groupName}\n          </div>\n        }\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleGroupStats group={group} />\n        </div>\n        {isProvisioned && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Badge color=\"purple\" text=\"Provisioned\" />\n            </div>\n          </>\n        )}\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Stack gap={0.5}>{actionIcons}</Stack>\n            </div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable\n          showSummaryColumn={true}\n          className={styles.rulesTable}\n          showGuidelines={true}\n          showNextEvaluationColumn={Boolean(group.interval)}\n          rules={group.rules}\n        />\n      )}\n      {isEditingGroup && (\n        <EditCloudGroupModal\n          namespace={namespace}\n          group={group}\n          onClose={() => closeEditModal()}\n          folderUrl={folder?.canEdit ? makeFolderSettingsLink(folder.uid) : undefined}\n          folderUid={folderUID}\n        />\n      )}\n      {isReorderingGroup && (\n        <ReorderCloudGroupModal\n          group={group}\n          folderUid={folderUID}\n          namespace={namespace}\n          onClose={() => setIsReorderingGroup(false)}\n        />\n      )}\n      <ConfirmModal\n        isOpen={isDeletingGroup}\n        title=\"Delete group\"\n        body={\n          <div>\n            <p>\n              Deleting &quot;<strong>{group.name}</strong>&quot; will permanently remove the group and{' '}\n              {group.rules.length} alert {pluralize('rule', group.rules.length)} belonging to it.\n            </p>\n            <p>Are you sure you want to delete this group?</p>\n          </div>\n        }\n        onConfirm={deleteGroup}\n        onDismiss={() => setIsDeletingGroup(false)}\n        confirmText=\"Delete\"\n      />\n      {folder && isExporting === 'folder' && (\n        <GrafanaRuleFolderExporter folder={folder} onClose={() => setIsExporting(undefined)} />\n      )}\n      {folder && isExporting === 'group' && (\n        <GrafanaRuleGroupExporter\n          folderUid={folder.uid}\n          groupName={group.name}\n          onClose={() => setIsExporting(undefined)}\n        />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({}),\n    header: css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n      flexWrap: 'nowrap',\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n\n      '&:hover': {\n        backgroundColor: theme.components.table.rowHoverBackground,\n      },\n    }),\n    headerStats: css({\n      flexShrink: 0,\n\n      span: {\n        verticalAlign: 'middle',\n      },\n\n      [theme.breakpoints.down('sm')]: {\n        order: 2,\n        width: '100%',\n        paddingLeft: theme.spacing(1),\n      },\n    }),\n    groupName: css({\n      marginLeft: theme.spacing(1),\n      marginBottom: 0,\n      cursor: 'pointer',\n\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    }),\n    spacer: css({\n      flex: 1,\n    }),\n    collapseToggle: css({\n      background: 'none',\n      border: 'none',\n      marginTop: `-${theme.spacing(1)}`,\n      marginBottom: `-${theme.spacing(1)}`,\n\n      svg: {\n        marginBottom: 0,\n      },\n    }),\n    dataSourceIcon: css({\n      width: theme.spacing(2),\n      height: theme.spacing(2),\n      marginLeft: theme.spacing(2),\n    }),\n    dataSourceOrigin: css({\n      marginRight: '1em',\n      color: theme.colors.text.disabled,\n    }),\n    actionsSeparator: css({\n      margin: `0 ${theme.spacing(2)}`,\n    }),\n    actionIcons: css({\n      width: '80px',\n      alignItems: 'center',\n\n      flexShrink: 0,\n    }),\n    rulesTable: css({\n      margin: theme.spacing(2, 0),\n    }),\n    rotate90: css({\n      transform: 'rotate(90deg)',\n    }),\n  };\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\n\nexport function useCombinedGroupNamespace(namespaces: CombinedRuleNamespace[]) {\n  return useMemo(\n    () =>\n      namespaces.flatMap((ns) =>\n        ns.groups.map((g) => ({\n          namespace: ns,\n          group: g,\n        }))\n      ),\n    [namespaces]\n  );\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { LinkButton, LoadingPlaceholder, Pagination, Spinner, useStyles2, Text } from '@grafana/ui';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { getRulesDataSources, getRulesSourceUid } from '../../utils/datasource';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const dsConfigs = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespaces);\n\n  const dataSourcesLoading = useMemo(\n    () =>\n      rulesDataSources.filter(\n        (ds) => isAsyncRequestStatePending(promRules[ds.name]) || isAsyncRequestStatePending(dsConfigs[ds.name])\n      ),\n    [promRules, dsConfigs, rulesDataSources]\n  );\n\n  const hasSomeResults = rulesDataSources.some((ds) => Boolean(promRules[ds.name]?.result?.length));\n\n  const hasDataSourcesConfigured = rulesDataSources.length > 0;\n  const hasDataSourcesLoading = dataSourcesLoading.length > 0;\n  const hasNamespaces = namespaces.length > 0;\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <div className={styles.headerRow}>\n          <Text element=\"h2\" variant=\"h5\">\n            Mimir / Cortex / Loki\n          </Text>\n          {dataSourcesLoading.length ? (\n            <LoadingPlaceholder\n              className={styles.loader}\n              text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n            />\n          ) : (\n            <div />\n          )}\n          <CreateRecordingRuleButton />\n        </div>\n      </div>\n\n      {pageItems.map(({ group, namespace }) => {\n        return (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceUid(namespace.rulesSource)}-${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n            viewMode={'grouped'}\n          />\n        );\n      })}\n\n      {!hasDataSourcesConfigured && <p>There are no Prometheus or Loki data sources configured.</p>}\n      {hasDataSourcesConfigured && !hasDataSourcesLoading && !hasNamespaces && <p>No rules found.</p>}\n      {!hasSomeResults && hasDataSourcesLoading && <Spinner size=\"xl\" className={styles.spinner} />}\n\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css({\n    marginBottom: 0,\n  }),\n  sectionHeader: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n  }),\n  wrapper: css({\n    marginBottom: theme.spacing(4),\n  }),\n  spinner: css({\n    textAlign: 'center',\n    padding: theme.spacing(2),\n  }),\n  pagination: getPaginationStyles(theme),\n  headerRow: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: theme.spacing(1),\n  }),\n});\n\nexport function CreateRecordingRuleButton() {\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertingAbility(AlertingAction.CreateExternalAlertRule);\n\n  const location = useLocation();\n\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n\n  if (canCreateCloudRules) {\n    return (\n      <LinkButton\n        key=\"new-recording-rule\"\n        href={urlUtil.renderUrl(`alerting/new/recording`, {\n          returnTo: location.pathname + location.search,\n        })}\n        icon=\"plus\"\n        variant=\"secondary\"\n      >\n        New recording rule\n      </LinkButton>\n    );\n  }\n  return null;\n}\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRulesExporterProps {\n  onClose: () => void;\n}\n\nexport function GrafanaRulesExporter({ onClose }: GrafanaRulesExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRulesExportPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRulesExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRulesExportPreview({ exportFormat, onClose }: GrafanaRulesExportPreviewProps) {\n  const { currentData: rulesDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `alert-rules-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={rulesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, LoadingPlaceholder, Pagination, Spinner, useStyles2, Text } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { flattenGrafanaManagedRules } from '../../hooks/useCombinedRuleNamespaces';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { GrafanaRulesExporter } from '../export/GrafanaRulesExporter';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n\n  const { prom, ruler } = useUnifiedAlertingSelector((state) => ({\n    prom: state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n    ruler: state.rulerRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n  }));\n\n  const loading = prom.loading || ruler.loading;\n  const hasResult = !!prom.result || !!ruler.result;\n\n  const wantsListView = queryParams['view'] === 'list';\n  const namespacesFormat = wantsListView ? flattenGrafanaManagedRules(namespaces) : namespaces;\n\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespacesFormat);\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  const [exportRulesSupported, exportRulesAllowed] = useAlertingAbility(AlertingAction.ExportGrafanaManagedRules);\n  const canExportRules = exportRulesSupported && exportRulesAllowed;\n\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const hasGrafanaAlerts = namespaces.length > 0;\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <div className={styles.headerRow}>\n          <Text element=\"h2\" variant=\"h5\">\n            Grafana\n          </Text>\n          {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n          {hasGrafanaAlerts && canExportRules && (\n            <Button\n              aria-label=\"export all grafana rules\"\n              data-testid=\"export-all-grafana-rules\"\n              icon=\"download-alt\"\n              tooltip=\"Export all Grafana-managed rules\"\n              onClick={toggleShowExportDrawer}\n              variant=\"secondary\"\n            >\n              Export rules\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {pageItems.map(({ group, namespace }) => (\n        <RulesGroup\n          group={group}\n          key={`${namespace.name}-${group.name}`}\n          namespace={namespace}\n          expandAll={expandAll}\n          viewMode={wantsListView ? 'list' : 'grouped'}\n        />\n      ))}\n      {hasResult && namespacesFormat?.length === 0 && <p>No rules found.</p>}\n      {!hasResult && loading && <Spinner size=\"xl\" className={styles.spinner} />}\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n      {canExportRules && showExportDrawer && <GrafanaRulesExporter onClose={toggleShowExportDrawer} />}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css({\n    marginBottom: 0,\n  }),\n  sectionHeader: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(1),\n  }),\n  wrapper: css({\n    marginBottom: theme.spacing(4),\n  }),\n  spinner: css({\n    textAlign: 'center',\n    padding: theme.spacing(2),\n  }),\n  pagination: getPaginationStyles(theme),\n  headerRow: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: '100%',\n    flexDirection: 'row',\n  }),\n});\n","import React, { useEffect, useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { AlertingAction } from '../../hooks/useAbilities';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { Authorize } from '../Authorize';\n\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView = ({ namespaces, expandAll }: Props) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  useEffect(() => {\n    logInfo(LogMessages.loadedList);\n  }, []);\n\n  return (\n    <>\n      <Authorize actions={[AlertingAction.ViewAlertRule]}>\n        <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      </Authorize>\n      <Authorize actions={[AlertingAction.ViewExternalAlertRule]}>\n        <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n      </Authorize>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection = ({ rules, state, defaultCollapsed = false }: Props) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css({\n    verticalAlign: 'middle',\n  }),\n  header: css({\n    marginTop: theme.spacing(2),\n  }),\n  rulesTable: css({\n    marginTop: theme.spacing(3),\n  }),\n});\n","import React, { useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\n\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll?: boolean;\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView = ({ namespaces }: Props) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAsyncFn, useInterval } from 'react-use';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { Button, LinkButton, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\nimport { LogMessages, logInfo, trackRuleListNavigation } from '../../Analytics';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules, useRulesFilter } from '../../hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction } from '../../state/actions';\nimport { RULE_LIST_POLL_INTERVAL_MS } from '../../utils/constants';\nimport { getAllRulesSourceNames } from '../../utils/datasource';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport { NoRulesSplash } from '../rules/NoRulesCTA';\nimport { INSTANCES_DISPLAY_LIMIT } from '../rules/RuleDetails';\nimport { RuleListErrors } from '../rules/RuleListErrors';\nimport { RuleListGroupView } from '../rules/RuleListGroupView';\nimport { RuleListStateView } from '../rules/RuleListStateView';\nimport { RuleStats } from '../rules/RuleStats';\nimport RulesFilter from '../rules/RulesFilter';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\n// make sure we ask for 1 more so we show the \"show x more\" button\nconst LIMIT_ALERTS = INSTANCES_DISPLAY_LIMIT + 1;\n\nconst RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const [expandAll, setExpandAll] = useState(false);\n\n    const onFilterCleared = useCallback(() => setExpandAll(false), []);\n\n    const [queryParams] = useQueryParams();\n    const { filterState, hasActiveFilters } = useRulesFilter();\n\n    const queryParamView = queryParams['view'] as keyof typeof VIEWS;\n    const view = VIEWS[queryParamView] ? queryParamView : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n\n    const promRequests = Object.entries(promRuleRequests);\n    const rulerRequests = Object.entries(rulerRuleRequests);\n\n    const allPromLoaded = promRequests.every(\n      ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n    );\n    const allRulerLoaded = rulerRequests.every(\n      ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n    );\n\n    const allPromEmpty = promRequests.every(([_, state]) => state.dispatched && state?.result?.length === 0);\n\n    const allRulerEmpty = rulerRequests.every(([_, state]) => {\n      const rulerRules = Object.entries(state?.result ?? {});\n      const noRules = rulerRules.every(([_, result]) => result?.length === 0);\n      return noRules && state.dispatched;\n    });\n\n    const limitAlerts = hasActiveFilters ? undefined : LIMIT_ALERTS;\n    // Trigger data refresh only when the RULE_LIST_POLL_INTERVAL_MS elapsed since the previous load FINISHED\n    const [_, fetchRules] = useAsyncFn(async () => {\n      if (!loading) {\n        await dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n      }\n    }, [loading, limitAlerts, dispatch]);\n\n    useEffect(() => {\n      trackRuleListNavigation().catch(() => {});\n    }, []);\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n    }, [dispatch, limitAlerts]);\n    useInterval(fetchRules, RULE_LIST_POLL_INTERVAL_MS);\n\n    // Show splash only when we loaded all of the data sources and none of them has alerts\n    const hasNoAlertRulesCreatedYet =\n      allPromLoaded && allPromEmpty && promRequests.length > 0 && allRulerEmpty && allRulerLoaded;\n    const hasAlertRulesCreated = !hasNoAlertRulesCreatedYet;\n\n    const combinedNamespaces: CombinedRuleNamespace[] = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces, filterState);\n    return (\n      // We don't want to show the Loading... indicator for the whole page.\n      // We show separate indicators for Grafana-managed and Cloud rules\n      <AlertingPageWrapper navId=\"alert-list\" isLoading={false} actions={hasAlertRulesCreated && <CreateAlertButton />}>\n        <RuleListErrors />\n        <RulesFilter onFilterCleared={onFilterCleared} />\n        {hasAlertRulesCreated && (\n          <>\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <div className={styles.statsContainer}>\n                {view === 'groups' && hasActiveFilters && (\n                  <Button\n                    className={styles.expandAllButton}\n                    icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                    variant=\"secondary\"\n                    onClick={() => setExpandAll(!expandAll)}\n                  >\n                    {expandAll ? 'Collapse all' : 'Expand all'}\n                  </Button>\n                )}\n                <RuleStats namespaces={filteredNamespaces} />\n              </div>\n            </div>\n          </>\n        )}\n        {hasNoAlertRulesCreatedYet && <NoRulesSplash />}\n        {hasAlertRulesCreated && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css({\n    width: '100%',\n    height: 0,\n    marginBottom: theme.spacing(2),\n    borderBottom: `solid 1px ${theme.colors.border.medium}`,\n  }),\n  buttonsContainer: css({\n    marginBottom: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'space-between',\n  }),\n  statsContainer: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  }),\n  expandAllButton: css({\n    marginRight: theme.spacing(1),\n  }),\n});\n\nexport default RuleList;\n\nexport function CreateAlertButton() {\n  const [createRuleSupported, createRuleAllowed] = useAlertingAbility(AlertingAction.CreateAlertRule);\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertingAbility(AlertingAction.CreateExternalAlertRule);\n\n  const location = useLocation();\n\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n\n  const canCreateGrafanaRules = createRuleSupported && createRuleAllowed;\n\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <LinkButton\n        href={urlUtil.renderUrl('alerting/new/alerting', { returnTo: location.pathname + location.search })}\n        icon=\"plus\"\n        onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n      >\n        New alert rule\n      </LinkButton>\n    );\n  }\n  return null;\n}\n","import React, { Suspense } from 'react';\n\nimport { config } from '@grafana/runtime';\n\nimport RuleListV1 from './components/rule-list/RuleList.v1';\nconst RuleListV2 = React.lazy(() => import('./components/rule-list/RuleList.v2'));\n\nconst RuleList = () => {\n  const newView = config.featureToggles.alertingListViewV2;\n\n  return <Suspense>{newView ? <RuleListV2 /> : <RuleListV1 />}</Suspense>;\n};\n\nexport default RuleList;\n","import { chain, filter } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import React, { HTMLAttributes } from 'react';\n\nimport { IconSize, Button } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport React, { useCallback, useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ClipboardButton, CodeEditor, TextLink, useStyles2 } from '@grafana/ui';\n\nimport { allGrafanaExportProviders, ExportFormats, ExportProvider, ProvisioningType } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n  const provider = allGrafanaExportProviders[format];\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n  }, [textDefinition, downloadFileName, format]);\n\n  const formattedTextDefinition = useMemo(() => {\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [provider, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <FileExportInlineDocumentation exportProvider={provider} />\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                scrollBeyondLastLine: false,\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          Copy code\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          Download\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    gap: theme.spacing(2),\n  }),\n  content: css({\n    flex: '1 1 100%',\n  }),\n  actions: css({\n    flex: 0,\n    justifyContent: 'flex-end',\n    display: 'flex',\n    gap: theme.spacing(1),\n  }),\n});\n\nfunction FileExportInlineDocumentation({ exportProvider }: { exportProvider: ExportProvider<unknown> }) {\n  const { name, type } = exportProvider;\n\n  const exportInlineDoc: Record<ProvisioningType, { title: string; component: React.ReactNode }> = {\n    file: {\n      title: 'File-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for File Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/file-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    api: {\n      title: 'API-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for API Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/http-api-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    terraform: {\n      title: 'Terraform-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for Terraform Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/terraform-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n  };\n\n  const { title, component } = exportInlineDoc[type];\n\n  return (\n    <Alert title={title} severity=\"info\" bottomSpacing={0} topSpacing={0}>\n      {component}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { Drawer } from '@grafana/ui';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  return (\n    <Drawer\n      title={title}\n      subtitle=\"Select the format and download the file or copy the contents to clipboard\"\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export type ProvisioningType = 'file' | 'api' | 'terraform';\n\nexport interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  type: ProvisioningType;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  type: 'file',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n  type: 'file',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n  type: 'terraform',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Text, Toggletip, useStyles2, Stack } from '@grafana/ui';\n\ninterface NeedHelpInfoProps {\n  contentText: string | JSX.Element;\n  externalLink?: string;\n  linkText?: string;\n  title?: string;\n}\nexport function NeedHelpInfo({ contentText, externalLink, linkText, title = 'Need help?' }: NeedHelpInfoProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Toggletip\n      content={<div className={styles.mutedText}>{contentText}</div>}\n      title={\n        <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n          <Icon name=\"question-circle\" />\n          {title}\n        </Stack>\n      }\n      footer={\n        externalLink ? (\n          <a href={externalLink} target=\"_blank\" rel=\"noreferrer\">\n            <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n              <Text color=\"link\">\n                {linkText} <Icon size=\"sm\" name=\"external-link-alt\" />\n              </Text>\n            </Stack>\n          </a>\n        ) : undefined\n      }\n      closeButton={true}\n      placement=\"bottom-start\"\n    >\n      <div className={styles.helpInfo}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n          <Icon name=\"question-circle\" size=\"sm\" />\n          <Text variant=\"bodySmall\" color=\"primary\">\n            Need help?\n          </Text>\n        </Stack>\n      </div>\n    </Toggletip>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  mutedText: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.size.sm,\n  }),\n  helpInfo: css({\n    cursor: 'pointer',\n    textDecoration: 'underline',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport React, { ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FieldSet, Text, useStyles2, Stack } from '@grafana/ui';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string | ReactElement;\n  fullWidth?: boolean;\n}\n\nexport const RuleEditorSection = ({\n  title,\n  stepNo,\n  children,\n  fullWidth = false,\n  description,\n}: React.PropsWithChildren<RuleEditorSectionProps>) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.parent}>\n      <FieldSet\n        className={cx(fullWidth && styles.fullWidth)}\n        label={\n          <Text variant=\"h3\">\n            {stepNo}. {title}\n          </Text>\n        }\n      >\n        <Stack direction=\"column\">\n          {description && <div className={styles.description}>{description}</div>}\n          {children}\n        </Stack>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  parent: css({\n    display: 'flex',\n    flexDirection: 'row',\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: `${theme.spacing(2)} ${theme.spacing(3)}`,\n  }),\n  description: css({\n    marginTop: `-${theme.spacing(2)}`,\n  }),\n  fullWidth: css({\n    width: '100%',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport React, { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, useStyles2, Tooltip } from '@grafana/ui';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { isAlertingRulerRule, isRecordingRulerRule } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title=\"Inspect Alert rule\"\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          Apply\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (isAlertingRulerRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (isRecordingRulerRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css({\n    flexGrow: 1,\n    height: '100%',\n    paddingBottom: '16px',\n    marginBottom: theme.spacing(2),\n  }),\n  applyButton: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    flexGrow: 0,\n    marginBottom: theme.spacing(2),\n  }),\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }),\n});\n","import React from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src/themes';\nimport { CallToActionCard, useStyles2, Stack } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nimport { logInfo, LogMessages } from '../../Analytics';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\n\nexport const NoRulesSplash = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n  const styles = useStyles2(getStyles);\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <div>\n        <p>{\"You haven't created any alert rules yet\"}</p>\n        <Stack gap={1}>\n          <div className={styles.newRuleCard}>\n            <EmptyListCTA\n              title=\"\"\n              buttonIcon=\"bell\"\n              buttonLink={'alerting/new/alerting'}\n              buttonTitle=\"New alert rule\"\n              proTip=\"you can also create alert rules from existing panels and queries.\"\n              proTipLink=\"https://grafana.com/docs/\"\n              proTipLinkTitle=\"Learn more\"\n              proTipTarget=\"_blank\"\n              onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n            />\n          </div>\n\n          <div className={styles.newRuleCard}>\n            <EmptyListCTA\n              title=\"\"\n              buttonIcon=\"plus\"\n              buttonLink={'alerting/new/recording'}\n              buttonTitle=\"New recording rule\"\n              onClick={() => logInfo(LogMessages.recordingRuleFromScratch)}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  newRuleCard: css({\n    width: `calc(50% - ${theme.spacing(1)})`,\n\n    '> div': {\n      height: '100%',\n    },\n  }),\n});\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState, FC } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeDataSourceLink } from '../../utils/misc';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const dataSourceConfigRequests = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [dataSourceConfigErrors, promRequestErrors, rulerRequestErrors] = [\n      dataSourceConfigRequests,\n      promRuleRequests,\n      rulerRuleRequests,\n    ].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    dataSourceConfigErrors.forEach(({ dataSource, error }) => {\n      result.push(\n        <>\n          Failed to load the data source configuration for{' '}\n          <a href={makeDataSourceLink(dataSource.uid)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      );\n    });\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from{' '}\n          <a href={makeDataSourceLink(dataSource.uid)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from{' '}\n          <a href={makeDataSourceLink(dataSource.uid)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests, styles.dsLink]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css({\n    padding: 0,\n  }),\n  floatRight: css({\n    display: 'flex',\n    justifyContent: 'flex-end',\n  }),\n  dsLink: css({\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n});\n","import React, { useState } from 'react';\nimport { PopValueActionMeta, RemoveValueActionMeta } from 'react-select';\n\nimport {\n  DataSourceInstanceSettings,\n  getDataSourceUID,\n  isUnsignedPluginSignature,\n  SelectableValue,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getDataSourceSrv, DataSourcePickerState, DataSourcePickerProps } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { ActionMeta, Stack, PluginSignatureBadge, MultiSelect } from '@grafana/ui';\n\nimport { isDataSourceManagingAlerts } from '../../utils/datasource';\n\nexport interface MultipleDataSourcePickerProps extends Omit<DataSourcePickerProps, 'onChange' | 'current'> {\n  onChange: (ds: DataSourceInstanceSettings, action: 'add' | 'remove') => void;\n  current: string[] | undefined;\n}\n\nexport const MultipleDataSourcePicker = (props: MultipleDataSourcePickerProps) => {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const [state, setState] = useState<DataSourcePickerState>();\n\n  const onChange = (items: Array<SelectableValue<string>>, actionMeta: ActionMeta) => {\n    if (actionMeta.action === 'clear' && props.onClear) {\n      props.onClear();\n      return;\n    }\n\n    const selectedItem = items[items.length - 1];\n\n    let dataSourceName, action: 'add' | 'remove';\n\n    if (actionMeta.action === 'pop-value' || actionMeta.action === 'remove-value') {\n      const castedActionMeta:\n        | RemoveValueActionMeta<SelectableValue<string>>\n        | PopValueActionMeta<SelectableValue<string>> = actionMeta;\n      dataSourceName = castedActionMeta.removedValue?.value;\n      action = 'remove';\n    } else {\n      dataSourceName = selectedItem.value;\n      action = 'add';\n    }\n\n    const dsSettings = dataSourceSrv.getInstanceSettings(dataSourceName);\n\n    if (dsSettings) {\n      props.onChange(dsSettings, action);\n      setState({ error: undefined });\n    }\n  };\n\n  const getCurrentValue = (): Array<SelectableValue<string>> | undefined => {\n    const { current, hideTextValue, noDefault } = props;\n    if (!current && noDefault) {\n      return;\n    }\n\n    return current?.map((dataSourceName: string) => {\n      const ds = dataSourceSrv.getInstanceSettings(dataSourceName);\n      if (ds) {\n        return {\n          label: ds.name.slice(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          hideText: hideTextValue,\n          meta: ds.meta,\n        };\n      }\n\n      const uid = getDataSourceUID(dataSourceName);\n\n      if (uid === ExpressionDatasourceRef.uid || uid === ExpressionDatasourceRef.name) {\n        return { label: uid, value: uid, hideText: hideTextValue };\n      }\n\n      return {\n        label: (uid ?? 'no name') + ' - not found',\n        value: uid ?? undefined,\n        imgUrl: '',\n        hideText: hideTextValue,\n      };\n    });\n  };\n\n  const getDataSourceOptions = () => {\n    const { alerting, tracing, metrics, mixed, dashboard, variables, annotations, pluginId, type, filter, logs } =\n      props;\n\n    const dataSources = dataSourceSrv.getList({\n      alerting,\n      tracing,\n      metrics,\n      logs,\n      dashboard,\n      mixed,\n      variables,\n      annotations,\n      pluginId,\n      filter,\n      type,\n    });\n\n    const alertManagingDs = dataSources.filter(isDataSourceManagingAlerts).map((ds) => ({\n      value: ds.name,\n      label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n      imgUrl: ds.meta.info.logos.small,\n      meta: ds.meta,\n    }));\n\n    const nonAlertManagingDs = dataSources\n      .filter((ds) => !isDataSourceManagingAlerts(ds))\n      .map((ds) => ({\n        value: ds.name,\n        label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n        imgUrl: ds.meta.info.logos.small,\n        meta: ds.meta,\n      }));\n\n    const groupedOptions = [\n      { label: 'Data sources with configured alert rules', options: alertManagingDs, expanded: true },\n      { label: 'Other data sources', options: nonAlertManagingDs, expanded: true },\n    ];\n\n    return groupedOptions;\n  };\n\n  const {\n    autoFocus,\n    onBlur,\n    onClear,\n    openMenuOnFocus,\n    placeholder,\n    width,\n    inputId,\n    disabled = false,\n    isLoading = false,\n  } = props;\n\n  const options = getDataSourceOptions();\n  const value = getCurrentValue();\n  const isClearable = typeof onClear === 'function';\n\n  return (\n    <div data-testid={selectors.components.DataSourcePicker.container}>\n      <MultiSelect\n        isLoading={isLoading}\n        disabled={disabled}\n        data-testid={selectors.components.DataSourcePicker.inputV2}\n        inputId={inputId || 'data-source-picker'}\n        className=\"ds-picker select-container\"\n        isClearable={isClearable}\n        backspaceRemovesValue={true}\n        onChange={onChange}\n        options={options}\n        autoFocus={autoFocus}\n        onBlur={onBlur}\n        width={width}\n        openMenuOnFocus={openMenuOnFocus}\n        maxMenuHeight={500}\n        placeholder={placeholder}\n        noOptionsMessage=\"No datasources found\"\n        value={value ?? []}\n        invalid={Boolean(state?.error) || Boolean(props.invalid)}\n        getOptionLabel={(o) => {\n          if (o.meta && isUnsignedPluginSignature(o.meta.signature) && o !== value) {\n            return (\n              <Stack alignItems=\"center\" justifyContent=\"space-between\">\n                <span>{o.label}</span> <PluginSignatureBadge status={o.meta.signature} />\n              </Stack>\n            );\n          }\n          return o.label || '';\n        }}\n      />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Button, Field, Icon, Input, Label, RadioButtonGroup, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport {\n  logInfo,\n  LogMessages,\n  trackRulesListViewChange,\n  trackRulesSearchComponentInteraction,\n  trackRulesSearchInputInteraction,\n} from '../../Analytics';\nimport { useRulesFilter } from '../../hooks/useFilteredRules';\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { useAlertingHomePageExtensions } from '../../plugins/useAlertingHomePageExtensions';\nimport { RuleHealth } from '../../search/rulesSearchParser';\nimport { alertStateToReadable } from '../../utils/rules';\nimport { HoverCard } from '../HoverCard';\n\nimport { MultipleDataSourcePicker } from './MultipleDataSourcePicker';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Grouped',\n    value: 'grouped',\n  },\n  {\n    icon: 'list-ul',\n    label: 'List',\n    value: 'list',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RuleTypeOptions: SelectableValue[] = [\n  {\n    label: 'Alert ',\n    value: PromRuleType.Alerting,\n  },\n  {\n    label: 'Recording ',\n    value: PromRuleType.Recording,\n  },\n];\n\nconst RuleHealthOptions: SelectableValue[] = [\n  { label: 'Ok', value: RuleHealth.Ok },\n  { label: 'No Data', value: RuleHealth.NoData },\n  { label: 'Error', value: RuleHealth.Error },\n];\n\ninterface RulesFilerProps {\n  onFilterCleared?: () => void;\n}\n\nconst RuleStateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n  label: alertStateToReadable(value),\n  value,\n}));\n\nconst RulesFilter = ({ onFilterCleared = () => undefined }: RulesFilerProps) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams, updateQueryParams] = useURLSearchParams();\n  const { pluginsFilterEnabled } = usePluginsFilterStatus();\n  const { filterState, hasActiveFilters, searchQuery, setSearchQuery, updateFilters } = useRulesFilter();\n\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const searchQueryRef = useRef<HTMLInputElement | null>(null);\n  const { handleSubmit, register, setValue } = useForm<{ searchQuery: string }>({ defaultValues: { searchQuery } });\n  const { ref, ...rest } = register('searchQuery');\n\n  useEffect(() => {\n    setValue('searchQuery', searchQuery);\n  }, [searchQuery, setValue]);\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings, action: 'add' | 'remove') => {\n    const dataSourceNames =\n      action === 'add'\n        ? [...filterState.dataSourceNames].concat([dataSourceValue.name])\n        : filterState.dataSourceNames.filter((name) => name !== dataSourceValue.name);\n\n    updateFilters({\n      ...filterState,\n      dataSourceNames,\n    });\n\n    setFilterKey((key) => key + 1);\n    trackRulesSearchComponentInteraction('dataSourceNames');\n  };\n\n  const handleDashboardChange = (dashboardUid: string | undefined) => {\n    updateFilters({ ...filterState, dashboardUid });\n    trackRulesSearchComponentInteraction('dashboardUid');\n  };\n\n  const clearDataSource = () => {\n    updateFilters({ ...filterState, dataSourceNames: [] });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleAlertStateChange = (value: PromAlertingRuleState) => {\n    logInfo(LogMessages.clickingAlertStateFilters);\n    updateFilters({ ...filterState, ruleState: value });\n    trackRulesSearchComponentInteraction('ruleState');\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    updateFilters({ ...filterState, ruleType });\n    trackRulesSearchComponentInteraction('ruleType');\n  };\n\n  const handleRuleHealthChange = (ruleHealth: RuleHealth) => {\n    updateFilters({ ...filterState, ruleHealth });\n    trackRulesSearchComponentInteraction('ruleHealth');\n  };\n\n  const handleClearFiltersClick = () => {\n    setSearchQuery(undefined);\n    onFilterCleared();\n\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const handleViewChange = (view: string) => {\n    updateQueryParams({ view });\n    trackRulesListViewChange({ view });\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"column\" gap={1}>\n        <Stack direction=\"row\" gap={1} wrap=\"wrap\">\n          <Field\n            className={styles.dsPickerContainer}\n            label={\n              <Label htmlFor=\"data-source-picker\">\n                <Stack gap={0.5} alignItems=\"center\">\n                  <span>Search by data sources</span>\n                  <Tooltip\n                    content={\n                      <div>\n                        <p>\n                          Data sources containing configured alert rules are Mimir or Loki data sources where alert\n                          rules are stored and evaluated in the data source itself.\n                        </p>\n                        <p>\n                          In these data sources, you can select Manage alerts via Alerting UI to be able to manage these\n                          alert rules in the Grafana UI as well as in the data source where they were configured.\n                        </p>\n                      </div>\n                    }\n                  >\n                    <Icon\n                      id=\"data-source-picker-inline-help\"\n                      name=\"info-circle\"\n                      size=\"sm\"\n                      title=\"Search by data sources help\"\n                    />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <MultipleDataSourcePicker\n              key={dataSourceKey}\n              alerting\n              noDefault\n              placeholder=\"All data sources\"\n              current={filterState.dataSourceNames}\n              onChange={handleDataSourceChange}\n              onClear={clearDataSource}\n            />\n          </Field>\n\n          <Field\n            className={styles.dashboardPickerContainer}\n            label={<Label htmlFor=\"filters-dashboard-picker\">Dashboard</Label>}\n          >\n            {/* The key prop is to clear the picker value */}\n            {/* DashboardPicker doesn't do that itself when value is undefined */}\n            <DashboardPicker\n              inputId=\"filters-dashboard-picker\"\n              key={filterState.dashboardUid ? 'dashboard-defined' : 'dashboard-not-defined'}\n              value={filterState.dashboardUid}\n              onChange={(value) => handleDashboardChange(value?.uid)}\n              isClearable\n              cacheOptions\n            />\n          </Field>\n\n          <div>\n            <Label>State</Label>\n            <RadioButtonGroup\n              options={RuleStateOptions}\n              value={filterState.ruleState}\n              onChange={handleAlertStateChange}\n            />\n          </div>\n          <div>\n            <Label>Rule type</Label>\n            <RadioButtonGroup options={RuleTypeOptions} value={filterState.ruleType} onChange={handleRuleTypeChange} />\n          </div>\n          <div>\n            <Label>Health</Label>\n            <RadioButtonGroup\n              options={RuleHealthOptions}\n              value={filterState.ruleHealth}\n              onChange={handleRuleHealthChange}\n            />\n          </div>\n          {pluginsFilterEnabled && (\n            <div>\n              <Label>Plugin rules</Label>\n              <RadioButtonGroup<'hide'>\n                options={[\n                  { label: 'Show', value: undefined },\n                  { label: 'Hide', value: 'hide' },\n                ]}\n                value={filterState.plugins}\n                onChange={(value) => updateFilters({ ...filterState, plugins: value })}\n              />\n            </div>\n          )}\n        </Stack>\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <form\n              className={styles.searchInput}\n              onSubmit={handleSubmit((data) => {\n                setSearchQuery(data.searchQuery);\n                searchQueryRef.current?.blur();\n                trackRulesSearchInputInteraction({ oldQuery: searchQuery, newQuery: data.searchQuery });\n              })}\n            >\n              <Field\n                label={\n                  <Label htmlFor=\"rulesSearchInput\">\n                    <Stack gap={0.5} alignItems=\"center\">\n                      <span>Search</span>\n                      <HoverCard content={<SearchQueryHelp />}>\n                        <Icon name=\"info-circle\" size=\"sm\" tabIndex={0} title=\"Search help\" />\n                      </HoverCard>\n                    </Stack>\n                  </Label>\n                }\n              >\n                <Input\n                  id=\"rulesSearchInput\"\n                  key={queryStringKey}\n                  prefix={searchIcon}\n                  ref={(e) => {\n                    ref(e);\n                    searchQueryRef.current = e;\n                  }}\n                  {...rest}\n                  placeholder=\"Search\"\n                  data-testid=\"search-query-input\"\n                />\n              </Field>\n              <input type=\"submit\" hidden />\n            </form>\n            <div>\n              <Label>View as</Label>\n              <RadioButtonGroup\n                options={ViewOptions}\n                value={queryParams.get('view') ?? ViewOptions[0].value}\n                onChange={handleViewChange}\n              />\n            </div>\n          </Stack>\n          {hasActiveFilters && (\n            <div>\n              <Button fullWidth={false} icon=\"times\" variant=\"secondary\" onClick={handleClearFiltersClick}>\n                Clear filters\n              </Button>\n            </div>\n          )}\n        </Stack>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      marginBottom: theme.spacing(1),\n    }),\n    dsPickerContainer: css({\n      width: theme.spacing(60),\n      flexGrow: 0,\n      margin: 0,\n    }),\n    dashboardPickerContainer: css({\n      minWidth: theme.spacing(50),\n    }),\n    searchInput: css({\n      flex: 1,\n      margin: 0,\n    }),\n  };\n};\n\nfunction SearchQueryHelp() {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <div>\n      <div>Search syntax allows to query alert rules by the parameters defined below.</div>\n      <hr />\n      <div className={styles.grid}>\n        <div>Filter type</div>\n        <div>Expression</div>\n        <HelpRow title=\"Datasources\" expr=\"datasource:mimir datasource:prometheus\" />\n        <HelpRow title=\"Folder/Namespace\" expr=\"namespace:global\" />\n        <HelpRow title=\"Group\" expr=\"group:cpu-usage\" />\n        <HelpRow title=\"Rule\" expr='rule:\"cpu 80%\"' />\n        <HelpRow title=\"Labels\" expr=\"label:team=A label:cluster=a1\" />\n        <HelpRow title=\"State\" expr=\"state:firing|normal|pending\" />\n        <HelpRow title=\"Type\" expr=\"type:alerting|recording\" />\n        <HelpRow title=\"Health\" expr=\"health:ok|nodata|error\" />\n        <HelpRow title=\"Dashboard UID\" expr=\"dashboard:eadde4c7-54e6-4964-85c0-484ab852fd04\" />\n      </div>\n    </div>\n  );\n}\n\nfunction HelpRow({ title, expr }: { title: string; expr: string }) {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <>\n      <div>{title}</div>\n      <code className={styles.code}>{expr}</code>\n    </>\n  );\n}\n\nconst helpStyles = (theme: GrafanaTheme2) => ({\n  grid: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content auto',\n    gap: theme.spacing(1),\n    alignItems: 'center',\n  }),\n  code: css({\n    display: 'block',\n    textAlign: 'center',\n  }),\n});\n\nfunction usePluginsFilterStatus() {\n  const { extensions } = useAlertingHomePageExtensions();\n  return { pluginsFilterEnabled: extensions.length > 0 };\n}\n\nexport default RulesFilter;\n","import { PluginExtensionPoints } from '@grafana/data';\nimport { usePluginComponentExtensions } from '@grafana/runtime';\n\nexport function useAlertingHomePageExtensions() {\n  return usePluginComponentExtensions({\n    extensionPointId: PluginExtensionPoints.AlertingHomePage,\n    limitPerPlugin: 1,\n  });\n}\n","import { useEffect, useRef } from 'react';\nvar useInterval = function (callback, delay) {\n    var savedCallback = useRef(function () { });\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    useEffect(function () {\n        if (delay !== null) {\n            var interval_1 = setInterval(function () { return savedCallback.current(); }, delay || 0);\n            return function () { return clearInterval(interval_1); };\n        }\n        return undefined;\n    }, [delay]);\n};\nexport default useInterval;\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","GrafanaRuleFolderExporter","folder","onClose","activeTab","setActiveTab","GrafanaExportDrawer","GrafanaRuleFolderExportPreview","exportFormat","exportFolderDefinition","isFetching","alertRuleApi","LoadingPlaceholder","downloadFileName","FileExportPreview","GrafanaRuleGroupExporter","folderUid","groupName","GrafanaRuleGroupExportPreview","ruleGroupTextDefinition","ReorderCloudGroupModal","props","group","namespace","matchedGroup","useCombinedRuleNamespaces","ns","g","pending","setPending","rulesList","setRulesList","styles","getStyles","onDragEnd","result","newOrderedRules","reorder","rulesSourceName","rulerRules","rule","rulesWithUID","Modal","ModalHeader","provided","_snapshot","rubric","ListItem","droppableProvided","index","isClone","isDragging","AlertStateTag","Badge","Icon","Tooltip","theme","rules","startIndex","endIndex","removed","RulesGroup","expandAll","viewMode","rulesSource","isEditingGroup","setIsEditingGroup","isDeletingGroup","setIsDeletingGroup","isReorderingGroup","setIsReorderingGroup","isExporting","setIsExporting","isCollapsed","setIsCollapsed","canEditRules","hasRuler","rulerRulesLoaded","useHasRuler","rulerRule","folderUID","useFolder","isDeleting","isFederated","isProvisioned","isListView","isGroupView","deleteGroup","actionIcons","Stack","Spinner","baseUrl","ActionIcon","RuleLocation","closeEditModal","saved","CollapseToggle","selectors","RulesTable","ConfirmModal","useCombinedGroupNamespace","namespaces","CloudRules","dsConfigs","useUnifiedAlertingSelector","state","promRules","rulesDataSources","groupsWithNamespaces","dataSourcesLoading","ds","hasSomeResults","hasDataSourcesConfigured","hasDataSourcesLoading","hasNamespaces","numberOfPages","onPageChange","page","pageItems","usePagination","Text","CreateRecordingRuleButton","Pagination","createCloudRuleSupported","createCloudRuleAllowed","location","url","GrafanaRulesExporter","GrafanaRulesExportPreview","rulesDefinition","GrafanaRules","queryParams","useQueryParams","prom","ruler","loading","hasResult","wantsListView","namespacesFormat","exportRulesSupported","exportRulesAllowed","canExportRules","showExportDrawer","toggleShowExportDrawer","useToggle","hasGrafanaAlerts","Button","RuleListGroupView","grafanaNamespaces","cloudNamespaces","sorted","a","b","Authorize","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","RuleListStateView","filters","groupedRules","VIEWS","LIMIT_ALERTS","RuleList","rulesDataSourceNames","setExpandAll","onFilterCleared","filterState","hasActiveFilters","queryParamView","view","ViewComponent","promRuleRequests","rulerRuleRequests","name","promRequests","rulerRequests","allPromLoaded","_","allRulerLoaded","allPromEmpty","allRulerEmpty","limitAlerts","fetchRules","useAsyncFn","useInterval","hasNoAlertRulesCreatedYet","hasAlertRulesCreated","combinedNamespaces","filteredNamespaces","useFilteredRules","AlertingPageWrapper","CreateAlertButton","RuleListErrors","RulesFilter","RuleStats","createRuleSupported","createRuleAllowed","RuleListV2","newView","config","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","onToggle","idControlled","className","text","size","restOfProps","format","textDefinition","fileExportPreviewStyles","provider","onDownload","blob","formattedTextDefinition","FileExportInlineDocumentation","height","exportProvider","type","exportInlineDoc","title","component","onTabChange","formatProviders","grafanaRulesTabs","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","NeedHelpInfo","contentText","externalLink","linkText","RuleEditorSection","stepNo","fullWidth","description","cloudRulesTabs","RuleInspector","setValue","drawerStyles","onApply","formValues","key","RuleInspectorTabs","InspectorYamlTab","tabs","tab","onSubmit","yamlTabStyle","getValues","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo","tooltip","icon","to","target","onClick","tooltipPlacement","rest","ariaLabel","NoRulesSplash","canCreateGrafanaRules","canCreateCloudRules","expanded","setExpanded","closed","setClosed","dataSourceConfigRequests","errors","dataSourceConfigErrors","promRequestErrors","rulerRequestErrors","requests","dataSource","error","grafanaPromError","grafanaRulerError","ErrorSummaryButton","item","idx","count","MultipleDataSourcePicker","dataSourceSrv","setState","onChange","items","actionMeta","selectedItem","dataSourceName","dsSettings","getCurrentValue","current","hideTextValue","noDefault","uid","getDataSourceOptions","alerting","tracing","metrics","mixed","dashboard","variables","annotations","pluginId","filter","logs","dataSources","alertManagingDs","nonAlertManagingDs","autoFocus","onBlur","onClear","openMenuOnFocus","placeholder","width","inputId","disabled","isLoading","options","value","isClearable","o","PluginSignatureBadge","ViewOptions","RuleTypeOptions","RuleHealthOptions","RuleStateOptions","updateQueryParams","useURLSearchParams","pluginsFilterEnabled","usePluginsFilterStatus","searchQuery","setSearchQuery","updateFilters","filterKey","setFilterKey","dataSourceKey","queryStringKey","searchQueryRef","handleSubmit","register","ref","handleDataSourceChange","dataSourceValue","dataSourceNames","handleDashboardChange","dashboardUid","clearDataSource","handleAlertStateChange","handleRuleTypeChange","ruleType","handleRuleHealthChange","ruleHealth","handleClearFiltersClick","handleViewChange","searchIcon","Field","Label","DashboardPicker","RadioButtonGroup","data","HoverCard","SearchQueryHelp","Input","e","helpStyles","HelpRow","expr","extensions","useAlertingHomePageExtensions","callback","delay","savedCallback","interval_1"],"sourceRoot":""}