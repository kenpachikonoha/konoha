{"version":3,"file":"RecentlyDeletedPage.88860c0117e2365e13d9.js","mappings":"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","sources":["webpack://grafana/./public/app/features/browse-dashboards/components/SearchView.tsx","webpack://grafana/./public/app/features/browse-dashboards/permissions.ts","webpack://grafana/./public/app/features/manage-dashboards/utils/useRecentlyDeletedStateManager.ts","webpack://grafana/./public/app/features/manage-dashboards/RecentlyDeletedPage.tsx","webpack://grafana/./public/app/features/search/page/components/ActionRow.tsx","webpack://grafana/./public/app/features/search/state/SearchStateManager.ts"],"sourcesContent":["import React, { useCallback } from 'react';\n\nimport { DataFrameView, toDataFrame } from '@grafana/data';\nimport { Button, EmptyState } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useKeyNavigationListener } from 'app/features/search/hooks/useSearchKeyboardSelection';\nimport { SearchResultsProps, SearchResultsTable } from 'app/features/search/page/components/SearchResultsTable';\nimport { SearchStateManager } from 'app/features/search/state/SearchStateManager';\nimport { DashboardViewItemKind, SearchState } from 'app/features/search/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { setAllSelection, setItemSelectionState, useHasSelection } from '../state';\n\ninterface SearchViewProps {\n  height: number;\n  width: number;\n  canSelect: boolean;\n  searchState: SearchState;\n  searchStateManager: SearchStateManager;\n}\n\nconst NUM_PLACEHOLDER_ROWS = 50;\nconst initialLoadingView = {\n  view: new DataFrameView(\n    toDataFrame({\n      fields: [\n        { name: 'uid', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill(null) },\n        { name: 'kind', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('dashboard') },\n        { name: 'name', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('') },\n        { name: 'location', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('') },\n        { name: 'tags', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill([]) },\n      ],\n      meta: {\n        custom: {\n          locationInfo: [],\n        },\n      },\n    })\n  ),\n  loadMoreItems: () => Promise.resolve(),\n  // this is key and controls whether to show the skeleton in generateColumns\n  isItemLoaded: () => false,\n  totalRows: NUM_PLACEHOLDER_ROWS,\n};\n\nexport function SearchView({\n  width,\n  height,\n  canSelect,\n  searchState,\n  searchStateManager: stateManager,\n}: SearchViewProps) {\n  const dispatch = useDispatch();\n  const selectedItems = useSelector((wholeState) => wholeState.browseDashboards.selectedItems);\n  const hasSelection = useHasSelection();\n\n  const { keyboardEvents } = useKeyNavigationListener();\n\n  const value = searchState.result ?? initialLoadingView;\n\n  const selectionChecker = useCallback(\n    (kind: string | undefined, uid: string): boolean => {\n      if (!kind) {\n        return false;\n      }\n\n      // Currently, this indicates _some_ items are selected, not nessicarily all are\n      // selected.\n      if (kind === '*' && uid === '*') {\n        return hasSelection;\n      } else if (kind === '*') {\n        // Unsure how this case can happen\n        return false;\n      }\n\n      return selectedItems[assertDashboardViewItemKind(kind)][uid] ?? false;\n    },\n    [selectedItems, hasSelection]\n  );\n\n  const clearSelection = useCallback(() => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n  }, [dispatch]);\n\n  const handleItemSelectionChange = useCallback(\n    (kind: string, uid: string) => {\n      const newIsSelected = !selectionChecker(kind, uid);\n\n      dispatch(\n        setItemSelectionState({ item: { kind: assertDashboardViewItemKind(kind), uid }, isSelected: newIsSelected })\n      );\n    },\n    [selectionChecker, dispatch]\n  );\n\n  if (value.totalRows === 0) {\n    return (\n      <div style={{ width }}>\n        <EmptyState\n          button={\n            <Button variant=\"secondary\" onClick={stateManager.onClearSearchAndFilters}>\n              <Trans i18nKey=\"browse-dashboards.no-results.clear\">Clear search and filters</Trans>\n            </Button>\n          }\n          message={t('browse-dashboards.no-results.text', 'No results found for your query')}\n          variant=\"not-found\"\n          role=\"alert\"\n        />\n      </div>\n    );\n  }\n\n  const props: SearchResultsProps = {\n    response: value,\n    selection: canSelect ? selectionChecker : undefined,\n    selectionToggle: canSelect ? handleItemSelectionChange : undefined,\n    clearSelection,\n    width: width,\n    height: height,\n    onTagSelected: stateManager.onAddTag,\n    keyboardEvents,\n    onDatasourceChange: searchState.datasource ? stateManager.onDatasourceChange : undefined,\n    onClickItem: stateManager.onSearchItemClicked,\n  };\n\n  return <SearchResultsTable {...props} />;\n}\n\nfunction assertDashboardViewItemKind(kind: string): DashboardViewItemKind {\n  switch (kind) {\n    case 'folder':\n      return 'folder';\n    case 'dashboard':\n      return 'dashboard';\n    case 'panel':\n      return 'panel';\n  }\n\n  throw new Error('Unsupported kind' + kind);\n}\n","import { config } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, FolderDTO } from 'app/types';\n\nfunction checkFolderPermission(action: AccessControlAction, folderDTO?: FolderDTO) {\n  return folderDTO ? contextSrv.hasPermissionInMetadata(action, folderDTO) : contextSrv.hasPermission(action);\n}\n\nexport function getFolderPermissions(folderDTO?: FolderDTO) {\n  // Can only create a folder if we have permissions and either we're at root or nestedFolders is enabled\n  const canCreateDashboards = checkFolderPermission(AccessControlAction.DashboardsCreate, folderDTO);\n  const canCreateFolders = Boolean(\n    (!folderDTO || config.featureToggles.nestedFolders) && checkFolderPermission(AccessControlAction.FoldersCreate)\n  );\n  const canDeleteFolders = checkFolderPermission(AccessControlAction.FoldersDelete, folderDTO);\n  const canEditDashboards = checkFolderPermission(AccessControlAction.DashboardsWrite, folderDTO);\n  const canEditFolders = checkFolderPermission(AccessControlAction.FoldersWrite, folderDTO);\n  const canSetPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsWrite, folderDTO);\n  const canViewPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsRead, folderDTO);\n\n  return {\n    canCreateDashboards,\n    canCreateFolders,\n    canDeleteFolders,\n    canEditDashboards,\n    canEditFolders,\n    canSetPermissions,\n    canViewPermissions,\n  };\n}\n","import { initialState, SearchStateManager } from '../../search/state/SearchStateManager';\n\nlet recentlyDeletedStateManager: SearchStateManager;\nfunction getRecentlyDeletedStateManager() {\n  if (!recentlyDeletedStateManager) {\n    recentlyDeletedStateManager = new SearchStateManager({ ...initialState, includePanels: false, deleted: true });\n  }\n\n  return recentlyDeletedStateManager;\n}\n\nexport function useRecentlyDeletedStateManager() {\n  const stateManager = getRecentlyDeletedStateManager();\n  const state = stateManager.useState();\n\n  return [state, stateManager] as const;\n}\n","import React, { memo, useEffect } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { FilterInput } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { t } from 'app/core/internationalization';\nimport { ActionRow } from 'app/features/search/page/components/ActionRow';\nimport { getGrafanaSearcher } from 'app/features/search/service';\n\nimport { useDispatch } from '../../types';\nimport { SearchView } from '../browse-dashboards/components/SearchView';\nimport { getFolderPermissions } from '../browse-dashboards/permissions';\nimport { setAllSelection } from '../browse-dashboards/state';\n\nimport { useRecentlyDeletedStateManager } from './utils/useRecentlyDeletedStateManager';\n\nconst RecentlyDeletedPage = memo(() => {\n  const dispatch = useDispatch();\n\n  const [searchState, stateManager] = useRecentlyDeletedStateManager();\n\n  const { canEditFolders, canEditDashboards } = getFolderPermissions();\n  const canSelect = canEditFolders || canEditDashboards;\n\n  useEffect(() => {\n    stateManager.initStateFromUrl(undefined);\n\n    // Clear selected state when folderUID changes\n    dispatch(\n      setAllSelection({\n        isSelected: false,\n        folderUID: undefined,\n      })\n    );\n  }, [dispatch, stateManager]);\n\n  return (\n    <Page navId=\"dashboards/recentlyDeleted\">\n      <Page.Contents>\n        <FilterInput\n          placeholder={t('recentlyDeleted.filter.placeholder', 'Search for dashboards')}\n          value={searchState.query}\n          escapeRegex={false}\n          onChange={(e) => stateManager.onQueryChange(e)}\n        />\n        <ActionRow\n          showStarredFilter={false}\n          state={searchState}\n          getTagOptions={stateManager.getTagOptions}\n          getSortOptions={getGrafanaSearcher().getSortOptions}\n          sortPlaceholder={getGrafanaSearcher().sortPlaceholder}\n          includePanels={false}\n          onLayoutChange={stateManager.onLayoutChange}\n          onSortChange={stateManager.onSortChange}\n          onTagFilterChange={stateManager.onTagFilterChange}\n          onDatasourceChange={stateManager.onDatasourceChange}\n          onPanelTypeChange={stateManager.onPanelTypeChange}\n          onSetIncludePanels={stateManager.onSetIncludePanels}\n        />\n        <AutoSizer>\n          {({ width, height }) => (\n            <SearchView\n              canSelect={canSelect}\n              width={width}\n              height={height}\n              searchStateManager={stateManager}\n              searchState={searchState}\n            />\n          )}\n        </AutoSizer>\n      </Page.Contents>\n    </Page>\n  );\n});\n\nRecentlyDeletedPage.displayName = 'RecentlyDeletedPage';\nexport default RecentlyDeletedPage;\n","import { css } from '@emotion/css';\nimport React, { FormEvent } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Checkbox, Stack, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { SortPicker } from 'app/core/components/Select/SortPicker';\nimport { TagFilter, TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { SearchLayout, SearchState } from '../../types';\n\nfunction getLayoutOptions() {\n  return [\n    {\n      value: SearchLayout.Folders,\n      icon: 'folder',\n      description: t('search.actions.view-as-folders', 'View by folders'),\n    },\n    { value: SearchLayout.List, icon: 'list-ul', description: t('search.actions.view-as-list', 'View as list') },\n  ];\n}\n\ninterface Props {\n  onLayoutChange: (layout: SearchLayout) => void;\n  onSortChange: (value?: string) => void;\n  onStarredFilterChange?: (event: FormEvent<HTMLInputElement>) => void;\n  onTagFilterChange: (tags: string[]) => void;\n  getTagOptions: () => Promise<TermCount[]>;\n  getSortOptions: () => Promise<SelectableValue[]>;\n  sortPlaceholder?: string;\n  onDatasourceChange: (ds?: string) => void;\n  onPanelTypeChange: (pt?: string) => void;\n  includePanels: boolean;\n  onSetIncludePanels: (v: boolean) => void;\n  state: SearchState;\n  showStarredFilter?: boolean;\n  hideLayout?: boolean;\n}\n\nexport function getValidQueryLayout(q: SearchState): SearchLayout {\n  const layout = q.layout ?? SearchLayout.Folders;\n\n  // Folders is not valid when a query exists\n  if (layout === SearchLayout.Folders) {\n    if (q.query || q.sort || q.starred || q.tag.length > 0) {\n      return SearchLayout.List;\n    }\n  }\n\n  return layout;\n}\n\nexport const ActionRow = ({\n  onLayoutChange,\n  onSortChange,\n  onStarredFilterChange = () => {},\n  onTagFilterChange,\n  getTagOptions,\n  getSortOptions,\n  sortPlaceholder,\n  onDatasourceChange,\n  onPanelTypeChange,\n  onSetIncludePanels,\n  state,\n  showStarredFilter,\n  hideLayout,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const layout = getValidQueryLayout(state);\n\n  // Disabled folder layout option when query is present\n  const disabledOptions =\n    state.tag.length || state.starred || state.query || state.datasource || state.panel_type\n      ? [SearchLayout.Folders]\n      : [];\n\n  return (\n    <div className={styles.actionRow}>\n      <Stack gap={2} alignItems=\"center\">\n        <TagFilter isClearable={false} tags={state.tag} tagOptions={getTagOptions} onChange={onTagFilterChange} />\n        {config.featureToggles.panelTitleSearch && (\n          <Checkbox\n            data-testid=\"include-panels\"\n            disabled={layout === SearchLayout.Folders}\n            value={state.includePanels}\n            onChange={() => onSetIncludePanels(!state.includePanels)}\n            label={t('search.actions.include-panels', 'Include panels')}\n          />\n        )}\n\n        {showStarredFilter && (\n          <div className={styles.checkboxWrapper}>\n            <Checkbox\n              label={t('search.actions.starred', 'Starred')}\n              onChange={onStarredFilterChange}\n              value={state.starred}\n            />\n          </div>\n        )}\n        {state.datasource && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onDatasourceChange(undefined)}>\n            <Trans i18nKey=\"search.actions.remove-datasource-filter\">\n              Datasource: {{ datasource: state.datasource }}\n            </Trans>\n          </Button>\n        )}\n        {state.panel_type && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onPanelTypeChange(undefined)}>\n            Panel: {state.panel_type}\n          </Button>\n        )}\n      </Stack>\n\n      <Stack gap={2}>\n        {!hideLayout && (\n          <RadioButtonGroup\n            options={getLayoutOptions()}\n            disabledOptions={disabledOptions}\n            onChange={onLayoutChange}\n            value={layout}\n          />\n        )}\n        <SortPicker\n          onChange={(change) => onSortChange(change?.value)}\n          value={state.sort}\n          getSortOptions={getSortOptions}\n          placeholder={sortPlaceholder || t('search.actions.sort-placeholder', 'Sort')}\n          isClearable\n        />\n      </Stack>\n    </div>\n  );\n};\n\nActionRow.displayName = 'ActionRow';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    actionRow: css`\n      display: none;\n\n      ${theme.breakpoints.up('md')} {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding-bottom: ${theme.spacing(2)};\n        width: 100%;\n      }\n    `,\n    checkboxWrapper: css`\n      label {\n        line-height: 1.2;\n      }\n    `,\n  };\n};\n","import { debounce } from 'lodash';\nimport { FormEvent } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport store from 'app/core/store';\n\nimport { SEARCH_PANELS_LOCAL_STORAGE_KEY, SEARCH_SELECTED_LAYOUT, SEARCH_SELECTED_SORT } from '../constants';\nimport {\n  reportDashboardListViewed,\n  reportSearchFailedQueryInteraction,\n  reportSearchQueryInteraction,\n  reportSearchResultInteraction,\n} from '../page/reporting';\nimport { getGrafanaSearcher, SearchQuery } from '../service';\nimport { SearchLayout, SearchQueryParams, SearchState } from '../types';\nimport { parseRouteParams } from '../utils';\n\nexport const initialState: SearchState = {\n  query: '',\n  tag: [],\n  starred: false,\n  layout: SearchLayout.Folders,\n  sort: undefined,\n  prevSort: undefined,\n  eventTrackingNamespace: 'dashboard_search',\n  deleted: false,\n};\n\nexport const defaultQueryParams: SearchQueryParams = {\n  sort: null,\n  starred: null,\n  query: null,\n  tag: null,\n  layout: null,\n};\n\nconst getLocalStorageLayout = () => {\n  const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT);\n  if (selectedLayout === SearchLayout.List) {\n    return SearchLayout.List;\n  } else {\n    return SearchLayout.Folders;\n  }\n};\nexport class SearchStateManager extends StateManagerBase<SearchState> {\n  updateLocation = debounce((query) => locationService.partial(query, true), 300);\n  doSearchWithDebounce = debounce(() => this.doSearch(), 300);\n  lastQuery?: SearchQuery;\n\n  lastSearchTimestamp = 0;\n\n  initStateFromUrl(folderUid?: string, doInitialSearch = true) {\n    const stateFromUrl = parseRouteParams(locationService.getSearchObject());\n\n    // Force list view when conditions are specified from the URL\n    if (stateFromUrl.query || stateFromUrl.datasource || stateFromUrl.panel_type) {\n      stateFromUrl.layout = SearchLayout.List;\n    }\n\n    const layout = getLocalStorageLayout();\n    const prevSort = localStorage.getItem(SEARCH_SELECTED_SORT) ?? undefined;\n    const sort = layout === SearchLayout.List ? stateFromUrl.sort || prevSort : null;\n\n    this.setState({\n      ...initialState,\n      ...stateFromUrl,\n      layout,\n      sort: sort ?? initialState.sort,\n      prevSort,\n      folderUid: folderUid,\n      eventTrackingNamespace: folderUid ? 'manage_dashboards' : 'dashboard_search',\n      deleted: this.state.deleted,\n    });\n\n    if (doInitialSearch && this.hasSearchFilters()) {\n      this.doSearch();\n    }\n  }\n\n  /**\n   * Updates internal and url state, then triggers a new search\n   */\n  setStateAndDoSearch(state: Partial<SearchState>) {\n    const sort = state.sort || this.state.sort || localStorage.getItem(SEARCH_SELECTED_SORT) || undefined;\n\n    // Set internal state\n    this.setState({ sort, ...state });\n\n    // Update url state\n    this.updateLocation({\n      query: this.state.query.length === 0 ? null : this.state.query,\n      tag: this.state.tag,\n      datasource: this.state.datasource,\n      panel_type: this.state.panel_type,\n      starred: this.state.starred ? this.state.starred : null,\n      sort: this.state.sort,\n    });\n\n    // Prevent searching when user is only clearing the input.\n    // We don't show these results anyway\n    if (this.hasSearchFilters()) {\n      this.doSearchWithDebounce();\n    }\n  }\n\n  onCloseSearch = () => {\n    this.updateLocation({\n      search: null,\n      folder: null,\n      ...defaultQueryParams,\n    });\n  };\n\n  onClearSearchAndFilters = () => {\n    this.setStateAndDoSearch({\n      query: '',\n      datasource: undefined,\n      tag: [],\n      panel_type: undefined,\n      starred: undefined,\n      sort: undefined,\n    });\n  };\n\n  onQueryChange = (query: string) => {\n    this.setStateAndDoSearch({ query });\n  };\n\n  onRemoveTag = (tagToRemove: string) => {\n    this.setStateAndDoSearch({ tag: this.state.tag.filter((tag) => tag !== tagToRemove) });\n  };\n\n  onTagFilterChange = (tags: string[]) => {\n    this.setStateAndDoSearch({ tag: tags });\n  };\n\n  onAddTag = (newTag: string) => {\n    if (this.state.tag && this.state.tag.includes(newTag)) {\n      return;\n    }\n\n    this.setStateAndDoSearch({ tag: [...this.state.tag, newTag] });\n  };\n\n  onDatasourceChange = (datasource: string | undefined) => {\n    this.setStateAndDoSearch({ datasource });\n  };\n\n  onPanelTypeChange = (panel_type?: string) => {\n    this.setStateAndDoSearch({ panel_type });\n  };\n\n  onStarredFilterChange = (e: FormEvent<HTMLInputElement>) => {\n    const starred = e.currentTarget.checked;\n    this.setStateAndDoSearch({ starred });\n  };\n\n  onClearStarred = () => {\n    this.setStateAndDoSearch({ starred: false });\n  };\n\n  onSortChange = (sort: string | undefined) => {\n    if (sort) {\n      localStorage.setItem(SEARCH_SELECTED_SORT, sort);\n    } else {\n      localStorage.removeItem(SEARCH_SELECTED_SORT);\n    }\n\n    if (this.state.layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ sort, layout: SearchLayout.List });\n    } else {\n      this.setStateAndDoSearch({ sort });\n    }\n  };\n\n  onLayoutChange = (layout: SearchLayout) => {\n    localStorage.setItem(SEARCH_SELECTED_LAYOUT, layout);\n\n    if (this.state.sort && layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ layout, prevSort: this.state.sort, sort: undefined });\n    } else {\n      this.setStateAndDoSearch({ layout, sort: this.state.prevSort });\n    }\n  };\n\n  onSetIncludePanels = (includePanels: boolean) => {\n    this.setStateAndDoSearch({ includePanels });\n    store.set(SEARCH_PANELS_LOCAL_STORAGE_KEY, includePanels);\n  };\n\n  hasSearchFilters() {\n    return (\n      this.state.query ||\n      this.state.tag.length ||\n      this.state.starred ||\n      this.state.panel_type ||\n      this.state.sort ||\n      this.state.deleted ||\n      this.state.layout === SearchLayout.List\n    );\n  }\n\n  getSearchQuery() {\n    const q: SearchQuery = {\n      query: this.state.query,\n      tags: this.state.tag,\n      ds_uid: this.state.datasource,\n      panel_type: this.state.panel_type,\n      location: this.state.folderUid, // This will scope all results to the prefix\n      sort: this.state.sort,\n      explain: this.state.explain,\n      withAllowedActions: this.state.explain, // allowedActions are currently not used for anything on the UI and added only in `explain` mode\n      starred: this.state.starred,\n      deleted: this.state.deleted,\n    };\n\n    // Only dashboards have additional properties\n    if (q.sort?.length && !q.sort.includes('name')) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (!q.query?.length) {\n      q.query = '*';\n      if (!q.location) {\n        q.kind = ['dashboard', 'folder']; // skip panels\n      }\n    }\n\n    if (!this.state.includePanels && !q.kind) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (q.panel_type?.length) {\n      q.kind = ['panel'];\n    }\n\n    return q;\n  }\n\n  private doSearch() {\n    const trackingInfo = {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n      deleted: this.state.deleted,\n    };\n\n    reportSearchQueryInteraction(this.state.eventTrackingNamespace, trackingInfo);\n\n    this.lastQuery = this.getSearchQuery();\n\n    this.setState({ loading: true });\n\n    const searcher = getGrafanaSearcher();\n\n    const searchTimestamp = Date.now();\n    const searchPromise = this.state.starred ? searcher.starred(this.lastQuery) : searcher.search(this.lastQuery);\n\n    searchPromise\n      .then((result) => {\n        // Only keep the results if it's was issued after the most recently resolved search.\n        // This prevents results showing out of order if first request is slower than later ones\n        if (searchTimestamp > this.lastSearchTimestamp) {\n          this.setState({ result, loading: false });\n          this.lastSearchTimestamp = searchTimestamp;\n        }\n      })\n      .catch((error) => {\n        reportSearchFailedQueryInteraction(this.state.eventTrackingNamespace, {\n          ...trackingInfo,\n          error: error?.message,\n        });\n        this.setState({ loading: false });\n      });\n  }\n\n  // This gets the possible tags from within the query results\n  getTagOptions = (): Promise<TermCount[]> => {\n    const query = this.lastQuery ?? {\n      kind: ['dashboard', 'folder'],\n      query: '*',\n    };\n    return getGrafanaSearcher().tags(query);\n  };\n\n  /**\n   * When item is selected clear some filters and report interaction\n   */\n  onSearchItemClicked = (e: React.MouseEvent<HTMLElement>) => {\n    reportSearchResultInteraction(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n      deleted: this.state.deleted,\n    });\n  };\n\n  /**\n   * Caller should handle debounce\n   */\n  onReportSearchUsage = () => {\n    reportDashboardListViewed(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n      deleted: this.state.deleted,\n    });\n  };\n}\n\nlet stateManager: SearchStateManager;\n\nexport function getSearchStateManager() {\n  if (!stateManager) {\n    const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT) as SearchLayout;\n    const layout = selectedLayout ?? initialState.layout;\n\n    let includePanels = store.getBool(SEARCH_PANELS_LOCAL_STORAGE_KEY, true);\n    if (includePanels) {\n      includePanels = false;\n    }\n\n    stateManager = new SearchStateManager({ ...initialState, layout, includePanels });\n  }\n\n  return stateManager;\n}\n\nexport function useSearchStateManager() {\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n\n  return [state, stateManager] as const;\n}\n"],"names":["NUM_PLACEHOLDER_ROWS","initialLoadingView","SearchView","width","height","canSelect","searchState","stateManager","dispatch","selectedItems","wholeState","hasSelection","keyboardEvents","value","selectionChecker","kind","uid","assertDashboardViewItemKind","clearSelection","handleItemSelectionChange","newIsSelected","props","checkFolderPermission","action","folderDTO","getFolderPermissions","canCreateDashboards","canCreateFolders","canDeleteFolders","canEditDashboards","canEditFolders","canSetPermissions","canViewPermissions","recentlyDeletedStateManager","getRecentlyDeletedStateManager","SearchStateManager","useRecentlyDeletedStateManager","RecentlyDeletedPage","Page","FilterInput","e","ActionRow","getLayoutOptions","getValidQueryLayout","q","layout","onLayoutChange","onSortChange","onStarredFilterChange","onTagFilterChange","getTagOptions","getSortOptions","sortPlaceholder","onDatasourceChange","onPanelTypeChange","onSetIncludePanels","state","showStarredFilter","hideLayout","styles","getStyles","disabledOptions","change","theme","initialState","defaultQueryParams","getLocalStorageLayout","query","tagToRemove","tag","tags","newTag","datasource","panel_type","starred","sort","includePanels","folderUid","doInitialSearch","stateFromUrl","prevSort","trackingInfo","searcher","searchTimestamp","result","error","getSearchStateManager","useSearchStateManager"],"sourceRoot":""}