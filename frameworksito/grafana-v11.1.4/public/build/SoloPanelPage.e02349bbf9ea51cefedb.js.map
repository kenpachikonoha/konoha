{"version":3,"file":"SoloPanelPage.e02349bbf9ea51cefedb.js","mappings":"oTAUO,SAASA,EAAaC,EAA2BC,EAA6D,CACnH,KAAM,CAACC,EAAOC,CAAQ,KAAI,YAAmB,EACvC,CAACC,EAAOC,CAAQ,KAAI,YAA6B,EAEvD,sBAAU,IAAM,IACd,MAAkB,EAAE,SAASL,CAAS,EAEtC,MAAMM,EAAUN,EAAU,SAAS,EAEnC,IAAIE,EAAyB,KAC7B,GAAI,CACFA,KAAQ,MAAkBF,EAAWC,CAAO,CAC9C,MAAY,CAEZ,CAEA,OAAIC,GACFK,EAAgBL,CAAK,EACrBC,EAASD,CAAK,MACL,MAAaD,CAAO,EAC7BO,EAAgBR,EAAWC,CAAO,EAAE,KAAMC,GAAU,CAC9CA,EACFC,EAASD,CAAK,EAEdG,EAAS,iBAAiB,CAE9B,CAAC,EAEDA,EAAS,iBAAiB,EAGrBC,CACT,EAAG,CAACN,EAAWC,CAAO,CAAC,EAEhB,CAACC,EAAOE,CAAK,CACtB,CAEA,SAASG,EAAgBL,EAAiB,CACxC,IAAIO,EAASP,EAAM,OAEnB,KAAOO,GAAU,CAACA,EAAO,UACvBA,EAAO,SAAS,EAChBA,EAASA,EAAO,MAEpB,CAEA,SAASD,EAAgBR,EAA2BC,EAAgD,CAClG,OAAO,IAAI,QAASS,GAAY,CAC9BV,EAAU,iBAAiB,IAAgC,IAAM,CAC/D,MAAME,KAAQ,MAAkBF,EAAWC,CAAO,EAC9CC,EACFQ,EAAQR,CAAK,EAGbS,EAAqBX,EAAU,MAAM,IAAI,CAE7C,CAAC,EAEDW,EAAqBX,EAAU,MAAM,IAAI,CAC3C,CAAC,CACH,CAEA,SAASW,EAAqBC,EAAqB,CACjDA,EAAO,aAAcC,GAAU,CAC7B,GAAIA,aAAiBC,EAAA,GAAqB,CAACD,EAAM,SAAU,CACzDA,EAAM,SAAS,EACf,MACF,CAEA,GAAIA,aAAiB,MAAgBA,EAAM,MAAM,WAAY,CAC3D,UAAWE,KAAYF,EAAM,MAAM,WACjC,GAAIE,aAAoBC,EAAA,GAAuB,CAACH,EAAM,SAAU,CAC9DA,EAAM,SAAS,EACf,KACF,CAIFF,EAAqBE,CAAK,CAC5B,CACF,CAAC,CACH,CCvEO,SAASI,EAAc,CAAE,MAAAC,EAAO,YAAAC,CAAY,EAAU,CAC3D,MAAMC,KAAe,MAAkC,EACjD,CAAE,UAAApB,CAAU,EAAIoB,EAAa,SAAS,EAO5C,SALA,aAAU,KACRA,EAAa,cAAc,CAAE,IAAKF,EAAM,OAAO,IAAM,MAAO,kBAAgB,QAAS,CAAC,EAC/E,IAAME,EAAa,WAAW,GACpC,CAACA,EAAcF,EAAOC,CAAW,CAAC,EAEhCA,EAAY,QAIZnB,EAIE,gBAACqB,EAAA,CAAkB,UAAArB,EAAsB,QAASmB,EAAY,QAAS,EAHrE,gBAACG,EAAA,EAAU,IAAC,EAJZ,gBAACC,EAAA,EAAc,CAAC,OAAO,OAAQ,EAQ1C,CAEA,QAAeN,EAER,SAASI,EAAkB,CAAE,UAAArB,EAAW,QAAAC,CAAQ,EAAmD,CACxG,KAAM,CAACC,EAAOE,CAAK,EAAIL,EAAaC,EAAWC,CAAO,EAEtD,OAAIG,EACK,gBAACoB,EAAA,EAAK,CAAC,MAAOpB,CAAA,CAAO,EAGzBF,EASH,gBAAC,OAAI,UAAU,cACb,gBAACA,EAAM,UAAN,CAAgB,MAAOA,CAAA,CAAO,CACjC,EATE,gBAAC,YAAK,WACI,gBAACuB,EAAA,EAAO,IAAC,CACnB,CASN,C","sources":["webpack://grafana/./public/app/features/dashboard-scene/solo/useSoloPanel.ts","webpack://grafana/./public/app/features/dashboard-scene/solo/SoloPanelPage.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { VizPanel, SceneObject, SceneGridRow, getUrlSyncManager } from '@grafana/scenes';\n\nimport { DashboardGridItem } from '../scene/DashboardGridItem';\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { RowRepeaterBehavior } from '../scene/RowRepeaterBehavior';\nimport { DashboardRepeatsProcessedEvent } from '../scene/types';\nimport { findVizPanelByKey, isPanelClone } from '../utils/utils';\n\nexport function useSoloPanel(dashboard: DashboardScene, panelId: string): [VizPanel | undefined, string | undefined] {\n  const [panel, setPanel] = useState<VizPanel>();\n  const [error, setError] = useState<string | undefined>();\n\n  useEffect(() => {\n    getUrlSyncManager().initSync(dashboard);\n\n    const cleanUp = dashboard.activate();\n\n    let panel: VizPanel | null = null;\n    try {\n      panel = findVizPanelByKey(dashboard, panelId);\n    } catch (e) {\n      // do nothing, just the panel is not found or not a VizPanel\n    }\n\n    if (panel) {\n      activateParents(panel);\n      setPanel(panel);\n    } else if (isPanelClone(panelId)) {\n      findRepeatClone(dashboard, panelId).then((panel) => {\n        if (panel) {\n          setPanel(panel);\n        } else {\n          setError('Panel not found');\n        }\n      });\n    } else {\n      setError('Panel not found');\n    }\n\n    return cleanUp;\n  }, [dashboard, panelId]);\n\n  return [panel, error];\n}\n\nfunction activateParents(panel: VizPanel) {\n  let parent = panel.parent;\n\n  while (parent && !parent.isActive) {\n    parent.activate();\n    parent = parent.parent;\n  }\n}\n\nfunction findRepeatClone(dashboard: DashboardScene, panelId: string): Promise<VizPanel | undefined> {\n  return new Promise((resolve) => {\n    dashboard.subscribeToEvent(DashboardRepeatsProcessedEvent, () => {\n      const panel = findVizPanelByKey(dashboard, panelId);\n      if (panel) {\n        resolve(panel);\n      } else {\n        // If rows are repeated they could add new panel repeaters that needs to be activated\n        activateAllRepeaters(dashboard.state.body);\n      }\n    });\n\n    activateAllRepeaters(dashboard.state.body);\n  });\n}\n\nfunction activateAllRepeaters(layout: SceneObject) {\n  layout.forEachChild((child) => {\n    if (child instanceof DashboardGridItem && !child.isActive) {\n      child.activate();\n      return;\n    }\n\n    if (child instanceof SceneGridRow && child.state.$behaviors) {\n      for (const behavior of child.state.$behaviors) {\n        if (behavior instanceof RowRepeaterBehavior && !child.isActive) {\n          child.activate();\n          break;\n        }\n      }\n\n      // Activate any panel DashboardGridItem inside the row\n      activateAllRepeaters(child);\n    }\n  });\n}\n","// Libraries\nimport React, { useEffect } from 'react';\n\nimport { Alert, Spinner } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardPageRouteParams } from 'app/features/dashboard/containers/types';\nimport { DashboardRoutes } from 'app/types';\n\nimport { getDashboardScenePageStateManager } from '../pages/DashboardScenePageStateManager';\nimport { DashboardScene } from '../scene/DashboardScene';\n\nimport { useSoloPanel } from './useSoloPanel';\n\nexport interface Props extends GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId: string }> {}\n\n/**\n * Used for iframe embedding and image rendering of single panels\n */\nexport function SoloPanelPage({ match, queryParams }: Props) {\n  const stateManager = getDashboardScenePageStateManager();\n  const { dashboard } = stateManager.useState();\n\n  useEffect(() => {\n    stateManager.loadDashboard({ uid: match.params.uid!, route: DashboardRoutes.Embedded });\n    return () => stateManager.clearState();\n  }, [stateManager, match, queryParams]);\n\n  if (!queryParams.panelId) {\n    return <EntityNotFound entity=\"Panel\" />;\n  }\n\n  if (!dashboard) {\n    return <PageLoader />;\n  }\n\n  return <SoloPanelRenderer dashboard={dashboard} panelId={queryParams.panelId} />;\n}\n\nexport default SoloPanelPage;\n\nexport function SoloPanelRenderer({ dashboard, panelId }: { dashboard: DashboardScene; panelId: string }) {\n  const [panel, error] = useSoloPanel(dashboard, panelId);\n\n  if (error) {\n    return <Alert title={error} />;\n  }\n\n  if (!panel) {\n    return (\n      <span>\n        Loading <Spinner />\n      </span>\n    );\n  }\n\n  return (\n    <div className=\"panel-solo\">\n      <panel.Component model={panel} />\n    </div>\n  );\n}\n"],"names":["useSoloPanel","dashboard","panelId","panel","setPanel","error","setError","cleanUp","activateParents","findRepeatClone","parent","resolve","activateAllRepeaters","layout","child","DashboardGridItem","behavior","RowRepeaterBehavior","SoloPanelPage","match","queryParams","stateManager","SoloPanelRenderer","PageLoader","EntityNotFound","Alert","Spinner"],"sourceRoot":""}