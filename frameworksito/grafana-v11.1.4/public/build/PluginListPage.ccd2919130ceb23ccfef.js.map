{"version":3,"file":"PluginListPage.ccd2919130ceb23ccfef.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDisabledBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/sharedStyles.ts","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginInstallBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginEnterpriseBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginUpdateAvailableBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginAngularBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDeprecatedBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItemBadges.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginLogo.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItem.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginList.tsx","webpack://grafana/./public/app/features/plugins/admin/components/SearchField.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/useHistory.tsx","webpack://grafana/./public/app/features/plugins/admin/pages/Browse.tsx"],"sourcesContent":["import React from 'react';\n\nimport { PluginErrorCode } from '@grafana/data';\nimport { Badge } from '@grafana/ui';\n\ntype Props = { error?: PluginErrorCode };\n\nexport function PluginDisabledBadge({ error }: Props): React.ReactElement {\n  const tooltip = errorCodeToTooltip(error);\n  return <Badge icon=\"exclamation-triangle\" text=\"Disabled\" color=\"red\" tooltip={tooltip} />;\n}\n\nfunction errorCodeToTooltip(error?: PluginErrorCode): string | undefined {\n  switch (error) {\n    case PluginErrorCode.modifiedSignature:\n      return 'Plugin disabled due to modified content';\n    case PluginErrorCode.invalidSignature:\n      return 'Plugin disabled due to invalid plugin signature';\n    case PluginErrorCode.missingSignature:\n      return 'Plugin disabled due to missing plugin signature';\n    case null:\n    case undefined:\n      return 'Plugin disabled';\n    default:\n      return `Plugin disabled due to unknown error${error ? `: ${error}` : ''}`;\n  }\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getBadgeColor = (theme: GrafanaTheme2) => css`\n  background: ${theme.colors.background.primary};\n  border-color: ${theme.colors.border.strong};\n  color: ${theme.colors.text.secondary};\n`;\n","import React from 'react';\n\nimport { Badge, useStyles2 } from '@grafana/ui';\n\nimport { getBadgeColor } from './sharedStyles';\n\nexport function PluginInstalledBadge(): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  return <Badge text=\"Installed\" color=\"orange\" className={customBadgeStyles} />;\n}\n","import React from 'react';\n\nimport { featureEnabled } from '@grafana/runtime';\nimport { Badge, PluginSignatureBadge, Stack, useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\nimport { getBadgeColor } from './sharedStyles';\n\ntype Props = { plugin: CatalogPlugin };\n\nexport function PluginEnterpriseBadge({ plugin }: Props): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n\n  if (featureEnabled('enterprise.plugins')) {\n    return <Badge text=\"Enterprise\" color=\"blue\" />;\n  }\n\n  return (\n    <Stack wrap={'wrap'}>\n      <PluginSignatureBadge status={plugin.signature} />\n      <Badge\n        icon=\"lock\"\n        role=\"img\"\n        aria-label=\"lock icon\"\n        text=\"Enterprise\"\n        color=\"blue\"\n        className={customBadgeStyles}\n        title=\"Requires a Grafana Enterprise license\"\n      />\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginUpdateAvailableBadge({ plugin }: Props): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  return <p className={styles.hasUpdate}>Update available!</p>;\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    hasUpdate: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      margin-bottom: 0;\n    `,\n  };\n};\n","import React from 'react';\n\nimport { Badge } from '@grafana/ui';\n\nexport function PluginAngularBadge(): React.ReactElement {\n  return (\n    <Badge\n      icon=\"exclamation-triangle\"\n      text=\"Angular\"\n      color=\"orange\"\n      tooltip=\"This plugin uses deprecated functionality, support for which is being removed.\"\n    />\n  );\n}\n","import React from 'react';\n\nimport { Badge } from '@grafana/ui';\n\nexport function PluginDeprecatedBadge(): React.ReactElement {\n  return (\n    <Badge\n      icon=\"exclamation-triangle\"\n      text=\"Deprecated\"\n      color=\"orange\"\n      tooltip=\"This plugin is deprecated and no longer receives updates.\"\n    />\n  );\n}\n","import React from 'react';\n\nimport { PluginType } from '@grafana/data';\nimport { HorizontalGroup, PluginSignatureBadge } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../types';\n\nimport {\n  PluginEnterpriseBadge,\n  PluginDisabledBadge,\n  PluginInstalledBadge,\n  PluginUpdateAvailableBadge,\n  PluginAngularBadge,\n  PluginDeprecatedBadge,\n} from './Badges';\n\ntype PluginBadgeType = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginListItemBadges({ plugin }: PluginBadgeType) {\n  // Currently renderer plugins are not supported by the catalog due to complications related to installation / update / uninstall.\n  const hasUpdate = plugin.hasUpdate && !plugin.isCore && plugin.type !== PluginType.renderer;\n  if (plugin.isEnterprise) {\n    return (\n      <HorizontalGroup height=\"auto\" wrap>\n        <PluginEnterpriseBadge plugin={plugin} />\n        {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n        {hasUpdate && <PluginUpdateAvailableBadge plugin={plugin} />}\n        {plugin.angularDetected && <PluginAngularBadge />}\n      </HorizontalGroup>\n    );\n  }\n\n  return (\n    <HorizontalGroup height=\"auto\" wrap>\n      <PluginSignatureBadge status={plugin.signature} />\n      {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n      {plugin.isDeprecated && <PluginDeprecatedBadge />}\n      {plugin.isInstalled && <PluginInstalledBadge />}\n      {hasUpdate && <PluginUpdateAvailableBadge plugin={plugin} />}\n      {plugin.angularDetected && <PluginAngularBadge />}\n    </HorizontalGroup>\n  );\n}\n","import React from 'react';\n\ntype PluginLogoProps = {\n  alt: string;\n  className?: string;\n  src: string;\n  height?: string | number;\n};\n\nexport function PluginLogo({ alt, className, src, height }: PluginLogoProps): React.ReactElement {\n  return <img src={src} className={className} alt={alt} loading=\"lazy\" height={height} />;\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport { Badge, Icon, Stack, useStyles2 } from '@grafana/ui';\nimport { SkeletonComponent, attachSkeleton } from '@grafana/ui/src/unstable';\n\nimport { CatalogPlugin, PluginIconName, PluginListDisplayMode } from '../types';\n\nimport { PluginListItemBadges } from './PluginListItemBadges';\nimport { PluginLogo } from './PluginLogo';\n\nexport const LOGO_SIZE = '48px';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  pathName: string;\n  displayMode?: PluginListDisplayMode;\n};\n\nfunction PluginListItemComponent({ plugin, pathName, displayMode = PluginListDisplayMode.Grid }: Props) {\n  const styles = useStyles2(getStyles);\n  const isList = displayMode === PluginListDisplayMode.List;\n\n  const reportUserClickInteraction = () => {\n    if (locationService.getSearchObject()?.q) {\n      reportInteraction('plugins_search_user_click', {});\n    }\n  };\n  return (\n    <a\n      href={`${pathName}/${plugin.id}`}\n      className={cx(styles.container, { [styles.list]: isList })}\n      onClick={reportUserClickInteraction}\n    >\n      <PluginLogo src={plugin.info.logos.small} className={styles.pluginLogo} height={LOGO_SIZE} alt=\"\" />\n      <h2 className={cx(styles.name, 'plugin-name')}>{plugin.name}</h2>\n      <div className={cx(styles.content, 'plugin-content')}>\n        <p>By {plugin.orgName}</p>\n        <PluginListItemBadges plugin={plugin} />\n      </div>\n      <div className={styles.pluginType}>\n        {plugin.type && <Icon name={PluginIconName[plugin.type]} title={`${plugin.type} plugin`} />}\n      </div>\n    </a>\n  );\n}\n\nconst PluginListItemSkeleton: SkeletonComponent<Pick<Props, 'displayMode'>> = ({\n  displayMode = PluginListDisplayMode.Grid,\n  rootProps,\n}) => {\n  const styles = useStyles2(getStyles);\n  const isList = displayMode === PluginListDisplayMode.List;\n\n  return (\n    <div className={cx(styles.container, { [styles.list]: isList })} {...rootProps}>\n      <Skeleton\n        containerClassName={cx(\n          styles.pluginLogo,\n          css({\n            lineHeight: 1,\n          })\n        )}\n        width={LOGO_SIZE}\n        height={LOGO_SIZE}\n      />\n      <h2 className={styles.name}>\n        <Skeleton width={100} />\n      </h2>\n      <div className={styles.content}>\n        <p>\n          <Skeleton width={120} />\n        </p>\n        <Stack direction=\"row\">\n          <Badge.Skeleton />\n          <Badge.Skeleton />\n        </Stack>\n      </div>\n      <div className={styles.pluginType}>\n        <Skeleton width={16} height={16} />\n      </div>\n    </div>\n  );\n};\n\nexport const PluginListItem = attachSkeleton(PluginListItemComponent, PluginListItemSkeleton);\n\n// Styles shared between the different type of list items\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'grid',\n      gridTemplateColumns: `${LOGO_SIZE} 1fr ${theme.spacing(3)}`,\n      gridTemplateRows: 'auto',\n      gap: theme.spacing(2),\n      gridAutoFlow: 'row',\n      background: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(3),\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {\n          duration: theme.transitions.duration.short,\n        }),\n      },\n\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.secondary, 0.03),\n      },\n    }),\n    list: css({\n      rowGap: 0,\n\n      '> img': {\n        alignSelf: 'start',\n      },\n\n      '> .plugin-content': {\n        minHeight: 0,\n        gridArea: '2 / 2 / 4 / 3',\n\n        '> p': {\n          margin: theme.spacing(0, 0, 0.5, 0),\n        },\n      },\n\n      '> .plugin-name': {\n        alignSelf: 'center',\n        gridArea: '1 / 2 / 2 / 3',\n      },\n    }),\n    pluginType: css({\n      gridArea: '1 / 3 / 2 / 4',\n      color: theme.colors.text.secondary,\n    }),\n    pluginLogo: css({\n      gridArea: '1 / 1 / 3 / 2',\n      maxWidth: '100%',\n      alignSelf: 'center',\n      objectFit: 'contain',\n    }),\n    content: css({\n      gridArea: '3 / 1 / 4 / 3',\n      color: theme.colors.text.secondary,\n    }),\n    name: css({\n      gridArea: '1 / 2 / 3 / 3',\n      alignSelf: 'center',\n      fontSize: theme.typography.h4.fontSize,\n      color: theme.colors.text.primary,\n      margin: 0,\n      wordBreak: 'normal',\n      overflowWrap: 'anywhere',\n    }),\n  };\n};\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { config } from '@grafana/runtime';\nimport { EmptyState, Grid } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\n\nimport { PluginListItem } from './PluginListItem';\n\ninterface Props {\n  plugins: CatalogPlugin[];\n  displayMode: PluginListDisplayMode;\n  isLoading?: boolean;\n}\n\nexport const PluginList = ({ plugins, displayMode, isLoading }: Props) => {\n  const isList = displayMode === PluginListDisplayMode.List;\n  const { pathname } = useLocation();\n  const pathName = config.appSubUrl + (pathname.endsWith('/') ? pathname.slice(0, -1) : pathname);\n\n  if (!isLoading && plugins.length === 0) {\n    return <EmptyState variant=\"not-found\" message={t('plugins.empty-state.message', 'No plugins found')} />;\n  }\n\n  return (\n    <Grid gap={3} {...(isList ? { columns: 1 } : { minColumnWidth: 34 })} data-testid=\"plugin-list\">\n      {isLoading\n        ? new Array(50).fill(null).map((_, index) => <PluginListItem.Skeleton key={index} displayMode={displayMode} />)\n        : plugins.map((plugin) => (\n            <PluginListItem key={plugin.id} plugin={plugin} pathName={pathName} displayMode={displayMode} />\n          ))}\n    </Grid>\n  );\n};\n","import React, { useState, useRef } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { FilterInput } from '@grafana/ui';\n\ninterface Props {\n  value?: string;\n  onSearch: (value: string) => void;\n}\n\n// useDebounce has a bug which causes it to fire on first render. This wrapper prevents that.\n// https://github.com/streamich/react-use/issues/759\nconst useDebounceWithoutFirstRender = (callBack: () => void, delay = 0, deps: React.DependencyList = []) => {\n  const isFirstRender = useRef(true);\n  const debounceDeps = [...deps, isFirstRender];\n\n  return useDebounce(\n    () => {\n      if (isFirstRender.current) {\n        isFirstRender.current = false;\n        return;\n      }\n      return callBack();\n    },\n    delay,\n    debounceDeps\n  );\n};\n\nexport const SearchField = ({ value, onSearch }: Props) => {\n  const [query, setQuery] = useState(value);\n\n  useDebounceWithoutFirstRender(() => onSearch(query ?? ''), 500, [query]);\n\n  return (\n    <FilterInput\n      value={query}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n          onSearch(e.currentTarget.value);\n        }\n      }}\n      placeholder=\"Search Grafana plugins\"\n      onChange={(value) => {\n        setQuery(value);\n      }}\n      width={46}\n    />\n  );\n};\n","import { locationService } from '@grafana/runtime';\n\nexport const useHistory = () => {\n  return {\n    push: ({ query }: { query: Parameters<typeof locationService.partial>[0] }) => {\n      locationService.partial(query);\n    },\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ReactElement } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { SelectableValue, GrafanaTheme2, PluginType } from '@grafana/data';\nimport { locationSearchToObject } from '@grafana/runtime';\nimport { Select, RadioButtonGroup, useStyles2, Tooltip, Field } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { ROUTES as CONNECTIONS_ROUTES } from 'app/features/connections/constants';\nimport { useSelector } from 'app/types';\n\nimport { HorizontalGroup } from '../components/HorizontalGroup';\nimport { PluginList } from '../components/PluginList';\nimport { SearchField } from '../components/SearchField';\nimport { Sorters } from '../helpers';\nimport { useHistory } from '../hooks/useHistory';\nimport { useGetAll, useIsRemotePluginsAvailable, useDisplayMode } from '../state/hooks';\nimport { PluginListDisplayMode } from '../types';\n\nexport default function Browse({ route }: GrafanaRouteComponentProps): ReactElement | null {\n  const location = useLocation();\n  const locationSearch = locationSearchToObject(location.search);\n  const navModel = useSelector((state) => getNavModel(state.navIndex, 'plugins'));\n  const { displayMode, setDisplayMode } = useDisplayMode();\n  const styles = useStyles2(getStyles);\n  const history = useHistory();\n  const remotePluginsAvailable = useIsRemotePluginsAvailable();\n  const keyword = locationSearch.q?.toString() || '';\n  const filterBy = locationSearch.filterBy?.toString() || 'all';\n  const filterByType = (locationSearch.filterByType as PluginType | 'all') || 'all';\n  const sortBy = (locationSearch.sortBy as Sorters) || Sorters.nameAsc;\n  const { isLoading, error, plugins } = useGetAll(\n    {\n      keyword,\n      type: filterByType !== 'all' ? filterByType : undefined,\n      isInstalled: filterBy === 'installed' ? true : undefined,\n    },\n    sortBy\n  );\n\n  const filterByOptions = [\n    { value: 'all', label: 'All' },\n    { value: 'installed', label: 'Installed' },\n  ];\n\n  const onSortByChange = (value: SelectableValue<string>) => {\n    history.push({ query: { sortBy: value.value } });\n  };\n\n  const onFilterByChange = (value: string) => {\n    history.push({ query: { filterBy: value } });\n  };\n\n  const onFilterByTypeChange = (value: SelectableValue<string>) => {\n    history.push({ query: { filterByType: value.value } });\n  };\n\n  const onSearch = (q: string) => {\n    history.push({ query: { filterBy, filterByType, q } });\n  };\n\n  // How should we handle errors?\n  if (error) {\n    console.error(error.message);\n    return null;\n  }\n\n  const subTitle = (\n    <div>\n      Extend the Grafana experience with panel plugins and apps. To find more data sources go to{' '}\n      <a className=\"external-link\" href={`${CONNECTIONS_ROUTES.AddNewConnection}?cat=data-source`}>\n        Connections\n      </a>\n      .\n    </div>\n  );\n\n  return (\n    <Page navModel={navModel} subTitle={subTitle}>\n      <Page.Contents>\n        <HorizontalGroup wrap>\n          <Field label=\"Search\">\n            <SearchField value={keyword} onSearch={onSearch} />\n          </Field>\n          <HorizontalGroup wrap className={styles.actionBar}>\n            {/* Filter by type */}\n            <Field label=\"Type\">\n              <Select\n                aria-label=\"Plugin type filter\"\n                value={filterByType}\n                onChange={onFilterByTypeChange}\n                width={18}\n                options={[\n                  { value: 'all', label: 'All' },\n                  { value: 'datasource', label: 'Data sources' },\n                  { value: 'panel', label: 'Panels' },\n                  { value: 'app', label: 'Applications' },\n                ]}\n              />\n            </Field>\n\n            {/* Filter by installed / all */}\n            {remotePluginsAvailable ? (\n              <Field label=\"State\">\n                <RadioButtonGroup value={filterBy} onChange={onFilterByChange} options={filterByOptions} />\n              </Field>\n            ) : (\n              <Tooltip\n                content=\"This filter has been disabled because the Grafana server cannot access grafana.com\"\n                placement=\"top\"\n              >\n                <div>\n                  <Field label=\"State\">\n                    <RadioButtonGroup\n                      disabled={true}\n                      value={filterBy}\n                      onChange={onFilterByChange}\n                      options={filterByOptions}\n                    />\n                  </Field>\n                </div>\n              </Tooltip>\n            )}\n\n            {/* Sorting */}\n            <Field label=\"Sort\">\n              <Select\n                aria-label=\"Sort Plugins List\"\n                width={24}\n                value={sortBy}\n                onChange={onSortByChange}\n                options={[\n                  { value: 'nameAsc', label: 'By name (A-Z)' },\n                  { value: 'nameDesc', label: 'By name (Z-A)' },\n                  { value: 'updated', label: 'By updated date' },\n                  { value: 'published', label: 'By published date' },\n                  { value: 'downloads', label: 'By downloads' },\n                ]}\n              />\n            </Field>\n\n            {/* Display mode */}\n            <Field label=\"View\">\n              <RadioButtonGroup<PluginListDisplayMode>\n                className={styles.displayAs}\n                value={displayMode}\n                onChange={setDisplayMode}\n                options={[\n                  {\n                    value: PluginListDisplayMode.Grid,\n                    icon: 'table',\n                    description: 'Display plugins in a grid layout',\n                  },\n                  { value: PluginListDisplayMode.List, icon: 'list-ul', description: 'Display plugins in list' },\n                ]}\n              />\n            </Field>\n          </HorizontalGroup>\n        </HorizontalGroup>\n        <div className={styles.listWrap}>\n          <PluginList plugins={plugins} displayMode={displayMode} isLoading={isLoading} />\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css({\n    [theme.breakpoints.up('xl')]: {\n      marginLeft: 'auto',\n    },\n  }),\n  listWrap: css({\n    marginTop: theme.spacing(2),\n  }),\n  displayAs: css({\n    svg: {\n      marginRight: 0,\n    },\n  }),\n});\n"],"names":["PluginDisabledBadge","error","tooltip","errorCodeToTooltip","Badge","getBadgeColor","theme","PluginInstalledBadge","customBadgeStyles","PluginEnterpriseBadge","plugin","Stack","PluginSignatureBadge","PluginUpdateAvailableBadge","styles","getStyles","PluginAngularBadge","PluginDeprecatedBadge","PluginListItemBadges","hasUpdate","PluginLogo","alt","className","src","height","LOGO_SIZE","PluginListItemComponent","pathName","displayMode","isList","reportUserClickInteraction","Icon","PluginListItemSkeleton","rootProps","PluginListItem","PluginList","plugins","isLoading","pathname","config","EmptyState","Grid","_","index","useDebounceWithoutFirstRender","callBack","delay","deps","isFirstRender","debounceDeps","useDebounce","SearchField","value","onSearch","query","setQuery","FilterInput","e","useHistory","Browse","route","location","locationSearch","navModel","state","setDisplayMode","history","remotePluginsAvailable","keyword","filterBy","filterByType","sortBy","filterByOptions","onSortByChange","onFilterByChange","onFilterByTypeChange","q","subTitle","Page","HorizontalGroup","Field","Select","RadioButtonGroup","Tooltip"],"sourceRoot":""}