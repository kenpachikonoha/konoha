{"version":3,"file":"6552.f070d0c9cf5eb40602a1.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/EvaluationGroupQuickPick.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleFolderPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/FolderAndGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaAlertStatePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PendingPeriodQuickPick.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaEvaluationBehavior.tsx","webpack://grafana/./public/app/features/alerting/unified/components/InvalidIntervalWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/EditRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts"],"sourcesContent":["import { last, times } from 'lodash';\nimport React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Button, Stack } from '@grafana/ui';\n\nimport { formatPrometheusDuration, parsePrometheusDuration, safeParsePrometheusDuration } from '../../utils/time';\n\nconst MIN_INTERVAl = config.unifiedAlerting.minInterval ?? '10s';\nexport const getEvaluationGroupOptions = (minInterval = MIN_INTERVAl) => {\n  const MIN_OPTIONS_TO_SHOW = 8;\n  const DEFAULT_INTERVAL_OPTIONS: number[] = [\n    parsePrometheusDuration('10s'),\n    parsePrometheusDuration('30s'),\n    parsePrometheusDuration('1m'),\n    parsePrometheusDuration('5m'),\n    parsePrometheusDuration('10m'),\n    parsePrometheusDuration('15m'),\n    parsePrometheusDuration('30m'),\n    parsePrometheusDuration('1h'),\n  ];\n\n  // 10s for OSS and 1m0s for Grafana Cloud\n  const minEvaluationIntervalMillis = safeParsePrometheusDuration(minInterval);\n\n  /**\n   * 1. make sure we always show at least 8 options to the user\n   * 2. find the default interval closest to the configured minInterval\n   * 3. if we have fewer than 8 options, we basically double the last interval until we have 8 options\n   */\n  const head = DEFAULT_INTERVAL_OPTIONS.filter((millis) => minEvaluationIntervalMillis <= millis);\n\n  const tail = times(MIN_OPTIONS_TO_SHOW - head.length, (index: number) => {\n    const lastInterval = last(head) ?? minEvaluationIntervalMillis;\n    const multiplier = head.length === 0 ? 1 : 2; // if the head is empty we start with the min interval and multiply it only once :)\n    return lastInterval * multiplier * (index + 1);\n  });\n\n  return [...head, ...tail].map(formatPrometheusDuration);\n};\n\nexport const QUICK_PICK_OPTIONS = getEvaluationGroupOptions(MIN_INTERVAl);\n\ninterface Props {\n  currentInterval: string;\n  onSelect: (interval: string) => void;\n}\n\n/**\n * Allow a quick selection of group evaluation intervals, based on the configured \"unifiedAlerting.minInterval\" value\n * ie. [1m, 2m, 5m, 10m, 15m] etc.\n */\nexport const EvaluationGroupQuickPick = ({ currentInterval, onSelect }: Props) => (\n  <Stack direction=\"row\" gap={0.5} role=\"listbox\">\n    {QUICK_PICK_OPTIONS.map((interval) => {\n      const isActive = currentInterval === interval;\n\n      return (\n        <Button\n          role=\"option\"\n          aria-selected={isActive}\n          key={interval}\n          variant={isActive ? 'primary' : 'secondary'}\n          size=\"sm\"\n          onClick={() => onSelect(interval)}\n        >\n          {interval}\n        </Button>\n      );\n    })}\n  </Stack>\n);\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Props as FolderPickerProps, OldFolderPicker } from 'app/core/components/Select/OldFolderPicker';\nimport { PermissionLevelString, SearchQueryType } from 'app/types';\n\nimport { CustomAdd, FolderWarning } from '../../../../../core/components/Select/OldFolderPicker';\n\nexport interface Folder {\n  title: string;\n  uid: string;\n}\n\nexport interface RuleFolderPickerProps extends Omit<FolderPickerProps, 'initialTitle' | 'initialFolderId'> {\n  value?: Folder;\n  invalid?: boolean;\n}\n\nconst SlashesWarning = () => {\n  const styles = useStyles2(getStyles);\n  const onClick = () => window.open('https://github.com/grafana/grafana/issues/42947', '_blank');\n  return (\n    <Stack gap={0.5}>\n      <div className={styles.slashNotAllowed}>Folders with &apos;/&apos; character are not allowed.</div>\n      <Tooltip placement=\"top\" content={'Link to the Github issue'} theme=\"info\">\n        <Icon name=\"info-circle\" size=\"xs\" className={styles.infoIcon} onClick={onClick} />\n      </Tooltip>\n    </Stack>\n  );\n};\n\nexport const containsSlashes = (str: string): boolean => str.indexOf('/') !== -1;\n\nexport function RuleFolderPicker(props: RuleFolderPickerProps) {\n  const { value } = props;\n  const warningCondition = (folderName: string) => containsSlashes(folderName);\n\n  const folderWarning: FolderWarning = {\n    warningCondition: warningCondition,\n    warningComponent: SlashesWarning,\n  };\n\n  const customAdd: CustomAdd = {\n    disallowValues: true,\n    isAllowedValue: (value) => !containsSlashes(value),\n  };\n\n  return (\n    <OldFolderPicker\n      showRoot={false}\n      rootName=\"\"\n      allowEmpty={true}\n      initialFolderUid={value?.uid}\n      searchQueryType={SearchQueryType.AlertFolder}\n      {...props}\n      permissionLevel={PermissionLevelString.Edit}\n      customAdd={customAdd}\n      folderWarning={folderWarning}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  slashNotAllowed: css({\n    color: theme.colors.warning.main,\n    fontSize: '12px',\n    marginBottom: '2px',\n  }),\n  infoIcon: css({\n    color: theme.colors.warning.main,\n    fontSize: '12px',\n    marginBottom: '2px',\n    cursor: 'pointer',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { debounce, take, uniqueId } from 'lodash';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { FormProvider, useForm, useFormContext, Controller } from 'react-hook-form';\n\nimport { AppEvents, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AsyncSelect, Box, Button, Field, Input, Label, Modal, Stack, Text, useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { createFolder } from 'app/features/manage-dashboards/state/actions';\nimport { AccessControlAction } from 'app/types';\nimport { RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { grafanaRulerConfig } from '../../hooks/useCombinedRule';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { DEFAULT_GROUP_EVALUATION_INTERVAL } from '../../utils/rule-form';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { evaluateEveryValidationOptions } from '../rules/EditRuleGroupModal';\n\nimport { EvaluationGroupQuickPick } from './EvaluationGroupQuickPick';\nimport { containsSlashes, Folder, RuleFolderPicker } from './RuleFolderPicker';\nimport { checkForPathSeparator } from './util';\n\nexport const MAX_GROUP_RESULTS = 1000;\n\nexport const useFolderGroupOptions = (folderUid: string, enableProvisionedGroups: boolean) => {\n  // fetch the ruler rules from the database so we can figure out what other \"groups\" are already defined\n  // for our folders\n  const { isLoading: isLoadingRulerNamespace, currentData: rulerNamespace } =\n    alertRuleApi.endpoints.rulerNamespace.useQuery(\n      {\n        namespace: folderUid,\n        rulerConfig: grafanaRulerConfig,\n      },\n      {\n        skip: !folderUid,\n        refetchOnMountOrArgChange: true,\n      }\n    );\n\n  // There should be only one entry in the rulerNamespace object\n  // However it uses folder name as key, so to avoid fetching folder name, we use Object.values\n  const groupOptions = useMemo(() => {\n    if (!rulerNamespace) {\n      // still waiting for namespace information to be fetched\n      return [];\n    }\n\n    const folderGroups = Object.values(rulerNamespace).flat() ?? [];\n\n    return folderGroups\n      .map<SelectableValue<string>>((group) => {\n        const isProvisioned = isProvisionedGroup(group);\n        return {\n          label: group.name,\n          value: group.name,\n          description: group.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL,\n          // we include provisioned folders, but disable the option to select them\n          isDisabled: !enableProvisionedGroups ? isProvisioned : false,\n          isProvisioned: isProvisioned,\n        };\n      })\n\n      .sort(sortByLabel);\n  }, [rulerNamespace, enableProvisionedGroups]);\n\n  return { groupOptions, loading: isLoadingRulerNamespace };\n};\n\nconst isProvisionedGroup = (group: RulerRuleGroupDTO) => {\n  return group.rules.some((rule) => isGrafanaRulerRule(rule) && Boolean(rule.grafana_alert.provenance) === true);\n};\n\nconst sortByLabel = (a: SelectableValue<string>, b: SelectableValue<string>) => {\n  return a.label?.localeCompare(b.label ?? '') || 0;\n};\n\nconst findGroupMatchingLabel = (group: SelectableValue<string>, query: string) => {\n  return group.label?.toLowerCase().includes(query.toLowerCase());\n};\n\nexport function FolderAndGroup({\n  groupfoldersForGrafana,\n  enableProvisionedGroups,\n}: {\n  groupfoldersForGrafana?: RulerRulesConfigDTO | null;\n  enableProvisionedGroups: boolean;\n}) {\n  const {\n    formState: { errors },\n    watch,\n    setValue,\n    control,\n  } = useFormContext<RuleFormValues>();\n\n  const styles = useStyles2(getStyles);\n\n  const folder = watch('folder');\n  const group = watch('group');\n\n  const { groupOptions, loading } = useFolderGroupOptions(folder?.uid ?? '', enableProvisionedGroups);\n\n  const [isCreatingFolder, setIsCreatingFolder] = useState(false);\n  const [isCreatingEvaluationGroup, setIsCreatingEvaluationGroup] = useState(false);\n\n  const onOpenFolderCreationModal = () => setIsCreatingFolder(true);\n  const onOpenEvaluationGroupCreationModal = () => setIsCreatingEvaluationGroup(true);\n\n  const handleFolderCreation = (folder: Folder) => {\n    resetGroup();\n    setValue('folder', folder);\n    setIsCreatingFolder(false);\n  };\n\n  const handleEvalGroupCreation = (groupName: string, evaluationInterval: string) => {\n    setValue('group', groupName);\n    setValue('evaluateEvery', evaluationInterval);\n    setIsCreatingEvaluationGroup(false);\n  };\n\n  const resetGroup = useCallback(() => {\n    setValue('group', '');\n  }, [setValue]);\n\n  const getOptions = useCallback(\n    async (query: string) => {\n      const results = query ? groupOptions.filter((group) => findGroupMatchingLabel(group, query)) : groupOptions;\n      return take(results, MAX_GROUP_RESULTS);\n    },\n    [groupOptions]\n  );\n\n  const debouncedSearch = useMemo(() => {\n    return debounce(getOptions, 300, { leading: true });\n  }, [getOptions]);\n\n  const defaultGroupValue = group ? { value: group, label: group } : undefined;\n\n  return (\n    <div className={styles.container}>\n      <Stack alignItems=\"center\">\n        {\n          <Field\n            label={\n              <Label htmlFor=\"folder\" description={'Select a folder to store your rule.'}>\n                Folder\n              </Label>\n            }\n            className={styles.formInput}\n            error={errors.folder?.message}\n            data-testid=\"folder-picker\"\n          >\n            <Stack direction=\"row\" alignItems=\"center\">\n              {(!isCreatingFolder && (\n                <>\n                  <Controller\n                    render={({ field: { ref, ...field } }) => (\n                      <div style={{ width: 420 }}>\n                        <RuleFolderPicker\n                          inputId=\"folder\"\n                          invalid={!!errors.folder?.message}\n                          {...field}\n                          enableReset={true}\n                          onChange={({ title, uid }) => {\n                            field.onChange({ title, uid });\n                            resetGroup();\n                          }}\n                        />\n                      </div>\n                    )}\n                    name=\"folder\"\n                    rules={{\n                      required: { value: true, message: 'Select a folder' },\n                      validate: {\n                        pathSeparator: (folder: Folder) => checkForPathSeparator(folder.uid),\n                      },\n                    }}\n                  />\n                  <Text color=\"secondary\">or</Text>\n                  <Button\n                    onClick={onOpenFolderCreationModal}\n                    type=\"button\"\n                    icon=\"plus\"\n                    fill=\"outline\"\n                    variant=\"secondary\"\n                    disabled={!contextSrv.hasPermission(AccessControlAction.FoldersCreate)}\n                    data-testid={selectors.components.AlertRules.newFolderButton}\n                  >\n                    New folder\n                  </Button>\n                </>\n              )) || <div>Creating new folder...</div>}\n            </Stack>\n          </Field>\n        }\n        {isCreatingFolder && (\n          <FolderCreationModal onCreate={handleFolderCreation} onClose={() => setIsCreatingFolder(false)} />\n        )}\n      </Stack>\n\n      {isCreatingFolder && (\n        <FolderCreationModal onCreate={handleFolderCreation} onClose={() => setIsCreatingFolder(false)} />\n      )}\n\n      <Stack alignItems=\"center\">\n        <div style={{ width: 420 }}>\n          <Field\n            label=\"Evaluation group and interval\"\n            data-testid=\"group-picker\"\n            description=\"Define how often the alert rule is evaluated.\"\n            className={styles.formInput}\n            error={errors.group?.message}\n            invalid={!!errors.group?.message}\n          >\n            <Controller\n              render={({ field: { ref, ...field }, fieldState }) => (\n                <AsyncSelect\n                  disabled={!folder || loading}\n                  inputId=\"group\"\n                  key={uniqueId()}\n                  {...field}\n                  onChange={(group) => {\n                    field.onChange(group.label ?? '');\n                  }}\n                  isLoading={loading}\n                  invalid={Boolean(folder) && !group && Boolean(fieldState.error)}\n                  loadOptions={debouncedSearch}\n                  cacheOptions\n                  loadingMessage={'Loading groups...'}\n                  defaultValue={defaultGroupValue}\n                  defaultOptions={groupOptions}\n                  getOptionLabel={(option: SelectableValue<string>) => (\n                    <div>\n                      <span>{option.label}</span>\n                      {option['isProvisioned'] && (\n                        <>\n                          {' '}\n                          <ProvisioningBadge />\n                        </>\n                      )}\n                    </div>\n                  )}\n                  placeholder={'Select an evaluation group...'}\n                />\n              )}\n              name=\"group\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Must enter a group name' },\n                validate: {\n                  pathSeparator: (group_: string) => checkForPathSeparator(group_),\n                },\n              }}\n            />\n          </Field>\n        </div>\n        <Box marginTop={4} gap={1} display={'flex'} alignItems={'center'}>\n          <Text color=\"secondary\">or</Text>\n          <Button\n            onClick={onOpenEvaluationGroupCreationModal}\n            type=\"button\"\n            icon=\"plus\"\n            fill=\"outline\"\n            variant=\"secondary\"\n            disabled={!folder}\n            data-testid={selectors.components.AlertRules.newEvaluationGroupButton}\n          >\n            New evaluation group\n          </Button>\n        </Box>\n        {isCreatingEvaluationGroup && (\n          <EvaluationGroupCreationModal\n            onCreate={handleEvalGroupCreation}\n            onClose={() => setIsCreatingEvaluationGroup(false)}\n            groupfoldersForGrafana={groupfoldersForGrafana}\n          />\n        )}\n      </Stack>\n    </div>\n  );\n}\n\nfunction FolderCreationModal({\n  onClose,\n  onCreate,\n}: {\n  onClose: () => void;\n  onCreate: (folder: Folder) => void;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n\n  const [title, setTitle] = useState('');\n  const onSubmit = async () => {\n    const newFolder = await createFolder({ title: title });\n    if (!newFolder.uid) {\n      appEvents.emit(AppEvents.alertError, ['Folder could not be created']);\n      return;\n    }\n\n    const folder: Folder = { title: newFolder.title, uid: newFolder.uid };\n    onCreate(folder);\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n  };\n\n  const error = containsSlashes(title);\n\n  return (\n    <Modal className={styles.modal} isOpen={true} title={'New folder'} onDismiss={onClose} onClickBackdrop={onClose}>\n      <div className={styles.modalTitle}>Create a new folder to store your rule</div>\n\n      <form onSubmit={onSubmit}>\n        <Field\n          label={<Label htmlFor=\"folder\">Folder name</Label>}\n          error={\"The folder name can't contain slashes\"}\n          invalid={error}\n        >\n          <Input\n            data-testid={selectors.components.AlertRules.newFolderNameField}\n            autoFocus={true}\n            id=\"folderName\"\n            placeholder=\"Enter a name\"\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            className={styles.formInput}\n          />\n        </Field>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" type=\"button\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={!title || error}\n            data-testid={selectors.components.AlertRules.newFolderNameCreateButton}\n          >\n            Create\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n}\n\nfunction EvaluationGroupCreationModal({\n  onClose,\n  onCreate,\n  groupfoldersForGrafana,\n}: {\n  onClose: () => void;\n  onCreate: (group: string, evaluationInterval: string) => void;\n  groupfoldersForGrafana?: RulerRulesConfigDTO | null;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n  const onSubmit = () => {\n    onCreate(getValues('group'), getValues('evaluateEvery'));\n  };\n\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const evaluateEveryId = 'eval-every-input';\n  const [groupName, folderName] = watch(['group', 'folder.title']);\n\n  const groupRules =\n    (groupfoldersForGrafana && groupfoldersForGrafana[folderName]?.find((g) => g.name === groupName)?.rules) ?? [];\n\n  const onCancel = () => {\n    onClose();\n  };\n\n  const formAPI = useForm({\n    defaultValues: { group: '', evaluateEvery: DEFAULT_GROUP_EVALUATION_INTERVAL },\n    mode: 'onChange',\n    shouldFocusError: true,\n  });\n\n  const { register, handleSubmit, formState, setValue, getValues, watch: watchGroupFormValues } = formAPI;\n  const evaluationInterval = watchGroupFormValues('evaluateEvery');\n\n  const setEvaluationInterval = (interval: string) => {\n    setValue('evaluateEvery', interval, { shouldValidate: true });\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={'New evaluation group'}\n      onDismiss={onCancel}\n      onClickBackdrop={onCancel}\n    >\n      <div className={styles.modalTitle}>Create a new evaluation group to use for this alert rule.</div>\n\n      <FormProvider {...formAPI}>\n        <form onSubmit={handleSubmit(() => onSubmit())}>\n          <Field\n            label={\n              <Label htmlFor={'group'} description=\"A group evaluates all its rules over the same evaluation interval.\">\n                Evaluation group\n              </Label>\n            }\n            error={formState.errors.group?.message}\n            invalid={Boolean(formState.errors.group)}\n          >\n            <Input\n              data-testid={selectors.components.AlertRules.newEvaluationGroupName}\n              className={styles.formInput}\n              autoFocus={true}\n              id={'group'}\n              placeholder=\"Enter a name\"\n              {...register('group', { required: { value: true, message: 'Required.' } })}\n            />\n          </Field>\n\n          <Field\n            error={formState.errors.evaluateEvery?.message}\n            invalid={Boolean(formState.errors.evaluateEvery) ? true : undefined}\n            label={\n              <Label htmlFor={evaluateEveryId} description=\"How often all rules in the group are evaluated.\">\n                Evaluation interval\n              </Label>\n            }\n          >\n            <Stack direction=\"column\">\n              <Input\n                data-testid={selectors.components.AlertRules.newEvaluationGroupInterval}\n                className={styles.formInput}\n                id={evaluateEveryId}\n                placeholder={DEFAULT_GROUP_EVALUATION_INTERVAL}\n                {...register('evaluateEvery', evaluateEveryValidationOptions(groupRules))}\n              />\n              <Stack direction=\"row\" alignItems=\"flex-end\">\n                <EvaluationGroupQuickPick currentInterval={evaluationInterval} onSelect={setEvaluationInterval} />\n              </Stack>\n            </Stack>\n          </Field>\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" type=\"button\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!formState.isValid}\n              data-testid={selectors.components.AlertRules.newEvaluationGroupCreate}\n            >\n              Create\n            </Button>\n          </Modal.ButtonRow>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'baseline',\n    maxWidth: `${theme.breakpoints.values.lg}px`,\n    justifyContent: 'space-between',\n  }),\n  formInput: css({\n    flexGrow: 1,\n  }),\n  modal: css({\n    width: `${theme.breakpoints.values.sm}px`,\n  }),\n  modalTitle: css({\n    color: theme.colors.text.secondary,\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { SelectBaseProps } from '@grafana/ui/src/components/Select/types';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\n\ntype Props = Omit<SelectBaseProps<GrafanaAlertStateDecision>, 'options'> & {\n  includeNoData: boolean;\n  includeError: boolean;\n};\n\nconst options: SelectableValue[] = [\n  { value: GrafanaAlertStateDecision.Alerting, label: 'Alerting' },\n  { value: GrafanaAlertStateDecision.NoData, label: 'No Data' },\n  { value: GrafanaAlertStateDecision.OK, label: 'Normal' },\n  { value: GrafanaAlertStateDecision.Error, label: 'Error' },\n  { value: GrafanaAlertStateDecision.KeepLast, label: 'Keep Last State' },\n];\n\nexport const GrafanaAlertStatePicker = ({ includeNoData, includeError, ...props }: Props) => {\n  const opts = useMemo(() => {\n    if (!includeNoData) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.NoData);\n    }\n    if (!includeError) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.Error);\n    }\n    return options;\n  }, [includeNoData, includeError]);\n  return <Select options={opts} {...props} />;\n};\n","import React from 'react';\n\nimport { Button, Stack } from '@grafana/ui';\n\nimport { formatPrometheusDuration, safeParsePrometheusDuration } from '../../utils/time';\n\ninterface Props {\n  selectedPendingPeriod: string;\n  groupEvaluationInterval: string;\n  onSelect: (interval: string) => void;\n}\n\nexport function getPendingPeriodQuickOptions(groupEvaluationInterval: string): string[] {\n  const groupEvaluationIntervalMillis = safeParsePrometheusDuration(groupEvaluationInterval);\n\n  // we generate the quick selection based on the group's evaluation interval\n  const options: number[] = [\n    0,\n    groupEvaluationIntervalMillis * 1,\n    groupEvaluationIntervalMillis * 2,\n    groupEvaluationIntervalMillis * 3,\n    groupEvaluationIntervalMillis * 4,\n    groupEvaluationIntervalMillis * 5,\n  ];\n\n  return options.map(formatPrometheusDuration);\n}\n\nexport function PendingPeriodQuickPick({ selectedPendingPeriod, groupEvaluationInterval, onSelect }: Props) {\n  const isQuickSelectionActive = (duration: string) => selectedPendingPeriod === duration;\n\n  const options = getPendingPeriodQuickOptions(groupEvaluationInterval);\n\n  return (\n    <Stack direction=\"row\" gap={0.5} role=\"listbox\">\n      {options.map((duration) => (\n        <Button\n          role=\"option\"\n          aria-selected={isQuickSelectionActive(duration)}\n          key={duration}\n          variant={isQuickSelectionActive(duration) ? 'primary' : 'secondary'}\n          size=\"sm\"\n          onClick={() => {\n            onSelect(duration);\n          }}\n        >\n          {duration === '0s' ? 'None' : duration}\n        </Button>\n      ))}\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Controller, RegisterOptions, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, Icon, IconButton, Input, Label, Stack, Switch, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { CombinedRuleGroup, CombinedRuleNamespace } from '../../../../../types/unified-alerting';\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { parsePrometheusDuration } from '../../utils/time';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { EditCloudGroupModal } from '../rules/EditRuleGroupModal';\n\nimport { FolderAndGroup, useFolderGroupOptions } from './FolderAndGroup';\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { PendingPeriodQuickPick } from './PendingPeriodQuickPick';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport const MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\n\nconst forValidationOptions = (evaluateEvery: string): RegisterOptions => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (value: string) => {\n    // parsePrometheusDuration does not allow 0 but does allow 0s\n    if (value === '0') {\n      return true;\n    }\n\n    try {\n      const millisFor = parsePrometheusDuration(value);\n\n      // 0 is a special value meaning for equals evaluation interval\n      if (millisFor === 0) {\n        return true;\n      }\n\n      try {\n        const millisEvery = parsePrometheusDuration(evaluateEvery);\n        return millisFor >= millisEvery\n          ? true\n          : t(\n              'alert-rule-form.evaluation-behaviour-for.validation',\n              'Pending period must be greater than or equal to the evaluation interval.'\n            );\n      } catch (err) {\n        // if we fail to parse \"every\", assume validation is successful, or the error messages\n        // will overlap in the UI\n        return true;\n      }\n    } catch (error) {\n      return error instanceof Error\n        ? error.message\n        : t('alert-rule-form.evaluation-behaviour-for.error-parsing', 'Failed to parse duration');\n    }\n  },\n});\n\nconst useIsNewGroup = (folder: string, group: string) => {\n  const { groupOptions } = useFolderGroupOptions(folder, false);\n\n  const groupIsInGroupOptions = useCallback(\n    (group_: string) => groupOptions.some((groupInList: SelectableValue<string>) => groupInList.label === group_),\n    [groupOptions]\n  );\n  return !groupIsInGroupOptions(group);\n};\n\nfunction FolderGroupAndEvaluationInterval({\n  evaluateEvery,\n  setEvaluateEvery,\n  enableProvisionedGroups,\n}: {\n  evaluateEvery: string;\n  setEvaluateEvery: (value: string) => void;\n  enableProvisionedGroups: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n  const { watch, setValue, getValues } = useFormContext<RuleFormValues>();\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n\n  const [groupName, folderUid, folderName] = watch(['group', 'folder.uid', 'folder.title']);\n\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const groupfoldersForGrafana = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME];\n\n  const grafanaNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n  const existingNamespace = grafanaNamespaces.find((ns) => ns.uid === folderUid);\n  const existingGroup = existingNamespace?.groups.find((g) => g.name === groupName);\n\n  const isNewGroup = useIsNewGroup(folderUid ?? '', groupName);\n\n  useEffect(() => {\n    if (!isNewGroup && existingGroup?.interval) {\n      setEvaluateEvery(existingGroup.interval);\n    }\n  }, [setEvaluateEvery, isNewGroup, setValue, existingGroup]);\n\n  const closeEditGroupModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  const onOpenEditGroupModal = () => setIsEditingGroup(true);\n\n  const editGroupDisabled = groupfoldersForGrafana?.loading || isNewGroup || !folderUid || !groupName;\n\n  const emptyNamespace: CombinedRuleNamespace = {\n    name: folderName,\n    rulesSource: GRAFANA_RULES_SOURCE_NAME,\n    groups: [],\n  };\n  const emptyGroup: CombinedRuleGroup = { name: groupName, interval: evaluateEvery, rules: [], totals: {} };\n\n  return (\n    <div>\n      <FolderAndGroup\n        groupfoldersForGrafana={groupfoldersForGrafana?.result}\n        enableProvisionedGroups={enableProvisionedGroups}\n      />\n      {folderName && isEditingGroup && (\n        <EditCloudGroupModal\n          namespace={existingNamespace ?? emptyNamespace}\n          group={existingGroup ?? emptyGroup}\n          folderUid={folderUid}\n          onClose={() => closeEditGroupModal()}\n          intervalEditOnly\n          hideFolder={true}\n        />\n      )}\n      {folderName && groupName && (\n        <div className={styles.evaluationContainer}>\n          <Stack direction=\"column\" gap={0}>\n            <div className={styles.marginTop}>\n              <Stack direction=\"column\" gap={1}>\n                {getValues('group') && getValues('evaluateEvery') && (\n                  <span>\n                    <Trans i18nKey=\"alert-rule-form.evaluation-behaviour-group.text\" evaluateEvery={evaluateEvery}>\n                      All rules in the selected group are evaluated every {{ evaluateEvery }}.\n                    </Trans>\n                    {!isNewGroup && (\n                      <IconButton\n                        name=\"pen\"\n                        aria-label=\"Edit\"\n                        disabled={editGroupDisabled}\n                        onClick={onOpenEditGroupModal}\n                      />\n                    )}\n                  </span>\n                )}\n              </Stack>\n            </div>\n          </Stack>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ForInput({ evaluateEvery }: { evaluateEvery: string }) {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useFormContext<RuleFormValues>();\n\n  const evaluateForId = 'eval-for-input';\n  const currentPendingPeriod = watch('evaluateFor');\n\n  const setPendingPeriod = (pendingPeriod: string) => {\n    setValue('evaluateFor', pendingPeriod);\n  };\n\n  return (\n    <Stack direction=\"row\" justify-content=\"flex-start\" align-items=\"flex-start\">\n      <Field\n        label={\n          <Label\n            htmlFor=\"evaluateFor\"\n            description='Period the threshold condition must be met to trigger the alert. Selecting \"None\" triggers the alert immediately once the condition is met.'\n          >\n            <Trans i18nKey=\"alert-rule-form.evaluation-behaviour.pending-period\">Pending period</Trans>\n          </Label>\n        }\n        className={styles.inlineField}\n        error={errors.evaluateFor?.message}\n        invalid={Boolean(errors.evaluateFor?.message) ? true : undefined}\n        validationMessageHorizontalOverflow={true}\n      >\n        <Stack direction=\"row\" alignItems=\"center\">\n          <Input id={evaluateForId} width={8} {...register('evaluateFor', forValidationOptions(evaluateEvery))} />\n          <PendingPeriodQuickPick\n            selectedPendingPeriod={currentPendingPeriod}\n            groupEvaluationInterval={evaluateEvery}\n            onSelect={setPendingPeriod}\n          />\n        </Stack>\n      </Field>\n    </Stack>\n  );\n}\n\nfunction NeedHelpInfoForConfigureNoDataError() {\n  const docsLink =\n    'https://grafana.com/docs/grafana/latest/alerting/alerting-rules/create-grafana-managed-rule/#configure-no-data-and-error-handling';\n\n  return (\n    <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        <Trans i18nKey=\"alert-rule-form.evaluation-behaviour.info-help.text\">\n          Define the alert behavior when the evaluation fails or the query returns no data.\n        </Trans>\n      </Text>\n      <NeedHelpInfo\n        contentText=\"These settings can help mitigate temporary data source issues, preventing alerts from unintentionally firing due to lack of data, errors, or timeouts.\"\n        externalLink={docsLink}\n        linkText={`Read more about this option`}\n        title=\"Configure no data and error handling\"\n      />\n    </Stack>\n  );\n}\n\nfunction getDescription() {\n  const docsLink = 'https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rules/rule-evaluation/';\n\n  return (\n    <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        <Trans i18nKey=\"alert-rule-form.evaluation-behaviour.description.text\">\n          Define how the alert rule is evaluated.\n        </Trans>\n      </Text>\n      <NeedHelpInfo\n        contentText={\n          <>\n            <p>\n              <Trans i18nKey=\"alert-rule-form.evaluation-behaviour-description1\">\n                Evaluation groups are containers for evaluating alert and recording rules.\n              </Trans>\n            </p>\n            <p>\n              <Trans i18nKey=\"alert-rule-form.evaluation-behaviour-description2\">\n                An evaluation group defines an evaluation interval - how often a rule is evaluated. Alert rules within\n                the same evaluation group are evaluated over the same evaluation interval.\n              </Trans>\n            </p>\n            <p>\n              <Trans i18nKey=\"alert-rule-form.evaluation-behaviour-description3\">\n                Pending period specifies how long the threshold condition must be met before the alert starts firing.\n                This option helps prevent alerts from being triggered by temporary issues.\n              </Trans>\n            </p>\n          </>\n        }\n        externalLink={docsLink}\n        linkText={`Read about evaluation and alert states`}\n        title=\"Alert rule evaluation\"\n      />\n    </Stack>\n  );\n}\n\nexport function GrafanaEvaluationBehavior({\n  evaluateEvery,\n  setEvaluateEvery,\n  existing,\n  enableProvisionedGroups,\n}: {\n  evaluateEvery: string;\n  setEvaluateEvery: (value: string) => void;\n  existing: boolean;\n  enableProvisionedGroups: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n\n  const { watch, setValue } = useFormContext<RuleFormValues>();\n\n  const isPaused = watch('isPaused');\n\n  return (\n    // TODO remove \"and alert condition\" for recording rules\n    <RuleEditorSection stepNo={3} title=\"Set evaluation behavior\" description={getDescription()}>\n      <Stack direction=\"column\" justify-content=\"flex-start\" align-items=\"flex-start\">\n        <FolderGroupAndEvaluationInterval\n          setEvaluateEvery={setEvaluateEvery}\n          evaluateEvery={evaluateEvery}\n          enableProvisionedGroups={enableProvisionedGroups}\n        />\n        <ForInput evaluateEvery={evaluateEvery} />\n\n        {existing && (\n          <Field htmlFor=\"pause-alert-switch\">\n            <Controller\n              render={() => (\n                <Stack gap={1} direction=\"row\" alignItems=\"center\">\n                  <Switch\n                    id=\"pause-alert\"\n                    onChange={(value) => {\n                      setValue('isPaused', value.currentTarget.checked);\n                    }}\n                    value={Boolean(isPaused)}\n                  />\n                  <label htmlFor=\"pause-alert\" className={styles.switchLabel}>\n                    <Trans i18nKey=\"alert-rule-form.pause\">Pause evaluation</Trans>\n                    <Tooltip placement=\"top\" content=\"Turn on to pause evaluation for this alert rule.\" theme={'info'}>\n                      <Icon tabIndex={0} name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n                    </Tooltip>\n                  </label>\n                </Stack>\n              )}\n              name=\"isPaused\"\n            />\n          </Field>\n        )}\n      </Stack>\n      <CollapseToggle\n        isCollapsed={!showErrorHandling}\n        onToggle={(collapsed) => setShowErrorHandling(!collapsed)}\n        text=\"Configure no data and error handling\"\n      />\n      {showErrorHandling && (\n        <>\n          <NeedHelpInfoForConfigureNoDataError />\n          <Field htmlFor=\"no-data-state-input\" label=\"Alert state if no data or all values are null\">\n            <Controller\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"no-data-state-input\"\n                  width={42}\n                  includeNoData={true}\n                  includeError={false}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"noDataState\"\n            />\n          </Field>\n          <Field htmlFor=\"exec-err-state-input\" label=\"Alert state if execution error or timeout\">\n            <Controller\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"exec-err-state-input\"\n                  width={42}\n                  includeNoData={false}\n                  includeError={true}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"execErrState\"\n            />\n          </Field>\n        </>\n      )}\n    </RuleEditorSection>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css({\n    marginBottom: 0,\n  }),\n  evaluateLabel: css({\n    marginRight: theme.spacing(1),\n  }),\n  evaluationContainer: css({\n    color: theme.colors.text.secondary,\n    maxWidth: `${theme.breakpoints.values.sm}px`,\n    fontSize: theme.typography.size.sm,\n  }),\n  intervalChangedLabel: css({\n    marginBottom: theme.spacing(1),\n  }),\n  warningIcon: css({\n    justifySelf: 'center',\n    marginRight: theme.spacing(1),\n    color: theme.colors.warning.text,\n  }),\n  infoIcon: css({\n    marginLeft: '10px',\n  }),\n  warningMessage: css({\n    color: theme.colors.warning.text,\n  }),\n  bold: css({\n    fontWeight: 'bold',\n  }),\n  alignInterval: css({\n    marginTop: theme.spacing(1),\n    marginLeft: `-${theme.spacing(1)}`,\n  }),\n  marginTop: css({\n    marginTop: theme.spacing(1),\n  }),\n  switchLabel: css({\n    color: theme.colors.text.primary,\n    cursor: 'pointer',\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nconst EvaluationIntervalLimitExceeded = () => (\n  <Alert severity=\"warning\" title=\"Global evaluation interval limit exceeded\">\n    A minimum evaluation interval of <strong>{config.unifiedAlerting.minInterval}</strong> has been configured in\n    Grafana.\n    <br />\n    Please contact the administrator to configure a lower interval.\n  </Alert>\n);\n\nexport { EvaluationIntervalLimitExceeded };\n","import { css } from '@emotion/css';\nimport { compact } from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\nimport { FormProvider, RegisterOptions, useForm, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Button, Field, Input, Label, LinkButton, Modal, useStyles2, Stack } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { rulesInSameGroupHaveInvalidFor, updateLotexNamespaceAndGroupAction } from '../../state/actions';\nimport { checkEvaluationIntervalGlobalLimit } from '../../utils/config';\nimport { getRulesSourceName, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { DEFAULT_GROUP_EVALUATION_INTERVAL } from '../../utils/rule-form';\nimport { AlertInfo, getAlertInfo, isRecordingRulerRule } from '../../utils/rules';\nimport { formatPrometheusDuration, parsePrometheusDuration, safeParsePrometheusDuration } from '../../utils/time';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EvaluationIntervalLimitExceeded } from '../InvalidIntervalWarning';\nimport { decodeGrafanaNamespace, encodeGrafanaNamespace } from '../expressions/util';\nimport { EvaluationGroupQuickPick } from '../rule-editor/EvaluationGroupQuickPick';\nimport { MIN_TIME_RANGE_STEP_S } from '../rule-editor/GrafanaEvaluationBehavior';\n\nconst ITEMS_PER_PAGE = 10;\n\nfunction ForBadge({ message, error }: { message: string; error?: boolean }) {\n  if (error) {\n    return <Badge color=\"red\" icon=\"exclamation-circle\" text={'Error'} tooltip={message} />;\n  } else {\n    return <Badge color=\"orange\" icon=\"exclamation-triangle\" text={'Unknown'} tooltip={message} />;\n  }\n}\n\nconst isValidEvaluation = (evaluation: string) => {\n  try {\n    const duration = parsePrometheusDuration(evaluation);\n\n    if (duration < MIN_TIME_RANGE_STEP_S * 1000) {\n      return false;\n    }\n\n    if (duration % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\ntype AlertsWithForTableColumnProps = DynamicTableColumnProps<AlertInfo>;\ntype AlertsWithForTableProps = DynamicTableItemProps<AlertInfo>;\n\nexport const RulesForGroupTable = ({ rulesWithoutRecordingRules }: { rulesWithoutRecordingRules: RulerRuleDTO[] }) => {\n  const styles = useStyles2(getStyles);\n\n  const { watch } = useFormContext<FormValues>();\n  const currentInterval = watch('groupInterval');\n  const unknownCurrentInterval = !Boolean(currentInterval);\n\n  const rows: AlertsWithForTableProps[] = rulesWithoutRecordingRules\n    .slice()\n    .map((rule: RulerRuleDTO, index) => ({\n      id: index,\n      data: getAlertInfo(rule, currentInterval),\n    }))\n    .sort(\n      (alert1, alert2) =>\n        safeParsePrometheusDuration(alert1.data.forDuration) - safeParsePrometheusDuration(alert2.data.forDuration)\n    );\n\n  const columns: AlertsWithForTableColumnProps[] = useMemo(() => {\n    return [\n      {\n        id: 'alertName',\n        label: 'Alert',\n        renderCell: ({ data: { alertName } }) => {\n          return <>{alertName}</>;\n        },\n        size: '330px',\n      },\n      {\n        id: 'for',\n        label: 'Pending period',\n        renderCell: ({ data: { forDuration } }) => {\n          return <>{forDuration}</>;\n        },\n        size: 0.5,\n      },\n      {\n        id: 'numberEvaluations',\n        label: '#Eval',\n        renderCell: ({ data: { evaluationsToFire: numberEvaluations } }) => {\n          if (unknownCurrentInterval) {\n            return <ForBadge message=\"#Evaluations not available.\" />;\n          } else {\n            if (!isValidEvaluation(currentInterval)) {\n              return <ForBadge message={'Invalid evaluation interval format'} error />;\n            }\n            if (numberEvaluations === 0) {\n              return (\n                <ForBadge message=\"Invalid 'For' value: it should be greater or equal to evaluation interval.\" error />\n              );\n            } else {\n              return <>{numberEvaluations}</>;\n            }\n          }\n        },\n        size: 0.4,\n      },\n    ];\n  }, [currentInterval, unknownCurrentInterval]);\n\n  return (\n    <div className={styles.tableWrapper}>\n      <DynamicTable items={rows} cols={columns} pagination={{ itemsPerPage: ITEMS_PER_PAGE }} />\n    </div>\n  );\n};\n\ninterface FormValues {\n  namespaceName: string;\n  groupName: string;\n  groupInterval: string;\n}\n\nexport const evaluateEveryValidationOptions = (rules: RulerRuleDTO[]): RegisterOptions => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (evaluateEvery: string) => {\n    try {\n      const duration = parsePrometheusDuration(evaluateEvery);\n\n      if (duration < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n\n      if (duration % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n      if (rulesInSameGroupHaveInvalidFor(rules, evaluateEvery).length === 0) {\n        return true;\n      } else {\n        const rulePendingPeriods = rules.map((rule) => {\n          const { forDuration } = getAlertInfo(rule, evaluateEvery);\n          return safeParsePrometheusDuration(forDuration);\n        });\n        const largestPendingPeriod = Math.min(...rulePendingPeriods);\n        return `Evaluation interval should be smaller or equal to \"pending period\" values for existing rules in this rule group. Choose a value smaller than or equal to \"${formatPrometheusDuration(largestPendingPeriod)}\".`;\n      }\n    } catch (error) {\n      return error instanceof Error ? error.message : 'Failed to parse duration';\n    }\n  },\n});\n\nexport interface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: (saved?: boolean) => void;\n  intervalEditOnly?: boolean;\n  folderUrl?: string;\n  folderUid?: string;\n  hideFolder?: boolean;\n}\n\nexport function EditCloudGroupModal(props: ModalProps): React.ReactElement {\n  const { namespace, group, onClose, intervalEditOnly, folderUid } = props;\n\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const { loading, error, dispatched } =\n    useUnifiedAlertingSelector((state) => state.updateLotexNamespaceAndGroup) ?? initialAsyncRequestState;\n  const notifyApp = useAppNotification();\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      namespaceName: decodeGrafanaNamespace(namespace).name,\n      groupName: group.name,\n      groupInterval: group.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL,\n    }),\n    [namespace, group.name, group.interval]\n  );\n\n  const rulesSourceName = getRulesSourceName(namespace.rulesSource);\n  const isGrafanaManagedGroup = rulesSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  // parse any parent folders the alert rule might be stored in\n  const nestedFolderParents = decodeGrafanaNamespace(namespace).parents;\n\n  const nameSpaceLabel = isGrafanaManagedGroup ? 'Folder' : 'Namespace';\n\n  // close modal if successfully saved\n  useEffect(() => {\n    if (dispatched && !loading && !error) {\n      onClose(true);\n    }\n  }, [dispatched, loading, onClose, error]);\n\n  useCleanup((state) => (state.unifiedAlerting.updateLotexNamespaceAndGroup = initialAsyncRequestState));\n  const onSubmit = (values: FormValues) => {\n    // make sure that when dealing with a nested folder for Grafana managed rules we encode the folder properly\n    const newNamespaceName = isGrafanaManagedGroup\n      ? encodeGrafanaNamespace(values.namespaceName, nestedFolderParents)\n      : values.namespaceName;\n\n    dispatch(\n      updateLotexNamespaceAndGroupAction({\n        rulesSourceName: rulesSourceName,\n        groupName: group.name,\n        newGroupName: values.groupName,\n        namespaceName: namespace.name,\n        newNamespaceName: newNamespaceName,\n        groupInterval: values.groupInterval || undefined,\n        folderUid,\n      })\n    );\n  };\n\n  const formAPI = useForm<FormValues>({\n    mode: 'onBlur',\n    defaultValues,\n    shouldFocusError: true,\n  });\n\n  const {\n    handleSubmit,\n    register,\n    watch,\n    formState: { isDirty, errors, isValid },\n    setValue,\n    getValues,\n  } = formAPI;\n\n  const onInvalid = () => {\n    notifyApp.error('There are errors in the form. Correct the errors and retry.');\n  };\n\n  const rulesWithoutRecordingRules = compact(\n    group.rules.map((r) => r.rulerRule).filter((rule) => !isRecordingRulerRule(rule))\n  );\n  const hasSomeNoRecordingRules = rulesWithoutRecordingRules.length > 0;\n  const modalTitle =\n    intervalEditOnly || isGrafanaManagedGroup ? 'Edit evaluation group' : 'Edit namespace or evaluation group';\n\n  return (\n    <Modal className={styles.modal} isOpen={true} title={modalTitle} onDismiss={onClose} onClickBackdrop={onClose}>\n      <FormProvider {...formAPI}>\n        <form onSubmit={(e) => e.preventDefault()} key={JSON.stringify(defaultValues)}>\n          <>\n            {!props.hideFolder && (\n              <Stack gap={1} alignItems={'center'}>\n                <Field\n                  className={styles.formInput}\n                  label={\n                    <Label\n                      htmlFor=\"namespaceName\"\n                      description={\n                        !isGrafanaManagedGroup &&\n                        'Change the current namespace name. Moving groups between namespaces is not supported'\n                      }\n                    >\n                      {nameSpaceLabel}\n                    </Label>\n                  }\n                  invalid={Boolean(errors.namespaceName) ? true : undefined}\n                  error={errors.namespaceName?.message}\n                >\n                  <Input\n                    id=\"namespaceName\"\n                    readOnly={intervalEditOnly || isGrafanaManagedGroup}\n                    {...register('namespaceName', {\n                      required: 'Namespace name is required.',\n                    })}\n                  />\n                </Field>\n                {isGrafanaManagedGroup && props.folderUrl && (\n                  <LinkButton\n                    href={props.folderUrl}\n                    title=\"Go to folder\"\n                    variant=\"secondary\"\n                    icon=\"folder-open\"\n                    target=\"_blank\"\n                  />\n                )}\n              </Stack>\n            )}\n            <Field\n              label={\n                <Label\n                  htmlFor=\"groupName\"\n                  description=\"A group evaluates all its rules over the same evaluation interval.\"\n                >\n                  Evaluation group\n                </Label>\n              }\n              invalid={!!errors.groupName}\n              error={errors.groupName?.message}\n            >\n              <Input\n                autoFocus={true}\n                id=\"groupName\"\n                readOnly={intervalEditOnly}\n                {...register('groupName', {\n                  required: 'Evaluation group name is required.',\n                })}\n              />\n            </Field>\n            <Field\n              label={\n                <Label\n                  htmlFor=\"groupInterval\"\n                  description=\"How often is the rule evaluated. Applies to every rule within the group.\"\n                >\n                  <Stack gap={0.5}>Evaluation interval</Stack>\n                </Label>\n              }\n              invalid={Boolean(errors.groupInterval) ? true : undefined}\n              error={errors.groupInterval?.message}\n            >\n              <Stack direction=\"column\">\n                <Input\n                  id=\"groupInterval\"\n                  placeholder={DEFAULT_GROUP_EVALUATION_INTERVAL}\n                  {...register('groupInterval', evaluateEveryValidationOptions(rulesWithoutRecordingRules))}\n                />\n                <EvaluationGroupQuickPick\n                  currentInterval={getValues('groupInterval')}\n                  onSelect={(value) => setValue('groupInterval', value, { shouldValidate: true, shouldDirty: true })}\n                />\n              </Stack>\n            </Field>\n\n            {checkEvaluationIntervalGlobalLimit(watch('groupInterval')).exceedsLimit && (\n              <EvaluationIntervalLimitExceeded />\n            )}\n\n            {!hasSomeNoRecordingRules && <div>This group does not contain alert rules.</div>}\n            {hasSomeNoRecordingRules && (\n              <>\n                <div>List of rules that belong to this group</div>\n                <div className={styles.evalRequiredLabel}>\n                  #Eval column represents the number of evaluations needed before alert starts firing.\n                </div>\n                <RulesForGroupTable rulesWithoutRecordingRules={rulesWithoutRecordingRules} />\n              </>\n            )}\n\n            <div className={styles.modalButtons}>\n              <Modal.ButtonRow>\n                <Button\n                  variant=\"secondary\"\n                  type=\"button\"\n                  disabled={loading}\n                  onClick={() => onClose(false)}\n                  fill=\"outline\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"button\"\n                  disabled={!isDirty || !isValid || loading}\n                  onClick={handleSubmit((values) => onSubmit(values), onInvalid)}\n                >\n                  {loading ? 'Saving...' : 'Save'}\n                </Button>\n              </Modal.ButtonRow>\n            </div>\n          </>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    maxWidth: '560px',\n  }),\n  modalButtons: css({\n    top: '-24px',\n    position: 'relative',\n  }),\n  formInput: css({\n    flex: 1,\n  }),\n  tableWrapper: css({\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    height: '100%',\n  }),\n  evalRequiredLabel: css({\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n"],"names":["MIN_INTERVAl","QUICK_PICK_OPTIONS","minInterval","DEFAULT_INTERVAL_OPTIONS","minEvaluationIntervalMillis","head","millis","tail","index","lastInterval","multiplier","EvaluationGroupQuickPick","currentInterval","onSelect","interval","isActive","SlashesWarning","styles","getStyles","onClick","Stack","Tooltip","Icon","containsSlashes","str","RuleFolderPicker","props","value","folderWarning","folderName","customAdd","OldFolderPicker","theme","MAX_GROUP_RESULTS","useFolderGroupOptions","folderUid","enableProvisionedGroups","isLoadingRulerNamespace","rulerNamespace","alertRuleApi","group","isProvisioned","isProvisionedGroup","sortByLabel","rule","b","findGroupMatchingLabel","query","FolderAndGroup","groupfoldersForGrafana","errors","watch","setValue","control","folder","groupOptions","loading","isCreatingFolder","setIsCreatingFolder","isCreatingEvaluationGroup","setIsCreatingEvaluationGroup","onOpenFolderCreationModal","onOpenEvaluationGroupCreationModal","handleFolderCreation","resetGroup","handleEvalGroupCreation","groupName","evaluationInterval","getOptions","results","debouncedSearch","defaultGroupValue","Field","Label","ref","field","title","uid","Text","Button","selectors","FolderCreationModal","fieldState","option","Provisioning","group_","Box","EvaluationGroupCreationModal","onClose","onCreate","setTitle","onSubmit","newFolder","error","Modal","Input","e","getValues","evaluateEveryId","groupRules","g","onCancel","formAPI","register","handleSubmit","formState","watchGroupFormValues","setEvaluationInterval","options","GrafanaAlertStatePicker","includeNoData","includeError","opts","opt","Select","getPendingPeriodQuickOptions","groupEvaluationInterval","groupEvaluationIntervalMillis","PendingPeriodQuickPick","selectedPendingPeriod","isQuickSelectionActive","duration","MIN_TIME_RANGE_STEP_S","forValidationOptions","evaluateEvery","millisFor","millisEvery","useIsNewGroup","groupInList","FolderGroupAndEvaluationInterval","setEvaluateEvery","isEditingGroup","setIsEditingGroup","useUnifiedAlertingSelector","state","existingNamespace","useCombinedRuleNamespaces","ns","existingGroup","isNewGroup","closeEditGroupModal","saved","onOpenEditGroupModal","editGroupDisabled","emptyNamespace","emptyGroup","IconButton","ForInput","evaluateForId","currentPendingPeriod","setPendingPeriod","pendingPeriod","NeedHelpInfoForConfigureNoDataError","NeedHelpInfo","getDescription","GrafanaEvaluationBehavior","existing","showErrorHandling","setShowErrorHandling","isPaused","RuleEditorSection","Switch","CollapseToggle","collapsed","onChange","EvaluationIntervalLimitExceeded","Alert","ITEMS_PER_PAGE","ForBadge","message","Badge","isValidEvaluation","evaluation","RulesForGroupTable","rulesWithoutRecordingRules","unknownCurrentInterval","rows","alert1","alert2","columns","alertName","forDuration","numberEvaluations","DynamicTable","evaluateEveryValidationOptions","rules","rulePendingPeriods","largestPendingPeriod","EditCloudGroupModal","namespace","intervalEditOnly","dispatch","dispatched","notifyApp","defaultValues","rulesSourceName","isGrafanaManagedGroup","nestedFolderParents","nameSpaceLabel","useCleanup","values","newNamespaceName","isDirty","isValid","onInvalid","r","hasSomeNoRecordingRules","modalTitle","useRulesAccess"],"sourceRoot":""}