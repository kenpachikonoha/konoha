{"version":3,"file":"9199.054817393f0a246c4922.js","mappings":"gUAyBA,MAAMA,EAA4B,CAChC,iBAAkB,EACpB,EAEaC,EAAmB,CAAC,CAAE,OAAAC,EAAQ,uBAAAC,CAAuB,IAAa,CAC7E,MAAMC,KAAW,eAAY,KAE7BC,EAAA,GAAYC,GAAWA,EAAM,gBAAgB,aAAe,IAAyB,EAErF,KAAM,CAAE,QAAAC,EAAS,MAAAC,CAAM,KAAIC,EAAA,GAA4BH,GAAUA,EAAM,YAAY,EAC7EI,KAAW,MAA0CP,CAAsB,EAE3EQ,KAAU,MAAoB,CAElC,cAAe,KAAK,MAClB,KAAK,UAAU,CACb,GAAGX,EACH,GAAIE,EAAO,oBAAoB,QAAU,CAAC,CAC5C,CAAC,CACH,CACF,CAAC,EAEK,CACJ,aAAAU,EACA,UAAW,CAAE,OAAAC,CAAO,CACtB,EAAIF,EAEEG,EAAoBC,GAAuB,CAC/CX,KACE,MAA+B,CAC7B,UAAW,CACT,GAAGF,EACH,oBAAqB,CACnB,GAAGA,EAAO,oBACV,UAAQ,MAAgBa,CAAM,CAChC,CACF,EACA,UAAWb,EACX,uBAAAC,EACA,eAAgB,yBAChB,gBAAc,MAAW,0BAA2BA,CAAsB,CAC5E,CAAC,CACH,CACF,EAEA,OACE,gBAAC,KAAY,CAAE,GAAGQ,CAAA,EAChB,gBAAC,QAAK,SAAUC,EAAaE,CAAgB,GAC1CN,GACC,gBAACQ,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,yBAC3BR,EAAM,SAAW,OAAOA,CAAK,CAChC,EAED,IAAoB,IAAKS,GACxB,gBAACC,EAAA,GACC,SAAAR,EACA,aAAcV,EAAciB,EAAO,YAAY,EAC/C,IAAKA,EAAO,aACZ,OAAAA,EACA,MAAOJ,EAAOI,EAAO,YAAY,EACjC,WAAY,GACd,CACD,EACD,gBAAC,WACC,gBAACE,EAAA,EAAK,KACH,CAACT,GACA,gCACGH,GACC,gBAACa,EAAA,GAAM,CAAC,SAAU,GAAM,KAAK,UAAU,QAAQ,WAAU,WAEzD,EAED,CAACb,GAAW,gBAACa,EAAA,GAAM,CAAC,KAAK,UAAS,oBAAkB,CACvD,EAEF,gBAAC,MACC,SAAUb,EACV,KAAK,UACL,QAAQ,YACR,QAAM,MAAW,yBAA0BJ,CAAsB,GAClE,QAED,CACF,CACF,CACF,CACF,CAEJ,EClFA,EAvB2B,IAAM,CAC/B,KAAM,CAAE,qBAAAkB,CAAqB,KAAI,MAAgB,EAC3C,CAAE,KAAAC,EAAM,UAAAC,EAAW,MAAAf,CAAM,KAAIgB,EAAA,GAAsBH,CAAoB,EAE7E,OAAIE,GAAa,CAACD,EACT,aAGLd,EAEA,gBAACQ,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,yCAC3B,OAAOR,CAAK,CACf,EAICc,EAIE,gBAACrB,EAAgB,CAAC,OAAQqB,EAAM,uBAAwBD,CAAA,CAAuB,EAH7E,IAIX,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/receivers/GlobalConfigForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/GlobalConfig.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\n\nimport { Alert, Button, Stack, LinkButton } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { globalConfigOptions } from '../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { omitEmptyValues } from '../../utils/receiver-form';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { OptionField } from './form/fields/OptionField';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\ntype FormValues = Record<string, unknown>;\n\nconst defaultValues: FormValues = {\n  smtp_require_tls: true,\n} as const;\n\nexport const GlobalConfigForm = ({ config, alertManagerSourceName }: Props) => {\n  const dispatch = useDispatch();\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const { loading, error } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  const formAPI = useForm<FormValues>({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: JSON.parse(\n      JSON.stringify({\n        ...defaultValues,\n        ...(config.alertmanager_config.global ?? {}),\n      })\n    ),\n  });\n\n  const {\n    handleSubmit,\n    formState: { errors },\n  } = formAPI;\n\n  const onSubmitCallback = (values: FormValues) => {\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...config,\n          alertmanager_config: {\n            ...config.alertmanager_config,\n            global: omitEmptyValues(values),\n          },\n        },\n        oldConfig: config,\n        alertManagerSourceName,\n        successMessage: 'Global config updated.',\n        redirectPath: makeAMLink('/alerting/notifications', alertManagerSourceName),\n      })\n    );\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmitCallback)}>\n        {error && (\n          <Alert severity=\"error\" title=\"Error saving receiver\">\n            {error.message || String(error)}\n          </Alert>\n        )}\n        {globalConfigOptions.map((option) => (\n          <OptionField\n            readOnly={readOnly}\n            defaultValue={defaultValues[option.propertyName]}\n            key={option.propertyName}\n            option={option}\n            error={errors[option.propertyName]}\n            pathPrefix={''}\n          />\n        ))}\n        <div>\n          <Stack>\n            {!readOnly && (\n              <>\n                {loading && (\n                  <Button disabled={true} icon=\"spinner\" variant=\"primary\">\n                    Saving...\n                  </Button>\n                )}\n                {!loading && <Button type=\"submit\">Save global config</Button>}\n              </>\n            )}\n            <LinkButton\n              disabled={loading}\n              fill=\"outline\"\n              variant=\"secondary\"\n              href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n            >\n              Cancel\n            </LinkButton>\n          </Stack>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertmanagerConfig } from '../../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../../state/AlertmanagerContext';\nimport { GlobalConfigForm } from '../../receivers/GlobalConfigForm';\n\nconst NewMessageTemplate = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data, isLoading, error } = useAlertmanagerConfig(selectedAlertmanager);\n\n  if (isLoading && !data) {\n    return 'loading...';\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title=\"Failed to fetch notification template\">\n        {String(error)}\n      </Alert>\n    );\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return <GlobalConfigForm config={data} alertManagerSourceName={selectedAlertmanager!} />;\n};\n\nexport default NewMessageTemplate;\n"],"names":["defaultValues","GlobalConfigForm","config","alertManagerSourceName","dispatch","useCleanup","state","loading","error","useUnifiedAlertingSelector","readOnly","formAPI","handleSubmit","errors","onSubmitCallback","values","Alert","option","OptionField","Stack","Button","selectedAlertmanager","data","isLoading","useAlertmanagerConfig"],"sourceRoot":""}