{"version":3,"file":"MigrateToCloud.2ca16736e0993e8601b6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/migrate-to-cloud/shared/InfoItem.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/InfoPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/TokenErrorAlert.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/MigrationTokenModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/TokenStatus.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/MigrationTokenPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/Page.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/DisconnectModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/CallToAction/ConnectModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/CallToAction/CallToAction.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/InfoPaneLeft.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/InfoPaneRight.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/EmptyState.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/MigrationInfo.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/NameCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/StatusCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/TypeCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/ResourcesTable.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/Page.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/MigrateToCloud.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\n\nimport { Stack, Text, TextLink } from '@grafana/ui';\n\ninterface Props {\n  children: NonNullable<ReactNode>;\n  title: string;\n  linkTitle?: string;\n  linkHref?: string;\n}\n\nexport const InfoItem = ({ children, title, linkHref, linkTitle }: Props) => {\n  return (\n    <Stack gap={2} direction=\"column\">\n      <Text element=\"h4\">{title}</Text>\n      <Text color=\"secondary\">{children}</Text>\n      {linkHref && (\n        <TextLink href={linkHref} external>\n          {linkTitle ?? linkHref}\n        </TextLink>\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Box, Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../shared/InfoItem';\n\nexport const InfoPane = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Box alignItems=\"flex-start\" display=\"flex\" padding={2} gap={2} direction=\"column\" backgroundColor=\"secondary\">\n      <InfoItem\n        title={t('migrate-to-cloud.migrate-to-this-stack.title', 'Migrate configuration to this stack')}\n        linkTitle={t('migrate-to-cloud.migrate-to-this-stack.link-title', 'View the full migration guide')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.migrate-to-this-stack.body\">\n          Some configuration from your self-managed Grafana instance can be automatically copied to this cloud stack.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.get-started.title', 'How to get started')}\n        linkTitle={t('migrate-to-cloud.get-started.link-title', 'Learn more about Private Data Source Connect')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect\"\n      >\n        <Stack direction=\"column\" gap={2}>\n          <Trans i18nKey=\"migrate-to-cloud.get-started.body\">\n            The migration process must be started from your self-managed Grafana instance.\n          </Trans>\n          <ol className={styles.list}>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-1\">\n                Log in to your self-managed instance and navigate to Administration, General, Migrate to Grafana Cloud.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-2\">\n                Select &quot;Migrate this instance to Cloud&quot;.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-3\">\n                You&apos;ll be prompted for a migration token. Generate one from this screen.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-4\">\n                In your self-managed instance, select &quot;Upload everything&quot; to upload data sources and\n                dashboards to this cloud stack.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-5\">\n                If some of your data sources will not work over the public internet, you’ll need to install Private Data\n                Source Connect in your self-managed environment.\n              </Trans>\n            </li>\n          </ol>\n        </Stack>\n      </InfoItem>\n      <TextLink href=\"/connections/private-data-source-connections\">\n        {t('migrate-to-cloud.get-started.configure-pdc-link', 'Configure PDC for this stack')}\n      </TextLink>\n    </Box>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  list: css({\n    padding: 'revert',\n  }),\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nexport function TokenErrorAlert() {\n  return (\n    <Alert severity=\"error\" title={t('migrate-to-cloud.migration-token.error-title', 'Something went wrong')}>\n      <Trans i18nKey=\"migrate-to-cloud.migration-token.error-body\">\n        Unable to generate a migration token. Please try again later.\n      </Trans>\n    </Alert>\n  );\n}\n","import React, { useId } from 'react';\n\nimport { Modal, Button, Input, Stack, ClipboardButton, Field } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { TokenErrorAlert } from '../TokenErrorAlert';\n\ninterface Props {\n  isOpen: boolean;\n  hideModal: () => void;\n  migrationToken?: string;\n}\n\nexport const MigrationTokenModal = ({ isOpen, hideModal, migrationToken }: Props) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.migration-token.modal-title', 'Migration token created')}\n      onDismiss={hideModal}\n    >\n      {migrationToken ? <TokenSuccessContent migrationToken={migrationToken} /> : <TokenErrorAlert />}\n\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={hideModal}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-close\">Close</Trans>\n        </Button>\n\n        {migrationToken && (\n          <ClipboardButton variant=\"primary\" getText={() => migrationToken} onClipboardCopy={hideModal}>\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-copy-and-close\">Copy to clipboard and close</Trans>\n          </ClipboardButton>\n        )}\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nfunction TokenSuccessContent({ migrationToken }: { migrationToken: string }) {\n  const inputId = useId();\n  return (\n    <Field\n      description={t(\n        'migrate-to-cloud.migration-token.modal-field-description',\n        'Copy the token now as you will not be able to see it again. Losing a token requires creating a new one.'\n      )}\n      htmlFor={inputId}\n      label={t('migrate-to-cloud.migration-token.modal-field-label', 'Token')}\n    >\n      <Stack>\n        <Input id={inputId} value={migrationToken} readOnly />\n        <ClipboardButton icon=\"clipboard-alt\" getText={() => migrationToken}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-copy-button\">Copy to clipboard</Trans>\n        </ClipboardButton>\n      </Stack>\n    </Field>\n  );\n}\n","import React from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ninterface Props {\n  hasToken: boolean;\n  isFetching: boolean;\n}\n\nexport const TokenStatus = ({ hasToken, isFetching }: Props) => {\n  if (isFetching) {\n    return <Skeleton width={100} />;\n  }\n\n  return hasToken ? (\n    <Text color=\"success\">\n      <Trans i18nKey=\"migrate-to-cloud.token-status.active\">Token created and active</Trans>\n    </Text>\n  ) : (\n    <Trans i18nKey=\"migrate-to-cloud.token-status.no-active\">No active token</Trans>\n  );\n};\n","import React, { useCallback, useState } from 'react';\n\nimport { Box, Button, Text } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { useCreateCloudMigrationTokenMutation } from '../../api';\nimport { InfoItem } from '../../shared/InfoItem';\nimport { TokenErrorAlert } from '../TokenErrorAlert';\n\nimport { MigrationTokenModal } from './MigrationTokenModal';\nimport { TokenStatus } from './TokenStatus';\n\nexport const MigrationTokenPane = () => {\n  const [showModal, setShowModal] = useState(false);\n  const isFetchingStatus = false; // TODO: No API for this yet\n\n  const [createTokenMutation, createTokenResponse] = useCreateCloudMigrationTokenMutation();\n  const hasToken = Boolean(createTokenResponse.data?.token);\n\n  const isLoading = isFetchingStatus || createTokenResponse.isLoading; /* || deleteTokenResponse.isLoading */\n\n  const handleGenerateToken = useCallback(async () => {\n    const resp = await createTokenMutation();\n    if (!('error' in resp)) {\n      setShowModal(true);\n    }\n  }, [createTokenMutation]);\n\n  return (\n    <>\n      <Box display=\"flex\" alignItems=\"flex-start\" padding={2} gap={2} direction=\"column\" backgroundColor=\"secondary\">\n        <InfoItem title={t('migrate-to-cloud.migration-token.title', 'Migration token')}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.body\">\n            Your self-managed Grafana instance will require a special authentication token to securely connect to this\n            cloud stack.\n          </Trans>\n        </InfoItem>\n\n        {createTokenResponse?.isError ? (\n          <TokenErrorAlert />\n        ) : (\n          <Text color=\"secondary\">\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.status\">\n              Current status: <TokenStatus hasToken={hasToken} isFetching={isLoading} />\n            </Trans>\n          </Text>\n        )}\n\n        <Button disabled={isLoading || hasToken} onClick={handleGenerateToken}>\n          {createTokenResponse.isLoading\n            ? t('migrate-to-cloud.migration-token.generate-button-loading', 'Generating a migration token...')\n            : t('migrate-to-cloud.migration-token.generate-button', 'Generate a migration token')}\n        </Button>\n      </Box>\n\n      <MigrationTokenModal\n        isOpen={showModal}\n        hideModal={() => setShowModal(false)}\n        migrationToken={createTokenResponse.data?.token}\n      />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Grid, useStyles2 } from '@grafana/ui';\n\nimport { InfoPane } from './InfoPane';\nimport { MigrationTokenPane } from './MigrationTokenPane/MigrationTokenPane';\n\nexport const Page = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <Grid\n        alignItems=\"flex-start\"\n        gap={1}\n        columns={{\n          xs: 1,\n          lg: 2,\n        }}\n      >\n        <InfoPane />\n        <MigrationTokenPane />\n      </Grid>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    maxWidth: theme.breakpoints.values.xl,\n  }),\n});\n","import React from 'react';\n\nimport { Alert, ConfirmModal, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\ninterface Props {\n  isOpen: boolean;\n  isError: boolean;\n  isLoading: boolean;\n  onDisconnectConfirm: () => Promise<void>;\n  onDismiss: () => void;\n}\n\nexport const DisconnectModal = ({ isOpen, isError, isLoading, onDisconnectConfirm, onDismiss }: Props) => {\n  const confirmBody = (\n    <Stack direction=\"column\">\n      {isError && (\n        <Alert\n          severity=\"error\"\n          title={t('migrate-to-cloud.disconnect-modal.error', 'There was an error disconnecting')}\n        />\n      )}\n      <div>\n        <Trans i18nKey=\"migrate-to-cloud.disconnect-modal.body\">\n          This will remove the migration token from this installation. If you wish to upload more resources in the\n          future, you will need to enter a new migration token.\n        </Trans>\n      </div>\n    </Stack>\n  );\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.disconnect-modal.title', 'Disconnect from cloud stack')}\n      body={<></>} // body is mandatory prop, but i don't wanna\n      description={confirmBody}\n      confirmText={\n        isLoading\n          ? t('migrate-to-cloud.disconnect-modal.disconnecting', 'Disconnecting...')\n          : t('migrate-to-cloud.disconnect-modal.disconnect', 'Disconnect')\n      }\n      dismissText={t('migrate-to-cloud.disconnect-modal.cancel', 'Cancel')}\n      onConfirm={onDisconnectConfirm}\n      onDismiss={onDismiss}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useId } from 'react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Modal, Button, Stack, TextLink, Field, Input, Text, useStyles2, Alert } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { CreateMigrationApiArg } from '../../../api';\n\ninterface Props {\n  isOpen: boolean;\n  isLoading: boolean;\n  isError: boolean;\n  hideModal: () => void;\n  onConfirm: (connectStackData: CreateMigrationApiArg) => Promise<unknown>;\n}\n\ninterface FormData {\n  token: string;\n}\n\nexport const ConnectModal = ({ isOpen, isLoading, isError, hideModal, onConfirm }: Props) => {\n  const tokenId = useId();\n  const styles = useStyles2(getStyles);\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    watch,\n  } = useForm<FormData>({\n    defaultValues: {\n      token: '',\n    },\n  });\n\n  const token = watch('token');\n\n  const onConfirmConnect: SubmitHandler<FormData> = (formData) => {\n    onConfirm({\n      cloudMigrationRequest: {\n        authToken: formData.token,\n      },\n    }).then((resp) => {\n      const didError = typeof resp === 'object' && resp && 'error' in resp;\n      if (!didError) {\n        hideModal();\n      }\n    });\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.connect-modal.title', 'Connect to a cloud stack')}\n      onDismiss={hideModal}\n    >\n      <form onSubmit={handleSubmit(onConfirmConnect)}>\n        <Text color=\"secondary\">\n          <Stack direction=\"column\" gap={2}>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-get-started\">\n              To get started, you&apos;ll need a Grafana.com account.\n            </Trans>\n\n            <div>\n              <TextLink href=\"https://grafana.com/auth/sign-up/create-user?pg=prod-cloud\" external>\n                {t('migrate-to-cloud.connect-modal.body-sign-up', 'Sign up for a Grafana.com account')}\n              </TextLink>\n            </div>\n\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-cloud-stack\">\n              You&apos;ll also need a cloud stack. If you just signed up, we&apos;ll automatically create your first\n              stack. If you have an account, you&apos;ll need to select or create a stack.\n            </Trans>\n\n            <div>\n              <TextLink href=\"https://grafana.com/auth/sign-in/\" external>\n                {t('migrate-to-cloud.connect-modal.body-view-stacks', 'View my cloud stacks')}\n              </TextLink>\n            </div>\n\n            <div>\n              <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-token\">\n                Your self-managed Grafana installation needs special access to securely migrate content. You&apos;ll\n                need to create a migration token on your chosen cloud stack.\n              </Trans>\n            </div>\n\n            <div>\n              <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-token-instructions\">\n                Log into your cloud stack and navigate to Administration, General, Migrate to Grafana Cloud. Create a\n                migration token on that screen and paste the token here.\n              </Trans>\n            </div>\n\n            {isError && (\n              <Alert\n                severity=\"error\"\n                title={t('migrate-to-cloud.connect-modal.token-error-title', 'Error saving token')}\n              >\n                <Trans i18nKey=\"migrate-to-cloud.connect-modal.token-error-description\">\n                  There was an error saving the token. See the Grafana server logs for more details.\n                </Trans>\n              </Alert>\n            )}\n\n            <Field\n              className={styles.field}\n              invalid={!!errors.token}\n              error={errors.token?.message}\n              label={t('migrate-to-cloud.connect-modal.body-token-field', 'Migration token')}\n              required\n            >\n              <Input\n                {...register('token', {\n                  required: t('migrate-to-cloud.connect-modal.token-required-error', 'Migration token is required'),\n                })}\n                id={tokenId}\n                placeholder={t('migrate-to-cloud.connect-modal.body-token-field-placeholder', 'Paste token here')}\n              />\n            </Field>\n          </Stack>\n        </Text>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={hideModal}>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.cancel\">Cancel</Trans>\n          </Button>\n          <Button type=\"submit\" disabled={isLoading || !token}>\n            {isLoading\n              ? t('migrate-to-cloud.connect-modal.connecting', 'Connecting to this stack...')\n              : t('migrate-to-cloud.connect-modal.connect', 'Connect to this stack')}\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css({\n    alignSelf: 'stretch',\n  }),\n});\n","import React, { useState } from 'react';\n\nimport { Box, Button, Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { useCreateMigrationMutation } from '../../../api';\n\nimport { ConnectModal } from './ConnectModal';\n\nexport const CallToAction = () => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [createMigration, createMigrationResponse] = useCreateMigrationMutation();\n\n  return (\n    <>\n      <Box display=\"flex\" padding={5} gap={2} direction=\"column\" alignItems=\"center\" backgroundColor=\"secondary\">\n        <Text variant=\"h3\" textAlignment=\"center\">\n          <Trans i18nKey=\"migrate-to-cloud.cta.header\">Let us manage your Grafana stack</Trans>\n        </Text>\n\n        <Button disabled={createMigrationResponse.isLoading} onClick={() => setModalOpen(true)}>\n          <Trans i18nKey=\"migrate-to-cloud.cta.button\">Migrate this instance to Cloud</Trans>\n        </Button>\n      </Box>\n\n      <ConnectModal\n        isOpen={modalOpen}\n        isLoading={createMigrationResponse.isLoading}\n        isError={createMigrationResponse.isError}\n        onConfirm={createMigration}\n        hideModal={() => setModalOpen(false)}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Box } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPaneLeft = () => {\n  return (\n    <Box alignItems=\"flex-start\" display=\"flex\" padding={2} gap={2} direction=\"column\" backgroundColor=\"secondary\">\n      <InfoItem\n        title={t('migrate-to-cloud.what-is-cloud.title', 'What is Grafana Cloud?')}\n        linkTitle={t('migrate-to-cloud.what-is-cloud.link-title', 'Learn about cloud features')}\n        linkHref=\"https://grafana.com/products/cloud\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.what-is-cloud.body\">\n          Grafana cloud is a fully managed cloud-hosted observability platform ideal for cloud native environments.\n          It&apos;s everything you love about Grafana without the overhead of maintaining, upgrading, and supporting an\n          installation.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.why-host.title', 'Why host with Grafana?')}\n        linkTitle={t('migrate-to-cloud.why-host.link-title', 'More questions? Talk to an expert')}\n        linkHref=\"https://grafana.com/contact\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.why-host.body\">\n          In addition to the convenience of managed hosting, Grafana Cloud includes many cloud-exclusive features like\n          SLOs, incident management, machine learning, and powerful observability integrations.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.is-it-secure.title', 'Is it secure?')}\n        linkTitle={t('migrate-to-cloud.is-it-secure.link-title', 'Grafana Labs Trust Center')}\n        linkHref=\"https://trust.grafana.com\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.is-it-secure.body\">\n          Grafana Labs is committed to maintaining the highest standards of data privacy and security. By implementing\n          industry-standard security technologies and procedures, we help protect our customers&apos; data from\n          unauthorized access, use, or disclosure.\n        </Trans>\n      </InfoItem>\n    </Box>\n  );\n};\n","import React from 'react';\n\nimport { Box } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPaneRight = () => {\n  return (\n    <Box alignItems=\"flex-start\" display=\"flex\" direction=\"column\" gap={2} padding={2} backgroundColor=\"secondary\">\n      <InfoItem\n        title={t('migrate-to-cloud.pdc.title', 'Not all my data sources are on the public internet')}\n        linkTitle={t('migrate-to-cloud.pdc.link-title', 'Learn about PDC')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.pdc.body\">\n          Exposing your data sources to the internet can raise security concerns. Private data source connect (PDC)\n          allows Grafana Cloud to access your existing data sources over a secure network tunnel.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.pricing.title', 'How much does it cost?')}\n        linkTitle={t('migrate-to-cloud.pricing.link-title', 'Grafana Cloud pricing')}\n        linkHref=\"https://grafana.com/pricing\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.pricing.body\">\n          Grafana Cloud has a generous free plan and a 14 day unlimited usage trial. After your trial expires,\n          you&apos;ll be billed based on usage over the free plan limits.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.can-i-move.title', 'Can I move this installation to Grafana Cloud?')}\n        linkTitle={t('migrate-to-cloud.can-i-move.link-title', 'Learn about migrating other settings')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.can-i-move.body\">\n          Once you connect this installation to a cloud stack, you&apos;ll be able to upload data sources and\n          dashboards.\n        </Trans>\n      </InfoItem>\n    </Box>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Grid, Stack, useStyles2 } from '@grafana/ui';\n\nimport { CallToAction } from './CallToAction/CallToAction';\nimport { InfoPaneLeft } from './InfoPaneLeft';\nimport { InfoPaneRight } from './InfoPaneRight';\n\nexport const EmptyState = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"column\">\n        <CallToAction />\n\n        <Grid\n          alignItems=\"flex-start\"\n          gap={1}\n          columns={{\n            xs: 1,\n            lg: 2,\n          }}\n        >\n          <InfoPaneLeft />\n          <InfoPaneRight />\n        </Grid>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    maxWidth: theme.breakpoints.values.xl,\n  }),\n});\n","import React, { ReactNode } from 'react';\n\nimport { Stack, Text } from '@grafana/ui';\n\ninterface MigrationInfoProps {\n  title: NonNullable<ReactNode>;\n  value: NonNullable<ReactNode>;\n}\n\nexport function MigrationInfo({ title, value }: MigrationInfoProps) {\n  return (\n    <Stack direction=\"column\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {title}\n      </Text>\n      <Text variant=\"h4\">{value}</Text>\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { CellProps, Stack, Text, Icon, useStyles2 } from '@grafana/ui';\nimport { getSvgSize } from '@grafana/ui/src/components/Icon/utils';\nimport { Trans } from 'app/core/internationalization';\n\nimport { useGetDashboardByUidQuery, MigrateDataResponseItemDto } from '../api';\n\nexport function NameCell(props: CellProps<MigrateDataResponseItemDto>) {\n  const data = props.row.original;\n\n  return (\n    <Stack direction=\"row\" gap={2} alignItems=\"center\">\n      <ResourceIcon resource={data} />\n\n      <Stack direction=\"column\" gap={0}>\n        {data.type === 'DATASOURCE' ? <DatasourceInfo data={data} /> : <DashboardInfo data={data} />}\n      </Stack>\n    </Stack>\n  );\n}\n\nfunction getDashboardTitle(dashboardData: object) {\n  if ('title' in dashboardData && typeof dashboardData.title === 'string') {\n    return dashboardData.title;\n  }\n\n  return undefined;\n}\n\nfunction DatasourceInfo({ data }: { data: MigrateDataResponseItemDto }) {\n  const datasourceUID = data.refId;\n  const datasource = useDatasource(datasourceUID);\n\n  if (!datasource) {\n    return (\n      <>\n        <Text>\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.unknown-datasource-title\">\n            Data source {{ datasourceUID }}\n          </Trans>\n        </Text>\n        <Text color=\"secondary\">\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.unknown-datasource-type\">Unknown data source</Trans>\n        </Text>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <span>{datasource.name}</span>\n      <Text color=\"secondary\">{datasource.type}</Text>\n    </>\n  );\n}\n\nfunction DashboardInfo({ data }: { data: MigrateDataResponseItemDto }) {\n  const dashboardUID = data.refId;\n  // TODO: really, the API should return this directly\n  const { data: dashboardData, isError } = useGetDashboardByUidQuery({\n    uid: dashboardUID,\n  });\n\n  const dashboardName = useMemo(() => {\n    return (dashboardData?.dashboard && getDashboardTitle(dashboardData.dashboard)) ?? dashboardUID;\n  }, [dashboardData, dashboardUID]);\n\n  if (isError) {\n    // Not translated because this is only temporary until the data comes through in the MigrationRun API\n    return (\n      <>\n        <Text italic>Unable to load dashboard</Text>\n        <Text color=\"secondary\">Dashboard {dashboardUID}</Text>\n      </>\n    );\n  }\n\n  if (!dashboardData) {\n    return <InfoSkeleton />;\n  }\n\n  return (\n    <>\n      <span>{dashboardName}</span>\n      <Text color=\"secondary\">{dashboardData.meta?.folderTitle ?? 'Dashboards'}</Text>\n    </>\n  );\n}\n\nfunction InfoSkeleton() {\n  return (\n    <>\n      <Skeleton width={250} />\n      <Skeleton width={130} />\n    </>\n  );\n}\n\nfunction ResourceIcon({ resource }: { resource: MigrateDataResponseItemDto }) {\n  const styles = useStyles2(getIconStyles);\n  const datasource = useDatasource(resource.type === 'DATASOURCE' ? resource.refId : undefined);\n\n  if (resource.type === 'DASHBOARD') {\n    return <Icon size=\"xl\" name=\"dashboard\" />;\n  }\n\n  if (resource.type === 'DATASOURCE' && datasource?.meta?.info?.logos?.small) {\n    return <img className={styles.icon} src={datasource.meta.info.logos.small} alt=\"\" />;\n  } else if (resource.type === 'DATASOURCE') {\n    return <Icon size=\"xl\" name=\"database\" />;\n  }\n\n  return undefined;\n}\n\nfunction getIconStyles() {\n  return {\n    icon: css({\n      display: 'block',\n      width: getSvgSize('xl'),\n      height: getSvgSize('xl'),\n    }),\n  };\n}\n\nfunction useDatasource(datasourceUID: string | undefined): DataSourceInstanceSettings | undefined {\n  const datasource = useMemo(() => {\n    if (!datasourceUID) {\n      return undefined;\n    }\n\n    return (\n      config.datasources[datasourceUID] || Object.values(config.datasources).find((ds) => ds.uid === datasourceUID)\n    );\n  }, [datasourceUID]);\n\n  return datasource;\n}\n","import React from 'react';\n\nimport { CellProps, Text, Stack, Button } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { MigrateDataResponseItemDto } from '../api';\n\nexport function StatusCell(props: CellProps<MigrateDataResponseItemDto>) {\n  const { status, error } = props.row.original;\n\n  // Keep these here to preserve the translations\n  // t('migrate-to-cloud.resource-status.not-migrated', 'Not yet uploaded')\n  // t('migrate-to-cloud.resource-status.migrating', 'Uploading...')\n\n  if (status === 'OK') {\n    return <Text color=\"success\">{t('migrate-to-cloud.resource-status.migrated', 'Uploaded to cloud')}</Text>;\n  } else if (status === 'ERROR') {\n    return (\n      <Stack alignItems=\"center\">\n        <Text color=\"error\">{t('migrate-to-cloud.resource-status.failed', 'Error')}</Text>\n\n        {error && (\n          // TODO: trigger a proper modal, probably from the parent, on click\n          <Button size=\"sm\" variant=\"secondary\" onClick={() => window.alert(error)}>\n            {t('migrate-to-cloud.resource-status.error-details-button', 'Details')}\n          </Button>\n        )}\n      </Stack>\n    );\n  }\n\n  return <Text color=\"secondary\">{t('migrate-to-cloud.resource-status.unknown', 'Unknown')}</Text>;\n}\n","import { CellProps } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { MigrateDataResponseItemDto } from '../api';\n\nexport function TypeCell(props: CellProps<MigrateDataResponseItemDto>) {\n  const { type } = props.row.original;\n\n  switch (type) {\n    case 'DATASOURCE':\n      return t('migrate-to-cloud.resource-type.datasource', 'Data source');\n    case 'DASHBOARD':\n      return t('migrate-to-cloud.resource-type.dashboard', 'Dashboard');\n    case 'FOLDER':\n      return t('migrate-to-cloud.resource-type.folder', 'Folder');\n    default:\n      return t('migrate-to-cloud.resource-type.unknown', 'Unknown');\n  }\n}\n","import React from 'react';\n\nimport { InteractiveTable } from '@grafana/ui';\n\nimport { MigrateDataResponseItemDto } from '../api';\n\nimport { NameCell } from './NameCell';\nimport { StatusCell } from './StatusCell';\nimport { TypeCell } from './TypeCell';\n\ninterface ResourcesTableProps {\n  resources: MigrateDataResponseItemDto[];\n}\n\nconst columns = [\n  { id: 'name', header: 'Name', cell: NameCell },\n  { id: 'type', header: 'Type', cell: TypeCell },\n  { id: 'status', header: 'Status', cell: StatusCell },\n];\n\nexport function ResourcesTable({ resources }: ResourcesTableProps) {\n  return <InteractiveTable columns={columns} data={resources} getRowId={(r) => r.refId} pageSize={15} />;\n}\n","import { skipToken } from '@reduxjs/toolkit/query/react';\nimport React, { useCallback, useState } from 'react';\n\nimport { Alert, Box, Button, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport {\n  useDeleteCloudMigrationMutation,\n  useGetCloudMigrationRunListQuery,\n  useGetCloudMigrationRunQuery,\n  useGetMigrationListQuery,\n  useRunCloudMigrationMutation,\n} from '../api';\n\nimport { DisconnectModal } from './DisconnectModal';\nimport { EmptyState } from './EmptyState/EmptyState';\nimport { MigrationInfo } from './MigrationInfo';\nimport { ResourcesTable } from './ResourcesTable';\n\n/**\n * Here's how migrations work:\n *\n * A single on-prem instance can be configured to be migrated to multiple cloud instances.\n *  - GetMigrationList returns this the list of migration targets for the on prem instance\n *  - If GetMigrationList returns an empty list, then the empty state with a prompt to enter a token should be shown\n *  - The UI (at the moment) only shows the most recently created migration target (the last one returned from the API)\n *    and doesn't allow for others to be created\n *\n * A single on-prem migration 'target' (CloudMigrationResponse) can have multiple migration runs (CloudMigrationRun)\n *  - To list the migration resources:\n *      1. call GetCloudMigratiopnRunList to list all runs\n *      2. call GetCloudMigrationRun with the ID from first step to list the result of that migration\n */\n\nfunction useGetLatestMigrationDestination() {\n  const result = useGetMigrationListQuery();\n  const latestMigration = result.data?.migrations?.at(-1);\n\n  return {\n    ...result,\n    data: latestMigration,\n  };\n}\n\nfunction useGetLatestMigrationRun(migrationUid?: string) {\n  const listResult = useGetCloudMigrationRunListQuery(migrationUid ? { uid: migrationUid } : skipToken);\n  const latestMigrationRun = listResult.data?.runs?.at(-1);\n\n  const runResult = useGetCloudMigrationRunQuery(\n    latestMigrationRun?.uid && migrationUid ? { runUid: latestMigrationRun.uid } : skipToken\n  );\n\n  return {\n    ...runResult,\n\n    data: runResult.data,\n\n    error: listResult.error || runResult.error,\n\n    isError: listResult.isError || runResult.isError,\n    isLoading: listResult.isLoading || runResult.isLoading,\n    isFetching: listResult.isFetching || runResult.isFetching,\n  };\n}\n\nexport const Page = () => {\n  const [disconnectModalOpen, setDisconnectModalOpen] = useState(false);\n  const migrationDestination = useGetLatestMigrationDestination();\n  const lastMigrationRun = useGetLatestMigrationRun(migrationDestination.data?.uid);\n  const [performRunMigration, runMigrationResult] = useRunCloudMigrationMutation();\n  const [performDisconnect, disconnectResult] = useDeleteCloudMigrationMutation();\n\n  // isBusy is not a loading state, but indicates that the system is doing *something*\n  // and all buttons should be disabled\n  const isBusy =\n    runMigrationResult.isLoading ||\n    migrationDestination.isFetching ||\n    lastMigrationRun.isFetching ||\n    disconnectResult.isLoading;\n\n  const resources = lastMigrationRun.data?.items;\n  const migrationDestUID = migrationDestination.data?.uid;\n\n  const handleDisconnect = useCallback(async () => {\n    if (!migrationDestUID) {\n      return;\n    }\n\n    const resp = await performDisconnect({ uid: migrationDestUID });\n    if (!('error' in resp)) {\n      setDisconnectModalOpen(false);\n    }\n  }, [migrationDestUID, performDisconnect]);\n\n  const handleStartMigration = useCallback(() => {\n    if (migrationDestination.data?.uid) {\n      performRunMigration({ uid: migrationDestination.data?.uid });\n    }\n  }, [performRunMigration, migrationDestination]);\n\n  const migrationMeta = migrationDestination.data;\n  const isInitialLoading = migrationDestination.isLoading;\n\n  if (isInitialLoading) {\n    // TODO: better loading state\n    return <div>Loading...</div>;\n  } else if (!migrationMeta) {\n    return <EmptyState />;\n  }\n\n  return (\n    <>\n      <Stack direction=\"column\" gap={4}>\n        {runMigrationResult.isError && (\n          <Alert\n            severity=\"error\"\n            title={t(\n              'migrate-to-cloud.summary.run-migration-error-title',\n              'There was an error migrating your resources'\n            )}\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.run-migration-error-description\">\n              See the Grafana server logs for more details\n            </Trans>\n          </Alert>\n        )}\n\n        {disconnectResult.isError && (\n          <Alert\n            severity=\"error\"\n            title={t('migrate-to-cloud.summary.disconnect-error-title', 'There was an error disconnecting')}\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.disconnect-error-description\">\n              See the Grafana server logs for more details\n            </Trans>\n          </Alert>\n        )}\n\n        {migrationMeta.stack && (\n          <Box\n            borderColor=\"weak\"\n            borderStyle=\"solid\"\n            padding={2}\n            display=\"flex\"\n            gap={4}\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <MigrationInfo\n              title={t('migrate-to-cloud.summary.target-stack-title', 'Uploading to')}\n              value={\n                <>\n                  {migrationMeta.stack}{' '}\n                  <Button\n                    disabled={isBusy}\n                    onClick={() => setDisconnectModalOpen(true)}\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    icon={disconnectResult.isLoading ? 'spinner' : undefined}\n                  >\n                    <Trans i18nKey=\"migrate-to-cloud.summary.disconnect\">Disconnect</Trans>\n                  </Button>\n                </>\n              }\n            />\n\n            <Button\n              disabled={isBusy}\n              onClick={handleStartMigration}\n              icon={runMigrationResult.isLoading ? 'spinner' : undefined}\n            >\n              <Trans i18nKey=\"migrate-to-cloud.summary.start-migration\">Upload everything</Trans>\n            </Button>\n          </Box>\n        )}\n\n        {resources && <ResourcesTable resources={resources} />}\n      </Stack>\n\n      <DisconnectModal\n        isOpen={disconnectModalOpen}\n        isLoading={disconnectResult.isLoading}\n        isError={disconnectResult.isError}\n        onDisconnectConfirm={handleDisconnect}\n        onDismiss={() => setDisconnectModalOpen(false)}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { Page as CloudPage } from './cloud/Page';\nimport { Page as OnPremPage } from './onprem/Page';\n\nexport default function MigrateToCloud() {\n  return <Page navId=\"migrate-to-cloud\">{config.cloudMigrationIsTarget ? <CloudPage /> : <OnPremPage />}</Page>;\n}\n"],"names":["InfoItem","children","title","linkHref","linkTitle","Stack","Text","TextLink","InfoPane","styles","getStyles","Box","theme","TokenErrorAlert","Alert","MigrationTokenModal","isOpen","hideModal","migrationToken","Modal","TokenSuccessContent","Button","ClipboardButton","inputId","Field","Input","TokenStatus","hasToken","isFetching","MigrationTokenPane","showModal","setShowModal","isFetchingStatus","createTokenMutation","createTokenResponse","isLoading","handleGenerateToken","Grid","DisconnectModal","isError","onDisconnectConfirm","onDismiss","confirmBody","ConfirmModal","ConnectModal","onConfirm","tokenId","handleSubmit","register","errors","watch","token","onConfirmConnect","formData","resp","CallToAction","modalOpen","setModalOpen","createMigration","createMigrationResponse","InfoPaneLeft","InfoPaneRight","EmptyState","MigrationInfo","value","NameCell","props","data","ResourceIcon","DatasourceInfo","DashboardInfo","getDashboardTitle","dashboardData","datasourceUID","datasource","useDatasource","dashboardUID","dashboardName","InfoSkeleton","resource","getIconStyles","Icon","config","ds","StatusCell","status","error","TypeCell","type","columns","ResourcesTable","resources","InteractiveTable","r","useGetLatestMigrationDestination","result","latestMigration","useGetLatestMigrationRun","migrationUid","listResult","latestMigrationRun","runResult","disconnectModalOpen","setDisconnectModalOpen","migrationDestination","lastMigrationRun","performRunMigration","runMigrationResult","performDisconnect","disconnectResult","isBusy","migrationDestUID","handleDisconnect","handleStartMigration","migrationMeta","MigrateToCloud","Page"],"sourceRoot":""}